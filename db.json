{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/matery/source/favicon1.png","path":"favicon1.png","modified":0,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/explosion.min.js","path":"libs/others/explosion.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/fireworks.js","path":"libs/others/fireworks.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/text.js","path":"libs/others/text.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","path":"medias/avatars/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/avatar2.jpg","path":"medias/avatars/avatar2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/babyq.png","path":"medias/avatars/babyq.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","path":"medias/avatars/cww97.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/fun4go.png","path":"medias/avatars/fun4go.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hael.jpg","path":"medias/avatars/hael.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","path":"medias/avatars/huaji.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","path":"medias/avatars/hzwer.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","path":"medias/avatars/ids2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","path":"medias/avatars/kewlgrl.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","path":"medias/avatars/ldy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","path":"medias/avatars/lijiaqian.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/liyangzone.jpg","path":"medias/avatars/liyangzone.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","path":"medias/avatars/liyucheng.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","path":"medias/avatars/antnlp.ico","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","path":"medias/avatars/duyupei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","path":"medias/avatars/gsy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/michael.jpg","path":"medias/avatars/michael.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","path":"medias/avatars/mizunashi.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","path":"medias/avatars/mouse.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mpy634.png","path":"medias/avatars/mpy634.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","path":"medias/avatars/myzhihu.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","path":"medias/avatars/qiandongwei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","path":"medias/avatars/qiqiang.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/spacesac.png","path":"medias/avatars/spacesac.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","path":"medias/avatars/taowei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","path":"medias/avatars/xuzhongyou.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","path":"medias/avatars/zhangting.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","path":"medias/avatars/zhaokangzhe.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","path":"medias/avatars/zzw.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay2.jpg","path":"medias/reward/alipay2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/xs.jpg","path":"medias/music/avatars/xs.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","path":"medias/music/avatars/yequ.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/bc.jpg","path":"medias/music/avatars/bc.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","path":"medias/music/avatars/yiluxiangbei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/ljj.jpg","path":"medias/music/avatars/ljj.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/tiantangdemogui.jpg","path":"medias/music/avatars/tiantangdemogui.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/0xbird.png","path":"medias/avatars/0xbird.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","path":"medias/avatars/lyn-draw.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lzh.png","path":"medias/avatars/lzh.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qianqian.png","path":"medias/avatars/qianqian.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/7.jpg","path":"medias/banner/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/26.jpg","path":"medias/featureimages/26.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/25.jpg","path":"medias/featureimages/25.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mashiro.jpg","path":"medias/avatars/mashiro.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/24.jpg","path":"medias/featureimages/24.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/27.jpg","path":"medias/featureimages/27.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","path":"medias/avatars/jingjing.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","path":"medias/avatars/zhangyi.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/daoshu.jpg","path":"medias/music/avatars/daoshu.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"d97f69ff63501de89cfd341c68e4d6ed5c8a5b3a","modified":1590652273063},{"_id":"source/CNAME","hash":"a70c4ab45be1e1492d05804c22e690df372e4dbe","modified":1590652273063},{"_id":"themes/matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1590652273156},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1590652273156},{"_id":"themes/matery/README.md","hash":"7ef16198a2c5ff580f006582286354caf160c7fe","modified":1590652273156},{"_id":"themes/matery/README_CN.md","hash":"a94324950e0299bcfcbc106cf2ca65c93e1fe843","modified":1590652273156},{"_id":"themes/matery/_config.yml","hash":"c9634a1e0fec16972655c0122a054d98cfc4fa60","modified":1590652273156},{"_id":"source/archives/index.md","hash":"a62b7d9b8a8bdf966ec5c823e71581d2b185156e","modified":1590652273156},{"_id":"source/_data/musics.json","hash":"8238da25dc6f59bef38d9c985bb9015afbd3a783","modified":1590652273063},{"_id":"source/_data/friends.json","hash":"97cd698d18127d70a00e33b76e66d74f04100c0b","modified":1590652273063},{"_id":"source/about/index.md","hash":"582e08e900632081716678e43c5cc046ea59809f","modified":1590652273156},{"_id":"source/categories/index.md","hash":"76889deb16e0d61d5c585f26a0e69f01de6cab74","modified":1590652273156},{"_id":"source/friends/index.md","hash":"7c93149eef7095fb6dc5f09b80be01e85f3a01c0","modified":1590652273156},{"_id":"source/contact/index.md","hash":"17bd21e948eedca6c62f11cd210078d4a459ae29","modified":1590652273156},{"_id":"source/tags/index.md","hash":"98697833897097a5c65521ea02baa1c6f85948d8","modified":1590652273156},{"_id":"source/_posts/26个常用易忘CSS小技巧.md","hash":"9f700fe5a44fa854aa2e136ec601a0c571461b07","modified":1590653026974},{"_id":"source/_posts/Echars中常用方法.md","hash":"41321943dc37bb9b13708bd3867a0ffb88aadcb7","modified":1590652273063},{"_id":"source/_posts/Echars在Vue中如何使用.md","hash":"fb6f9a5a6ab7700dbb0bac0ab059be38cc5f07df","modified":1590652273078},{"_id":"source/_posts/GIS基本使用.md","hash":"0a58319b54ee71696ecec13fe9da5b6c62c6e535","modified":1590652273078},{"_id":"source/_posts/React Native 搭建小白教程.md","hash":"4f90a733587208f58ea01021c52c082fcc6e3faf","modified":1590715186281},{"_id":"source/_posts/React Native 搭建教程.md","hash":"fcf56d9da010d8e4f55918d93922aa1430741d7f","modified":1590715170475},{"_id":"source/_posts/React-Native入坑之路.md","hash":"ecf043b391dec5d62f552f210165c30dd6e6494e","modified":1590715205690},{"_id":"source/_posts/React总结.md","hash":"8d2c304dc91f9ec624ae0ae374c3e85477073e08","modified":1590652273110},{"_id":"source/_posts/Self checking.md","hash":"203b73908055c76807365615c7d5b493b2caac3b","modified":1590652273110},{"_id":"source/_posts/TS+VUE项目搭建.md","hash":"0f45b8d27f01b2326e0b72dc5063023a7d7ccc68","modified":1590652273110},{"_id":"source/_posts/TS学习总结.md","hash":"bae5888da54803c4ce608e25260c75d23ccfa74d","modified":1590652273125},{"_id":"source/_posts/VUE+element穿梭框.md","hash":"88e7739673a9373c551ba8f0a5df0643ec893a86","modified":1590652273125},{"_id":"source/_posts/VUE中使用echarts配合canvas绘制图例.md","hash":"fa3cd981ec9b91ec34ce546e8aed3fdc15bc5b8b","modified":1590652273125},{"_id":"source/_posts/VUE项目常用方法总结.md","hash":"2117ed0f062a28fec02aaa9edf446b947d675b2f","modified":1590652273125},{"_id":"source/_posts/javascript 数组去重.md","hash":"7220f3550b9d0135958ab65f4f7da9f1a4ca3edd","modified":1590652273125},{"_id":"source/_posts/js常用数组操作方法.md","hash":"6ca951ef753805ffc00852edfb1e7321ea39ea10","modified":1590652273125},{"_id":"source/_posts/js常用方法.md","hash":"269514dc03cac3057a25f371a6b9a1418f16c985","modified":1590652273141},{"_id":"source/_posts/node.js搭建本地服务模拟数据.md","hash":"5004ab6e69bef2daed42e15147e9ada87e44e5f1","modified":1590652273141},{"_id":"source/_posts/node搭建.md","hash":"2ca2ee12093ce3903e1ea1bc6b1b9531b08154f7","modified":1590652273141},{"_id":"source/_posts/从0搭建自己的webpack开发环境.md","hash":"fbf2aaeb1257a1326bcc65a3987ad0035dafe900","modified":1590652273141},{"_id":"source/_posts/从零搭建前端组件库.md","hash":"f6ead07ca55c2ca92c33760783100a7cebe973c6","modified":1590655673185},{"_id":"source/_posts/年末总结.md","hash":"9768183382befc6c3aa648cc7c54cb8035e75075","modified":1590652273156},{"_id":"source/_posts/提高工作效率的常用js函数汇总.md","hash":"01def6366244d72911290c4fdddb1d386fb9fb8b","modified":1590652273156},{"_id":"source/_posts/面试之旅.md","hash":"8a32677b2d359178a12a5330de60795a096e5fc5","modified":1590715135535},{"_id":"themes/matery/languages/default.yml","hash":"527c795b8c41fe62bf35603ffebfa6d4a7929a2c","modified":1590652273156},{"_id":"themes/matery/layout/404.ejs","hash":"f08a0f507b36f3652520a41381f71167488405c7","modified":1590652273172},{"_id":"themes/matery/languages/zh-CN.yml","hash":"d92db4b986bb6f0d228e9a8249383103bf56342d","modified":1590652273156},{"_id":"themes/matery/layout/about.ejs","hash":"e87752e59f021b5139b1155a264da11ab469a9aa","modified":1590652273188},{"_id":"themes/matery/layout/archive.ejs","hash":"1b5023571894404d75caffa28128fc9c49f9095d","modified":1590652273188},{"_id":"themes/matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1590652273188},{"_id":"themes/matery/layout/category.ejs","hash":"2d421e10c3b8fd2c4f725e5eaa967c4a1429c707","modified":1590652273188},{"_id":"themes/matery/layout/contact.ejs","hash":"1513c5a40b7cc0b6e5854cf8c3253958bcb486cb","modified":1590652273188},{"_id":"themes/matery/layout/friends.ejs","hash":"b9b75ff45324da5b4ddbb6e16ea1ecd239dbc310","modified":1590652273188},{"_id":"themes/matery/layout/layout.ejs","hash":"81dac13cd611f140c52e8d1db5fbf92ab57dc689","modified":1590714752825},{"_id":"themes/matery/layout/index.ejs","hash":"7fc5a6c4f0229c0be43b7d1315524c468346fbb8","modified":1590652273188},{"_id":"themes/matery/layout/post.ejs","hash":"9ecae79690293cacdccc172118f1fe481705b1f2","modified":1590652273188},{"_id":"themes/matery/layout/tag.ejs","hash":"5cdf3a1d72f54285ee9cb826fd0e4a0449093215","modified":1590652273203},{"_id":"themes/matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1590652273203},{"_id":"themes/matery/source/favicon.png","hash":"86cd709f59da269184b03cb57d76c8e6b1e91d1c","modified":1590652273203},{"_id":"themes/matery/source/favicon1.png","hash":"6850c3643f81caf79c8be7c454a501f0d3962e14","modified":1590652273203},{"_id":"source/_posts/Echars在Vue中如何使用/1679c3f7aa381aa7","hash":"f0b4ca8cbfe96ba322cd3ddd1b10b7b0cc6c8418","modified":1590652273078},{"_id":"source/_posts/Echars在Vue中如何使用/4.jpg","hash":"c5bf0a0ee9e9e35ffe813040e7b58b34b846facb","modified":1590652273078},{"_id":"source/_posts/Echars在Vue中如何使用/5.jpg","hash":"f0b4ca8cbfe96ba322cd3ddd1b10b7b0cc6c8418","modified":1590652273078},{"_id":"source/_posts/React Native 从入门到掌握/10.jpg","hash":"c12a87b01043c1ee45fcdee53c2bd376c26e0ea6","modified":1590652273094},{"_id":"source/_posts/React Native 从入门到掌握/1.jpg","hash":"7298dfb9acc2c8da37f53da705c0e291deceeff6","modified":1590652273094},{"_id":"source/_posts/React Native 从入门到掌握/12.jpg","hash":"24eea834a869564aec5c3d4481e45e0e8302a809","modified":1590652273094},{"_id":"source/_posts/React Native 从入门到掌握/11.jpg","hash":"58ea36dafcac3cb9f8d20632134df5b9376161e1","modified":1590652273094},{"_id":"source/_posts/React Native 从入门到掌握/13.jpg","hash":"ea4182bf2db564bca028c5f05efee9e4ff480a5e","modified":1590652273094},{"_id":"source/_posts/React Native 从入门到掌握/15.jpg","hash":"dc29678c34c9e1e808730a5248a238140c2ccb9a","modified":1590652273094},{"_id":"source/_posts/React Native 从入门到掌握/16.jpg","hash":"e64cfd233f663a3ae76027b85bdd25d85528b72e","modified":1590652273094},{"_id":"source/_posts/React Native 从入门到掌握/17.jpg","hash":"8153aa191cbc459c75ad342c5f0d3f4cd821bd87","modified":1590652273094},{"_id":"source/_posts/React Native 从入门到掌握/18.jpg","hash":"f1c57e9a32d00436b448e28a902d5a0a9628b1d1","modified":1590652273094},{"_id":"source/_posts/React Native 从入门到掌握/19.jpg","hash":"aa0cb402612324ccccdac5ce12a5315492e5bbf9","modified":1590652273094},{"_id":"source/_posts/React Native 从入门到掌握/2.jpg","hash":"7c727e692bb7a5fc45730ed03cb941a36c2a894f","modified":1590652273094},{"_id":"source/_posts/React Native 从入门到掌握/20.jpg","hash":"401b45b34e416a0f5863cadc54bac471af8fb551","modified":1590652273094},{"_id":"source/_posts/React Native 从入门到掌握/21.jpg","hash":"e61c10186fc001ed19a829c3604e3fafe4a43700","modified":1590652273094},{"_id":"source/_posts/React Native 从入门到掌握/5.jpg","hash":"be4c8bb8d9d20e7ac3464b67ea5c320926653e55","modified":1590652273094},{"_id":"source/_posts/React Native 从入门到掌握/6.jpg","hash":"a8672dedee833bb45fa76956a35322109d27f23d","modified":1590652273094},{"_id":"source/_posts/React Native 从入门到掌握/7.jpg","hash":"47b5aec71b6dbcbfbb556fc234b633d7a427b9db","modified":1590652273094},{"_id":"source/_posts/React Native 从入门到掌握/8.jpg","hash":"4d67ab7a7c4ea40d7c246cc1b136c37603d21fdc","modified":1590652273094},{"_id":"source/_posts/React Native 从入门到掌握/9.jpg","hash":"ae5232d2662a4632c49d35c47f020b3b982d53cf","modified":1590652273110},{"_id":"source/_posts/React Native 从入门到掌握/python.jpg","hash":"f82a7981b52f31ed168344a53b0f03a41bed5694","modified":1590652273110},{"_id":"source/_posts/React-Native入坑之路/1.jpg","hash":"311f5de051095e9fa81460b509f8ac176da9539d","modified":1590652273110},{"_id":"source/_posts/React-Native入坑之路/2.jpg","hash":"9214a0880f1f1021b68d298af09ba22977311d98","modified":1590652273110},{"_id":"source/_posts/React总结/1.jpg","hash":"7dae6637a4feb69de0a17895e2378810e6d526ef","modified":1590652273110},{"_id":"source/_posts/React总结/2.jpg","hash":"506d1954b08101100e7ed4eaae988e484061e0ce","modified":1590652273110},{"_id":"source/_posts/React总结/4.jpg","hash":"0dfe29a2e55e4cc8e9ab0e46c9d5c0e231df70a6","modified":1590652273110},{"_id":"source/_posts/React总结/5.jpg","hash":"38ac87639bfe6218c3160b4e321103fc1e9f65dc","modified":1590652273110},{"_id":"source/_posts/Self checking/4.jpg","hash":"3862db359d52b55db3fe1a6339b66d2610770030","modified":1590652273110},{"_id":"source/_posts/TS+VUE项目搭建/1.jpg","hash":"da7a5588fabcb8cae72c3446b92e99061726721f","modified":1590652273110},{"_id":"source/_posts/TS+VUE项目搭建/2.jpg","hash":"1688786d5200829b06ad22677503fc8033669ffd","modified":1590652273125},{"_id":"source/_posts/TS+VUE项目搭建/3.jpg","hash":"e84886e955c248d3f45625a28e749e71846ecc70","modified":1590652273125},{"_id":"source/_posts/TS+VUE项目搭建/4.jpg","hash":"63991d755585b81ae1dd8e6a10ff6a9805be6a06","modified":1590652273125},{"_id":"source/_posts/TS+VUE项目搭建/5.jpg","hash":"8c00e4ca3b3f8bba7a8efbb5ac35998e825f678e","modified":1590652273125},{"_id":"source/_posts/TS学习总结/1.jpg","hash":"050f15e5d3250f5b95c46d8813d76d7bb3a39afe","modified":1590652273125},{"_id":"source/_posts/TS学习总结/2.jpg","hash":"dfdf3a9d074f82e8abe5f54a13089766e36b375d","modified":1590652273125},{"_id":"source/_posts/TS学习总结/3.jpg","hash":"18d32ab9c52dfc1b101d27423077b9a139de607a","modified":1590652273125},{"_id":"source/_posts/javascript 数组去重/4.jpg","hash":"3862db359d52b55db3fe1a6339b66d2610770030","modified":1590652273125},{"_id":"source/_posts/js常用数组操作方法/4.jpg","hash":"3862db359d52b55db3fe1a6339b66d2610770030","modified":1590652273141},{"_id":"source/_posts/node.js搭建本地服务模拟数据/10.jpg","hash":"49f38d38b79b3238e36153b8058e490b67bcb84b","modified":1590652273141},{"_id":"source/_posts/node.js搭建本地服务模拟数据/6.jpg","hash":"68aa4b1d135b733b5abd9ef58bdb010f240e6355","modified":1590652273141},{"_id":"source/_posts/node.js搭建本地服务模拟数据/66.jpg","hash":"16301d5fa13517208405a56e613fdfb055ec8e36","modified":1590652273141},{"_id":"source/_posts/node.js搭建本地服务模拟数据/8.jpg","hash":"3e6eddc7f66dc6aa4cbf89b398b627a23a117e74","modified":1590652273141},{"_id":"source/_posts/node.js搭建本地服务模拟数据/12.jpg","hash":"0c6668c172f5fc7e75a9a2681e6e9d1e0dfecbc6","modified":1590652273141},{"_id":"source/_posts/node.js搭建本地服务模拟数据/3.jpg","hash":"6b5cb21f0c5f70e1330cbe38998fb80726f5578b","modified":1590652273141},{"_id":"source/_posts/node.js搭建本地服务模拟数据/5.jpg","hash":"ce9b4a07bf8ea82e82c1eb0e6ce23abf626c7249","modified":1590652273141},{"_id":"source/_posts/node搭建/4.jpg","hash":"3862db359d52b55db3fe1a6339b66d2610770030","modified":1590652273141},{"_id":"source/_posts/node搭建/node.jpg","hash":"350aae475735d0c9897ddb2860329c153a75ff16","modified":1590652273141},{"_id":"source/_posts/从零搭建前端组件库/1.png","hash":"77f7709527a8c9a0acaa11750cd8c5440c39c130","modified":1590654415345},{"_id":"source/_posts/从零搭建前端组件库/2.png","hash":"9c6ee7191794bcc3cbad2e47d9599b858cd1b463","modified":1590654422944},{"_id":"source/_posts/从零搭建前端组件库/7.png","hash":"d4edd797ba6466f6ce2eaab65b69b6d4ab16b87d","modified":1590654443841},{"_id":"source/_posts/从零搭建前端组件库/7.webp","hash":"f220f2182c03661a24de3e460b517dba14da22cd","modified":1590654435441},{"_id":"source/_posts/从0搭建自己的webpack开发环境/2.jpg","hash":"350aae475735d0c9897ddb2860329c153a75ff16","modified":1590652273156},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"cb99dc352397ec5d0765794d7b8884972e61973b","modified":1590652273172},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"42dda8e67f7f09d148347887e52f18aea546df26","modified":1590652273172},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1590652273172},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"6bf708dbd705b486bc464e9be8e8834bbd692850","modified":1590652273172},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"53fb2320c8d544877cf1e63b01cd8eb815df4e3a","modified":1590652273172},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"a3a140e6aeeb6f289e4b821a577ef548267f3de1","modified":1590652273172},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1590652273172},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"d8c40dbc8106b5bc53ceb727ad968c1d8f234261","modified":1590652273172},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1590652273172},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"764d20ae433f558e81249ff0c8105ac53e6d3f59","modified":1590652273172},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"d62dd7af9e912480c3dff53e22a5215dd0ccbf27","modified":1590652273172},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"d4042e5521ceb5f3255cd4455ac7ccd227fee6df","modified":1590652273172},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1590652273172},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"e03a49c4e005b41ca62dd50744a580f56994182f","modified":1590652273172},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"3a82fcb6f31d69971cb564985842c14ac02cdca0","modified":1590652273172},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"dfdeea9c59d157acb851d4bf44bf95f81787523c","modified":1590652273172},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"166c0b9753f3f913bd801e82ad5b268004be198d","modified":1590652273172},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"82cb8090cde663fa7ad67418a802997b3057e957","modified":1590652273172},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"3f208f33e4e12becdb8323e6e64e20ad60c3fb2a","modified":1590652273172},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"3b42900247d5ea4ea5b68e2be44420a0d54785ad","modified":1590652273172},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"4e73f10eacb5d00a0681cb44fe5c039cd8ab03cd","modified":1590652273172},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"f85a222ec3f9bc27eb7978015e63a16514b38791","modified":1590652273172},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"73624d9db81e87ff0c12310bb873fbd0b5221021","modified":1590652273172},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"e859fe6e0259e0c123cb7ceda6e4cac836318ffc","modified":1590652273172},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"0f2e1e27d21492cf228e786daead985b1e1dcea4","modified":1590652273172},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"55272fab7a3303e94f1839ebd7ca6cf9965fb328","modified":1590652273188},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"c3039180ddb2eb17e724b8441e5f93e79859aef7","modified":1590652273188},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"82f7f4a15fe2c1af26474ff4efddb4572b60b83c","modified":1590652273188},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"2af85ddef6e61a44cbe10e8f6272a8324681ee3f","modified":1590652273188},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"b2b22d4fc4e46b051f67216c391f629f4ff552b5","modified":1590652273188},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"9ea672db65f1e5b8fad1ffafb1614f25adc97e63","modified":1590652273188},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"785cb588a31215876f6737213054ba0e8552fff0","modified":1590652273188},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"c6f713316ce75ad08ac5d1587bd8ce42e894e9ae","modified":1590652273188},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"0aaf0a111b9aa07ff37f6286eeac5506283f47f8","modified":1590652273188},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"4608af6151f0e32f668c89f09343748340021478","modified":1590652273188},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"d439d86818de179d64965d4f7f5fa56147fd9221","modified":1590652273188},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"5284712d84bbaa4f0d88026ac3ec5a8c13e00056","modified":1590652273188},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"6310903eb0e434d6f9a59ca669aab7fae38d4797","modified":1590652273188},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"bf604fe9c435f0fb9a559cac9c35772579b590e8","modified":1590652273188},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"05f5e2acace5730cdf7bed650375ad88f6b5d1b7","modified":1590652273188},{"_id":"themes/matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1590652273203},{"_id":"themes/matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1590652273203},{"_id":"themes/matery/source/css/matery.css","hash":"6c134928b347f62f3dc226d8e5d1677161f0ec83","modified":1590652273203},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1590652273203},{"_id":"themes/matery/source/js/matery.js","hash":"208b7806caa943c115aa0825c9c72a0781404775","modified":1590652273203},{"_id":"themes/matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1590652273203},{"_id":"themes/matery/source/medias/logo.png","hash":"245bf683033c88588e6b0e74bde5398866731652","modified":1590652273406},{"_id":"source/_posts/React Native 从入门到掌握/14.jpg","hash":"00a087009477ed53c6dce4cd10b3771bc1e0c1fa","modified":1590652273094},{"_id":"source/_posts/React Native 从入门到掌握/3.jpg","hash":"3c74d78b28d554d992d53592540b175eaa729fa9","modified":1590652273094},{"_id":"source/_posts/React Native 从入门到掌握/jdk.jpg","hash":"e20b15bbb8e4b03fd45eeca2f634d0c0c8a3f572","modified":1590652273110},{"_id":"source/_posts/React总结/3.jpg","hash":"f92d17d5a757aef033f5b6efb48af146b6375a1e","modified":1590652273110},{"_id":"source/_posts/javascript 数组去重/01.jpg","hash":"131a64dcd50bb146771092d049e4e363871eb1c8","modified":1590652273125},{"_id":"source/_posts/js常用数组操作方法/01.jpg","hash":"131a64dcd50bb146771092d049e4e363871eb1c8","modified":1590652273125},{"_id":"source/_posts/node搭建/01.jpg","hash":"131a64dcd50bb146771092d049e4e363871eb1c8","modified":1590652273141},{"_id":"source/_posts/从0搭建自己的webpack开发环境/01.jpg","hash":"131a64dcd50bb146771092d049e4e363871eb1c8","modified":1590652273156},{"_id":"source/_posts/node搭建/javascript 数组去重/4.jpg","hash":"3862db359d52b55db3fe1a6339b66d2610770030","modified":1590652273141},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1590652273203},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1590652273203},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1590652273219},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"021898a16279ac2ffe75af4f902fab2a0a39f11a","modified":1590652273234},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1590652273234},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1590652273234},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1590652273234},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1590652273203},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1590652273250},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1590652273250},{"_id":"themes/matery/source/libs/others/explosion.min.js","hash":"5b76fa72a85cfb27d54b00128393ece773d65386","modified":1590652273250},{"_id":"themes/matery/source/libs/others/fireworks.js","hash":"e9c74f2dd3953d4d8dec44e9977574d00702e84d","modified":1590652273266},{"_id":"themes/matery/source/libs/others/snow.js","hash":"b393f069781eef788a0ae66b2681cece8fea2851","modified":1590652273266},{"_id":"themes/matery/source/libs/others/text.js","hash":"fdf18f65977e4bc358dfb5fb0b7c98492ae72efd","modified":1590652273266},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1590652273250},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1590652273266},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1590652273266},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1590652273266},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1590652273203},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1590652273203},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","hash":"86cd709f59da269184b03cb57d76c8e6b1e91d1c","modified":1590652273281},{"_id":"themes/matery/source/medias/avatars/avatar2.jpg","hash":"6850c3643f81caf79c8be7c454a501f0d3962e14","modified":1590652273281},{"_id":"themes/matery/source/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1590652273281},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1590652273281},{"_id":"themes/matery/source/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1590652273281},{"_id":"themes/matery/source/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1590652273281},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1590652273281},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1590652273281},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1590652273281},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1590652273281},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1590652273297},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1590652273297},{"_id":"themes/matery/source/medias/avatars/liyangzone.jpg","hash":"febab557e4c0d859ab4cc14b57d8106f5e3fccfb","modified":1590652273297},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1590652273297},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"faff164ef3017ea7afb1e143b909dbc4f6436ad4","modified":1590652273328},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"aeff0bb61e179870afd22ccf22b9ddb3612964bf","modified":1590652273328},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"8ff22abe9118f8de71179c979d02ab835ca64f64","modified":1590652273422},{"_id":"source/_posts/Echars中常用方法/1.jpg","hash":"601a73356546950fb8e4838347f677fcf60250e9","modified":1590652273078},{"_id":"source/_posts/Self checking/01.jpg","hash":"131a64dcd50bb146771092d049e4e363871eb1c8","modified":1590652273110},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1590652273219},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1590652273219},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1590652273234},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"7a551393b8360731104fdef1af36a6f3638f5855","modified":1590652273234},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"f1558f12d96a352e490166d543a8e821dd3bb2bc","modified":1590652273266},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1590652273281},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1590652273281},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1590652273281},{"_id":"themes/matery/source/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1590652273297},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1590652273297},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1590652273297},{"_id":"themes/matery/source/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1590652273297},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","hash":"245bf683033c88588e6b0e74bde5398866731652","modified":1590652273297},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1590652273297},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1590652273313},{"_id":"themes/matery/source/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1590652273313},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1590652273313},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1590652273313},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1590652273313},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1590652273313},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1590652273313},{"_id":"themes/matery/source/medias/reward/alipay2.jpg","hash":"b65d93fba9d55d126eb34c8595ef3e18ed14ac47","modified":1590652273422},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"b65d93fba9d55d126eb34c8595ef3e18ed14ac47","modified":1590652273422},{"_id":"source/_posts/Echars中常用方法/2.jpg","hash":"bbd049a42bd08746578054101b4237022a4a914f","modified":1590652273078},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1590652273203},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"f63c7c489524ccb5d95e74fcd6618116c58fb305","modified":1590652273234},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1590652273250},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1590652273250},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1590652273250},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1590652273250},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1590652273250},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1590652273250},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"2c27939768606603bee3b5e6c8a722596a667e60","modified":1590652273250},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1590652273250},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1590652273250},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1590652273250},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1590652273250},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1590652273266},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1590652273266},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1590652273266},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1590652273266},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"04c6b2782ce4610c429563110f6a20a47432fc4c","modified":1590652273266},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1590652273266},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"0d8315876e8285abec48ce71797a14734fdc980c","modified":1590652273359},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"5f27406bd8661bef44291601edc2784b5af63c23","modified":1590652273359},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"c86ede693175156922041c5cdb31b9f1432a0e8a","modified":1590652273359},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"7bdf83e0822794a7294fe554c5d21edda1e0c28f","modified":1590652273406},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1590652273266},{"_id":"themes/matery/source/medias/music/avatars/xs.jpg","hash":"070337d5347aa6fdd96364eb519523ac0617d208","modified":1590652273422},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1590652273422},{"_id":"themes/matery/source/medias/music/avatars/bc.jpg","hash":"17db9591d35d51426a35fb5a66962dc60642dc93","modified":1590652273406},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1590652273422},{"_id":"themes/matery/source/medias/music/avatars/ljj.jpg","hash":"1d2651c03baafde341cd6a35df5603629e73d9e3","modified":1590652273406},{"_id":"themes/matery/source/medias/music/avatars/tiantangdemogui.jpg","hash":"f005578ddb4d3d731838db89a708f39f18d50e60","modified":1590652273406},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1590652273234},{"_id":"themes/matery/source/medias/avatars/0xbird.png","hash":"f9d597dfcb49e1e2be06138b24028291f5638610","modified":1590652273281},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1590652273297},{"_id":"themes/matery/source/medias/avatars/lzh.png","hash":"8ffcbf19d6b38b891dbe408d9a4e9513b56f247e","modified":1590652273297},{"_id":"themes/matery/source/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1590652273297},{"_id":"themes/matery/source/medias/banner/7.jpg","hash":"0f55a4a1e7ee8e168720cc8b8ed7a7f1027e89e6","modified":1590652273328},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"6dcacca5f1d93dec5c12cab74516e415243c0a64","modified":1590652273359},{"_id":"themes/matery/source/medias/featureimages/26.jpg","hash":"7e6241a0793404fb3668b1030795e5031e0f1ba7","modified":1590652273391},{"_id":"themes/matery/source/medias/featureimages/25.jpg","hash":"35a945ed6f2f8a0d055f9da6e90b974b7f30c5b0","modified":1590652273375},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1590652273266},{"_id":"source/_posts/node搭建/javascript 数组去重/01.jpg","hash":"131a64dcd50bb146771092d049e4e363871eb1c8","modified":1590652273141},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1590652273219},{"_id":"themes/matery/source/medias/avatars/mashiro.jpg","hash":"250e911c16eeb6acb1e6214ad3e6a3d762850a8e","modified":1590652273297},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"243022cf6d56a0fc366e988bb01e0d88da5420d7","modified":1590652273328},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"18cc714b6693d0336c1bbaef47ed79cc8a1d95e7","modified":1590652273359},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"5efc3856cd2da8863e9c808005c3724c09843c3c","modified":1590652273359},{"_id":"themes/matery/source/medias/featureimages/24.jpg","hash":"6339e06736ff6618d97cca389d7887439c87415a","modified":1590656431219},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"575cb26b73b220a3fea685108812466fb8b68e62","modified":1590652273344},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"447bf84c1d9bd71491545922c8735b5b41e2121f","modified":1590652273391},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"d41c54ff1c41f5bfd4ccf5af303229059577c351","modified":1590652273406},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1590652273219},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1590652273219},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1590652273219},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"e177d97cfbb0071d2ac15e99d15666cf09d5eacb","modified":1590652273344},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"44d047bc0d29d6ae3e1d65b6cb95143d0d1b6ec2","modified":1590656438044},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"3fa19adaa3c19d58e34be573f1c3233c9b57b242","modified":1590652273344},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"c72b487cf410eb99697ac6e416b1db9c10fa92ce","modified":1590652273344},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"7a07b854a602cb9c8fa0db80ebd2c9b989f3de22","modified":1590652273359},{"_id":"themes/matery/source/medias/featureimages/27.jpg","hash":"f4d026ea224b9d216357d4b42fbe9f002bcaa2b0","modified":1590652273391},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"4c001e19790f5ac73259138ad1713338ea34c664","modified":1590652273391},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"4cedcb5a87fa5fbc1f343c9180d4e52bb4331220","modified":1590652273406},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1590652273219},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1590652273281},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1590652273313},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"f515cb01de6d2b1981f50f0487e9b5beb99baf43","modified":1590652273344},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"c04a6292dc85cc47a9ec370e1bee81e0e7e65652","modified":1590652273375},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"43d1db28c3f3f953c5fd399fd959f6e92ee88fe7","modified":1590652273375},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"8cc1c127ca8ff09d4a07f5c3b845ef2340a1106f","modified":1590652273375},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"cd3fc47d2042a3277e4b375ad084365abdc28f5d","modified":1590652273313},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"c2980f75f2c047d0957e3c8227b3f8d84e67f752","modified":1590652273328},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"5c494c93ad30b8f71c7865b42b3cf613279a914e","modified":1590652273328},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"39a1cb44e4ab3006577fefcbeecaddd1a2f62cfa","modified":1590652273328},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"f46e3860fbcbb63cd76023d91b7a4715e27fb231","modified":1590652273391},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"1829b3464d5715136d3feec2849c7716541e83ed","modified":1590652273406},{"_id":"themes/matery/source/medias/music/avatars/daoshu.jpg","hash":"eee120fdf5ccbe86aa7d51826c4c773e76e6357f","modified":1590652273406},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"33004c3f9c57f834f33d278db430e48dc3b14bd6","modified":1590652273313},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1590652273219},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1590652273234},{"_id":"public/baidusitemap.xml","hash":"0e79f4c5a8fbb8e1c508e4771a92a1d57457a70b","modified":1590714026564},{"_id":"public/atom.xml","hash":"56ecf4b9188dc05803e7c2f2df434c23fb6a50a1","modified":1590714026566},{"_id":"public/search.xml","hash":"bccd77c8771923fd6468072ff2afc5485d6606b3","modified":1590714027507},{"_id":"public/sitemap.xml","hash":"93e4526d37f7322b2c27f43a960799d5caff5fb4","modified":1590714027701},{"_id":"public/archives/index.html","hash":"b4884bbe41a9a885c19cd1f98955d48adc6cb155","modified":1590714027729},{"_id":"public/404.html","hash":"4bacd1558b808ed832bc9281f992e76725dbee8c","modified":1590714027729},{"_id":"public/about/index.html","hash":"71e5905597957bb2446409f1dd033141527088f2","modified":1590714027729},{"_id":"public/categories/index.html","hash":"d0043d24378624dc1e0221668b51518a71c7e2e8","modified":1590714027730},{"_id":"public/friends/index.html","hash":"885688a2971cf372f87a5ba950f44dcd1efd8cfe","modified":1590714027730},{"_id":"public/contact/index.html","hash":"d022e5715cbdfab113c14332938e1bdbd3f3441f","modified":1590714027730},{"_id":"public/tags/index.html","hash":"7d8846e8b8e4e23c1c4aa6013276fc5b4149eeed","modified":1590714027730},{"_id":"public/2020/03/28/cong-ling-da-jian-qian-duan-zu-jian-ku/index.html","hash":"68ab2f37cb33e1162ceb69e7112f77e82f50b2d0","modified":1590714027730},{"_id":"public/2019/12/30/nian-mo-zong-jie/index.html","hash":"b1494ae4162ab7927f1c611ecb4369797da484ad","modified":1590714027730},{"_id":"public/2019/12/17/mian-shi-zhi-lu/index.html","hash":"e11b47b9b58d1bbeca885a96940d6915ea2fef08","modified":1590714027730},{"_id":"public/2019/11/22/react-native-ru-keng-zhi-lu/index.html","hash":"b5ccfd2526c986fde38ea02eb921c2787b303fb6","modified":1590714027730},{"_id":"public/2019/11/06/react-zong-jie/index.html","hash":"c9981563e138aa60b18d838ec9d06bc168467438","modified":1590714027731},{"_id":"public/2019/11/06/react-native-da-jian-xiao-bai-jiao-cheng/index.html","hash":"e01473901ba70de08bef5dde46e765052cdfce1c","modified":1590714027731},{"_id":"public/2019/11/06/react-native-da-jian-jiao-cheng/index.html","hash":"d27a954dea0008beda1fb71e459c6f5449ff90cb","modified":1590714027731},{"_id":"public/2019/10/24/vue-zhong-shi-yong-echarts-pei-he-canvas-hui-zhi-tu-li/index.html","hash":"79d1a8860ee8fef2aff37d95b5846a1be549df89","modified":1590714027731},{"_id":"public/2019/10/18/node.js-da-jian-ben-di-fu-wu-mo-ni-shu-ju/index.html","hash":"db2be533753df2706664e9f7383b7cab64fddd56","modified":1590714027731},{"_id":"public/2019/10/17/vue-xiang-mu-chang-yong-fang-fa-zong-jie/index.html","hash":"a32f22165150e57dd57fda6f500f14e16a7e3b42","modified":1590714027731},{"_id":"public/2019/10/17/echars-zai-vue-zhong-ru-he-shi-yong/index.html","hash":"fcf567776cd36ae1fca6dcafd23a25f93fe27f86","modified":1590714027731},{"_id":"public/2019/10/16/ts-vue-xiang-mu-da-jian/index.html","hash":"fb46c4a7db3d18969942126ac7e0393a6a9d2523","modified":1590714027731},{"_id":"public/2019/10/15/ts-xue-xi-zong-jie/index.html","hash":"1ded2b7e4a6738d897a340b0533b6f37809f31a7","modified":1590714027731},{"_id":"public/2019/09/22/26-ge-chang-yong-yi-wang-css-xiao-ji-qiao/index.html","hash":"8185888ddb4f19970d3e9db976f41defe229967a","modified":1590714027731},{"_id":"public/2019/09/22/javascript-shu-zu-qu-chong/index.html","hash":"6462f05509deaa7e4844fc955237ef3ad957d694","modified":1590714027732},{"_id":"public/2019/09/22/cong-0-da-jian-zi-ji-de-webpack-kai-fa-huan-jing/index.html","hash":"5cbc47fae0dd9c5229f481deef35fa062684286c","modified":1590714027732},{"_id":"public/2019/08/20/vue-element-chuan-suo-kuang/index.html","hash":"5396b299b8dfccd5522092fd7ff06f3c88e7375b","modified":1590714027732},{"_id":"public/2019/07/22/echars-zhong-chang-yong-fang-fa/index.html","hash":"0f223f8b09052f75ca265732fc0a1346b25fa58e","modified":1590714027732},{"_id":"public/2019/01/22/js-chang-yong-fang-fa/index.html","hash":"c8925dacaa609e08fdfd19ce52a6ce37af9b8e7a","modified":1590714027732},{"_id":"public/2019/01/22/js-chang-yong-shu-zu-cao-zuo-fang-fa/index.html","hash":"e697bdf654efa23048eade5f4f6ef2acaa48a1ec","modified":1590714027732},{"_id":"public/2018/04/22/gis-ji-ben-shi-yong/index.html","hash":"d3caa2b7b334ae68dc375f25294f069de5a4b00d","modified":1590714027732},{"_id":"public/2018/04/22/node-da-jian/index.html","hash":"653fdb74ed0b82bc4d3d61b5032bbae39dec3302","modified":1590714027732},{"_id":"public/2018/01/22/self-checking/index.html","hash":"42e68eb6cf82cf19d8158f1cd3bb353d02ae9398","modified":1590714027732},{"_id":"public/2018/01/22/ti-gao-gong-zuo-xiao-lu-de-chang-yong-js-han-shu-hui-zong/index.html","hash":"c65cf258c57964b56e42c66d130946a110e90f10","modified":1590714027732},{"_id":"public/archives/page/2/index.html","hash":"efaf09195ebb1d886bdc8a45febcede9477a9cfc","modified":1590714027733},{"_id":"public/archives/2018/index.html","hash":"bb6c7bbd8228f3d3cae326ed3f9b75cbeae259ca","modified":1590714027733},{"_id":"public/archives/2018/01/index.html","hash":"b32b5a63ae81e8ad34c08b0511eb6e6ab4273d82","modified":1590714027733},{"_id":"public/archives/2018/04/index.html","hash":"7deec902651d7db56e47cf0f7baf2ae648765e3c","modified":1590714027733},{"_id":"public/archives/2019/index.html","hash":"1c9a7ed525d4e4db1865355f0820b6b6ed83c731","modified":1590714027733},{"_id":"public/archives/2019/page/2/index.html","hash":"d83279c74fc1cc420193147f4bbb379b48f5c943","modified":1590714027733},{"_id":"public/archives/2019/01/index.html","hash":"09672bbdecf5d32f84e1cb9d659d62778160e98c","modified":1590714027733},{"_id":"public/archives/2019/07/index.html","hash":"aa53ff669c817d1593cd35f2f7be09b1a8981d26","modified":1590714027733},{"_id":"public/archives/2019/08/index.html","hash":"9721ef441546e4389f4b76f72f29c40e774751a3","modified":1590714027733},{"_id":"public/archives/2019/09/index.html","hash":"137bf3879b905349be4337caa772cf8e4def1462","modified":1590714027733},{"_id":"public/archives/2019/10/index.html","hash":"a4f5d462e72a137cae4b95307e056ea5734775b5","modified":1590714027733},{"_id":"public/archives/2019/11/index.html","hash":"4f2bacdacc981f2c40ac54b00d554137e9a25a4d","modified":1590714027733},{"_id":"public/archives/2019/12/index.html","hash":"0e12195d35d0bf65a2bc057ed72f390180ae6567","modified":1590714027734},{"_id":"public/archives/2020/index.html","hash":"086a5b2b62e1a056364f431cced2dfc8222100f3","modified":1590714027734},{"_id":"public/archives/2020/03/index.html","hash":"4060dcff4fd0d0934912dc8d2d212a7d7bd3a62e","modified":1590714027734},{"_id":"public/categories/方法/index.html","hash":"bc33b178e21e7ef9573f6a54f494de35814fcc28","modified":1590714027734},{"_id":"public/categories/Vue/index.html","hash":"0fc30083a1a885eda0a4dcfe0ced2773deca2647","modified":1590714027734},{"_id":"public/categories/开发环境/index.html","hash":"921681c000fb9bd7a06d70920c5917eacfa18fcf","modified":1590714027734},{"_id":"public/categories/RN/index.html","hash":"3533faaca38c2de09a80ca9e2bfcbd71bba04eee","modified":1590714027734},{"_id":"public/categories/React/index.html","hash":"8b5787ff8c598b5313ebb05d0e8a54c1cb45f253","modified":1590714027734},{"_id":"public/categories/随笔/index.html","hash":"e049ecdf2005df1aa4b7151d54a97bb1e17b008b","modified":1590714027734},{"_id":"public/categories/TS/index.html","hash":"a01a360d21857813e8f91467ae9ddf9f67523472","modified":1590714027734},{"_id":"public/categories/技术/index.html","hash":"1f585e99a24e0f4f16d7f2bef7a3700c74b0ee44","modified":1590714027734},{"_id":"public/categories/总结/index.html","hash":"0f9b31d5106e6642d0d4b69b85661c7edf3e701e","modified":1590714027734},{"_id":"public/categories/面试/index.html","hash":"6ed5d42c02de108dcd6cf83cf5352a1639dc39a6","modified":1590714027735},{"_id":"public/index.html","hash":"024b430d78050629b6ee6526bb62d5df09ba8dc3","modified":1590714027735},{"_id":"public/page/2/index.html","hash":"c90c8c6776946c261d0fd6b0cf56f654b43ea9dd","modified":1590714027735},{"_id":"public/tags/方法/index.html","hash":"d3da3b38edd90cd3411c023f5d9df6abe7b8977a","modified":1590714027735},{"_id":"public/tags/Vue/index.html","hash":"6681e9c3dc6ff558b7d6cbc0a4378b8085b54987","modified":1590714027735},{"_id":"public/tags/开发环境/index.html","hash":"db4f05d91b5b3bc2ce53155e2981eae6be64154e","modified":1590714027735},{"_id":"public/tags/RN/index.html","hash":"18f8f58c0d6e312bbd6753fc59d6f23f6acfdcff","modified":1590714027735},{"_id":"public/tags/React/index.html","hash":"9d5d13e2584f31d121c770f8deb21778b8c5322d","modified":1590714027735},{"_id":"public/tags/随笔/index.html","hash":"8c47e7cfaafc86e8654da554748a392e3348a40c","modified":1590714027735},{"_id":"public/tags/TS/index.html","hash":"2135962c28c07dc270eabc3418e7b64caee2bb88","modified":1590714027735},{"_id":"public/tags/技术/index.html","hash":"924806d89daffb292ccd86af6eee5cd4c0918d76","modified":1590714027735},{"_id":"public/tags/总结/index.html","hash":"5e41438efdd34df42f35d9248bcef6b8bbd046e0","modified":1590714027735},{"_id":"public/tags/面试/index.html","hash":"cc296a4a5266e8596e423cbc9180907977ccd078","modified":1590714027735},{"_id":"public/CNAME","hash":"a70c4ab45be1e1492d05804c22e690df372e4dbe","modified":1590714027790},{"_id":"public/favicon.png","hash":"86cd709f59da269184b03cb57d76c8e6b1e91d1c","modified":1590714027790},{"_id":"public/favicon1.png","hash":"6850c3643f81caf79c8be7c454a501f0d3962e14","modified":1590714027790},{"_id":"public/medias/logo.png","hash":"245bf683033c88588e6b0e74bde5398866731652","modified":1590714027790},{"_id":"public/medias/avatars/avatar.jpg","hash":"86cd709f59da269184b03cb57d76c8e6b1e91d1c","modified":1590714027790},{"_id":"public/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1590714027790},{"_id":"public/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1590714027791},{"_id":"public/medias/avatars/avatar2.jpg","hash":"6850c3643f81caf79c8be7c454a501f0d3962e14","modified":1590714027791},{"_id":"public/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1590714027791},{"_id":"public/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1590714027791},{"_id":"public/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1590714027791},{"_id":"public/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1590714027791},{"_id":"public/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1590714027791},{"_id":"public/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1590714027791},{"_id":"public/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1590714027791},{"_id":"public/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1590714027791},{"_id":"public/medias/avatars/liyangzone.jpg","hash":"febab557e4c0d859ab4cc14b57d8106f5e3fccfb","modified":1590714027791},{"_id":"public/medias/banner/5.jpg","hash":"faff164ef3017ea7afb1e143b909dbc4f6436ad4","modified":1590714027791},{"_id":"public/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1590714027791},{"_id":"public/medias/banner/6.jpg","hash":"aeff0bb61e179870afd22ccf22b9ddb3612964bf","modified":1590714027791},{"_id":"public/medias/reward/alipay.jpg","hash":"8ff22abe9118f8de71179c979d02ab835ca64f64","modified":1590714027792},{"_id":"public/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1590714027792},{"_id":"public/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1590714027792},{"_id":"public/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1590714027792},{"_id":"public/medias/avatars/myzhihu.png","hash":"245bf683033c88588e6b0e74bde5398866731652","modified":1590714027792},{"_id":"public/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1590714027792},{"_id":"public/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1590714027792},{"_id":"public/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1590714027792},{"_id":"public/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1590714027792},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1590714027792},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1590714027792},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1590714027792},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1590714027792},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1590714027793},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1590714027793},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1590714027793},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1590714027793},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1590714027793},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1590714027793},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1590714027793},{"_id":"public/medias/music/avatars/xs.jpg","hash":"070337d5347aa6fdd96364eb519523ac0617d208","modified":1590714027793},{"_id":"public/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1590714027793},{"_id":"public/medias/music/avatars/bc.jpg","hash":"17db9591d35d51426a35fb5a66962dc60642dc93","modified":1590714027793},{"_id":"public/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1590714027793},{"_id":"public/medias/music/avatars/ljj.jpg","hash":"1d2651c03baafde341cd6a35df5603629e73d9e3","modified":1590714027793},{"_id":"public/medias/music/avatars/tiantangdemogui.jpg","hash":"f005578ddb4d3d731838db89a708f39f18d50e60","modified":1590714027793},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1590714027795},{"_id":"public/2018/01/22/self-checking/4.jpg","hash":"3862db359d52b55db3fe1a6339b66d2610770030","modified":1590714027795},{"_id":"public/2019/11/22/react-native-ru-keng-zhi-lu/1.jpg","hash":"311f5de051095e9fa81460b509f8ac176da9539d","modified":1590714027795},{"_id":"public/2019/11/22/react-native-ru-keng-zhi-lu/2.jpg","hash":"9214a0880f1f1021b68d298af09ba22977311d98","modified":1590714027795},{"_id":"public/2019/09/22/javascript-shu-zu-qu-chong/4.jpg","hash":"3862db359d52b55db3fe1a6339b66d2610770030","modified":1590714027795},{"_id":"public/2019/01/22/js-chang-yong-shu-zu-cao-zuo-fang-fa/4.jpg","hash":"3862db359d52b55db3fe1a6339b66d2610770030","modified":1590714027795},{"_id":"public/2019/09/22/cong-0-da-jian-zi-ji-de-webpack-kai-fa-huan-jing/2.jpg","hash":"350aae475735d0c9897ddb2860329c153a75ff16","modified":1590714027795},{"_id":"public/2019/10/15/ts-xue-xi-zong-jie/2.jpg","hash":"dfdf3a9d074f82e8abe5f54a13089766e36b375d","modified":1590714027795},{"_id":"public/2019/10/15/ts-xue-xi-zong-jie/1.jpg","hash":"050f15e5d3250f5b95c46d8813d76d7bb3a39afe","modified":1590714027795},{"_id":"public/2019/10/17/echars-zai-vue-zhong-ru-he-shi-yong/1679c3f7aa381aa7","hash":"f0b4ca8cbfe96ba322cd3ddd1b10b7b0cc6c8418","modified":1590714027796},{"_id":"public/2019/10/15/ts-xue-xi-zong-jie/3.jpg","hash":"18d32ab9c52dfc1b101d27423077b9a139de607a","modified":1590714027796},{"_id":"public/2020/03/28/cong-ling-da-jian-qian-duan-zu-jian-ku/1.png","hash":"77f7709527a8c9a0acaa11750cd8c5440c39c130","modified":1590714027796},{"_id":"public/2019/10/17/echars-zai-vue-zhong-ru-he-shi-yong/5.jpg","hash":"f0b4ca8cbfe96ba322cd3ddd1b10b7b0cc6c8418","modified":1590714027796},{"_id":"public/2020/03/28/cong-ling-da-jian-qian-duan-zu-jian-ku/2.png","hash":"9c6ee7191794bcc3cbad2e47d9599b858cd1b463","modified":1590714027796},{"_id":"public/2020/03/28/cong-ling-da-jian-qian-duan-zu-jian-ku/7.png","hash":"d4edd797ba6466f6ce2eaab65b69b6d4ab16b87d","modified":1590714027796},{"_id":"public/2020/03/28/cong-ling-da-jian-qian-duan-zu-jian-ku/7.webp","hash":"f220f2182c03661a24de3e460b517dba14da22cd","modified":1590714027796},{"_id":"public/2019/11/06/react-zong-jie/2.jpg","hash":"506d1954b08101100e7ed4eaae988e484061e0ce","modified":1590714027796},{"_id":"public/2019/11/06/react-zong-jie/1.jpg","hash":"7dae6637a4feb69de0a17895e2378810e6d526ef","modified":1590714027796},{"_id":"public/2019/11/06/react-zong-jie/4.jpg","hash":"0dfe29a2e55e4cc8e9ab0e46c9d5c0e231df70a6","modified":1590714027796},{"_id":"public/2019/11/06/react-zong-jie/5.jpg","hash":"38ac87639bfe6218c3160b4e321103fc1e9f65dc","modified":1590714027796},{"_id":"public/2019/10/16/ts-vue-xiang-mu-da-jian/1.jpg","hash":"da7a5588fabcb8cae72c3446b92e99061726721f","modified":1590714027796},{"_id":"public/2019/10/16/ts-vue-xiang-mu-da-jian/3.jpg","hash":"e84886e955c248d3f45625a28e749e71846ecc70","modified":1590714027796},{"_id":"public/2019/10/16/ts-vue-xiang-mu-da-jian/4.jpg","hash":"63991d755585b81ae1dd8e6a10ff6a9805be6a06","modified":1590714027797},{"_id":"public/2019/10/16/ts-vue-xiang-mu-da-jian/5.jpg","hash":"8c00e4ca3b3f8bba7a8efbb5ac35998e825f678e","modified":1590714027797},{"_id":"public/2019/10/17/echars-zai-vue-zhong-ru-he-shi-yong/4.jpg","hash":"c5bf0a0ee9e9e35ffe813040e7b58b34b846facb","modified":1590714027797},{"_id":"public/2019/10/16/ts-vue-xiang-mu-da-jian/2.jpg","hash":"1688786d5200829b06ad22677503fc8033669ffd","modified":1590714027797},{"_id":"public/2019/10/18/node.js-da-jian-ben-di-fu-wu-mo-ni-shu-ju/10.jpg","hash":"49f38d38b79b3238e36153b8058e490b67bcb84b","modified":1590714027797},{"_id":"public/2019/10/18/node.js-da-jian-ben-di-fu-wu-mo-ni-shu-ju/6.jpg","hash":"68aa4b1d135b733b5abd9ef58bdb010f240e6355","modified":1590714027797},{"_id":"public/2019/10/18/node.js-da-jian-ben-di-fu-wu-mo-ni-shu-ju/3.jpg","hash":"6b5cb21f0c5f70e1330cbe38998fb80726f5578b","modified":1590714027797},{"_id":"public/2019/10/18/node.js-da-jian-ben-di-fu-wu-mo-ni-shu-ju/66.jpg","hash":"16301d5fa13517208405a56e613fdfb055ec8e36","modified":1590714027797},{"_id":"public/2019/10/18/node.js-da-jian-ben-di-fu-wu-mo-ni-shu-ju/12.jpg","hash":"0c6668c172f5fc7e75a9a2681e6e9d1e0dfecbc6","modified":1590714027797},{"_id":"public/2019/10/18/node.js-da-jian-ben-di-fu-wu-mo-ni-shu-ju/8.jpg","hash":"3e6eddc7f66dc6aa4cbf89b398b627a23a117e74","modified":1590714027797},{"_id":"public/2019/10/18/node.js-da-jian-ben-di-fu-wu-mo-ni-shu-ju/5.jpg","hash":"ce9b4a07bf8ea82e82c1eb0e6ce23abf626c7249","modified":1590714027797},{"_id":"public/2018/04/22/node-da-jian/4.jpg","hash":"3862db359d52b55db3fe1a6339b66d2610770030","modified":1590714027797},{"_id":"public/2018/04/22/node-da-jian/node.jpg","hash":"350aae475735d0c9897ddb2860329c153a75ff16","modified":1590714027798},{"_id":"public/2018/04/22/node-da-jian/javascript 数组去重/4.jpg","hash":"3862db359d52b55db3fe1a6339b66d2610770030","modified":1590714027798},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1590714027798},{"_id":"public/css/prism-line-numbers.css","hash":"e0db113a99e4a09d2161a539b1652d96e4a22fac","modified":1590714027798},{"_id":"public/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1590714027821},{"_id":"public/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1590714027823},{"_id":"public/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1590714027827},{"_id":"public/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1590714027827},{"_id":"public/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1590714027827},{"_id":"public/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1590714027827},{"_id":"public/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1590714027827},{"_id":"public/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1590714027827},{"_id":"public/medias/reward/alipay2.jpg","hash":"b65d93fba9d55d126eb34c8595ef3e18ed14ac47","modified":1590714027827},{"_id":"public/medias/reward/wechat.png","hash":"b65d93fba9d55d126eb34c8595ef3e18ed14ac47","modified":1590714027827},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1590714027827},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1590714027828},{"_id":"public/2019/11/06/react-zong-jie/3.jpg","hash":"f92d17d5a757aef033f5b6efb48af146b6375a1e","modified":1590714027828},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1590714027858},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1590714027859},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1590714027862},{"_id":"public/js/matery.js","hash":"92f07106944f5ef7cd72e84bb3534513d00eebe1","modified":1590714027862},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1590714027862},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1590714027862},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1590714027862},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1590714027862},{"_id":"public/libs/others/explosion.min.js","hash":"417b68e2cf2c6de2119c57626f4412105a8457f5","modified":1590714027862},{"_id":"public/libs/others/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1590714027862},{"_id":"public/libs/others/snow.js","hash":"7f3b1ad2f64d4473210a2c3218893649c73c980e","modified":1590714027863},{"_id":"public/libs/others/text.js","hash":"1791782cde0d1e4197f2ed58ecb7dd6aefddd169","modified":1590714027863},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1590714027863},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1590714027863},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1590714027863},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1590714027863},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1590714027863},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1590714027863},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1590714027863},{"_id":"public/css/matery.css","hash":"882a37df6895ba3b0898381bcc2afc2693f6bdb1","modified":1590714027863},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1590714027864},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1590714027864},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1590714027864},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1590714027864},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1590714027864},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1590714027865},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1590714027865},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1590714027865},{"_id":"public/libs/valine/Valine.min.js","hash":"4e34802ccbb59f1daa58a62241ff57f923e50600","modified":1590714027865},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1590714027865},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1590714027865},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1590714027865},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"28bdb33c9eb609c2f30d431df1a4cf8ca70bf841","modified":1590714027866},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1590714027866},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1590714027867},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1590714027867},{"_id":"public/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1590714027867},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1590714027867},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1590714027867},{"_id":"public/libs/materialize/materialize.min.css","hash":"4d46df5f22cbc24eefa76228c7ee308dc3585594","modified":1590714027868},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1590714027868},{"_id":"public/medias/featureimages/16.jpg","hash":"0d8315876e8285abec48ce71797a14734fdc980c","modified":1590714027868},{"_id":"public/medias/featureimages/17.jpg","hash":"5f27406bd8661bef44291601edc2784b5af63c23","modified":1590714027869},{"_id":"public/medias/featureimages/2.jpg","hash":"c86ede693175156922041c5cdb31b9f1432a0e8a","modified":1590714027869},{"_id":"public/medias/featureimages/6.jpg","hash":"7bdf83e0822794a7294fe554c5d21edda1e0c28f","modified":1590714027870},{"_id":"public/medias/avatars/0xbird.png","hash":"f9d597dfcb49e1e2be06138b24028291f5638610","modified":1590714027870},{"_id":"public/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1590714027870},{"_id":"public/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1590714027871},{"_id":"public/medias/banner/7.jpg","hash":"0f55a4a1e7ee8e168720cc8b8ed7a7f1027e89e6","modified":1590714027872},{"_id":"public/medias/avatars/mashiro.jpg","hash":"250e911c16eeb6acb1e6214ad3e6a3d762850a8e","modified":1590714027872},{"_id":"public/medias/banner/4.jpg","hash":"243022cf6d56a0fc366e988bb01e0d88da5420d7","modified":1590714027872},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1590714027873},{"_id":"public/2018/01/22/self-checking/01.jpg","hash":"131a64dcd50bb146771092d049e4e363871eb1c8","modified":1590714027873},{"_id":"public/2019/09/22/javascript-shu-zu-qu-chong/01.jpg","hash":"131a64dcd50bb146771092d049e4e363871eb1c8","modified":1590714027873},{"_id":"public/2019/01/22/js-chang-yong-shu-zu-cao-zuo-fang-fa/01.jpg","hash":"131a64dcd50bb146771092d049e4e363871eb1c8","modified":1590714027873},{"_id":"public/2019/09/22/cong-0-da-jian-zi-ji-de-webpack-kai-fa-huan-jing/01.jpg","hash":"131a64dcd50bb146771092d049e4e363871eb1c8","modified":1590714027873},{"_id":"public/2018/04/22/node-da-jian/01.jpg","hash":"131a64dcd50bb146771092d049e4e363871eb1c8","modified":1590714027873},{"_id":"public/2018/04/22/node-da-jian/javascript 数组去重/01.jpg","hash":"131a64dcd50bb146771092d049e4e363871eb1c8","modified":1590714027874},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1590714027924},{"_id":"public/medias/avatars/lzh.png","hash":"8ffcbf19d6b38b891dbe408d9a4e9513b56f247e","modified":1590714027925},{"_id":"public/medias/featureimages/20.jpg","hash":"6dcacca5f1d93dec5c12cab74516e415243c0a64","modified":1590714027925},{"_id":"public/medias/featureimages/25.jpg","hash":"35a945ed6f2f8a0d055f9da6e90b974b7f30c5b0","modified":1590714027925},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1590714027925},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1590714027926},{"_id":"public/2019/07/22/echars-zhong-chang-yong-fang-fa/1.jpg","hash":"601a73356546950fb8e4838347f677fcf60250e9","modified":1590714027926},{"_id":"public/medias/featureimages/26.jpg","hash":"7e6241a0793404fb3668b1030795e5031e0f1ba7","modified":1590714027944},{"_id":"public/medias/featureimages/1.jpg","hash":"e177d97cfbb0071d2ac15e99d15666cf09d5eacb","modified":1590714027944},{"_id":"public/medias/music/avatars/daoshu.jpg","hash":"eee120fdf5ccbe86aa7d51826c4c773e76e6357f","modified":1590714027944},{"_id":"public/2019/07/22/echars-zhong-chang-yong-fang-fa/2.jpg","hash":"bbd049a42bd08746578054101b4237022a4a914f","modified":1590714027945},{"_id":"public/medias/featureimages/15.jpg","hash":"18cc714b6693d0336c1bbaef47ed79cc8a1d95e7","modified":1590714027951},{"_id":"public/medias/featureimages/18.jpg","hash":"5efc3856cd2da8863e9c808005c3724c09843c3c","modified":1590714027951},{"_id":"public/medias/featureimages/24.jpg","hash":"6339e06736ff6618d97cca389d7887439c87415a","modified":1590714027952},{"_id":"public/medias/featureimages/13.jpg","hash":"575cb26b73b220a3fea685108812466fb8b68e62","modified":1590714027953},{"_id":"public/medias/featureimages/10.jpg","hash":"44d047bc0d29d6ae3e1d65b6cb95143d0d1b6ec2","modified":1590714027954},{"_id":"public/medias/featureimages/12.jpg","hash":"c72b487cf410eb99697ac6e416b1db9c10fa92ce","modified":1590714027954},{"_id":"public/medias/featureimages/8.jpg","hash":"4cedcb5a87fa5fbc1f343c9180d4e52bb4331220","modified":1590714027955},{"_id":"public/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1590714027956},{"_id":"public/medias/featureimages/14.jpg","hash":"f515cb01de6d2b1981f50f0487e9b5beb99baf43","modified":1590714027957},{"_id":"public/medias/featureimages/22.jpg","hash":"43d1db28c3f3f953c5fd399fd959f6e92ee88fe7","modified":1590714027957},{"_id":"public/medias/featureimages/21.jpg","hash":"c04a6292dc85cc47a9ec370e1bee81e0e7e65652","modified":1590714027958},{"_id":"public/medias/banner/1.jpg","hash":"cd3fc47d2042a3277e4b375ad084365abdc28f5d","modified":1590714027958},{"_id":"public/medias/featureimages/7.jpg","hash":"d41c54ff1c41f5bfd4ccf5af303229059577c351","modified":1590714027982},{"_id":"public/medias/featureimages/19.jpg","hash":"7a07b854a602cb9c8fa0db80ebd2c9b989f3de22","modified":1590714027982},{"_id":"public/medias/featureimages/27.jpg","hash":"f4d026ea224b9d216357d4b42fbe9f002bcaa2b0","modified":1590714027982},{"_id":"public/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1590714027983},{"_id":"public/medias/featureimages/23.jpg","hash":"8cc1c127ca8ff09d4a07f5c3b845ef2340a1106f","modified":1590714027984},{"_id":"public/medias/banner/2.jpg","hash":"c2980f75f2c047d0957e3c8227b3f8d84e67f752","modified":1590714027985},{"_id":"public/medias/featureimages/0.jpg","hash":"39a1cb44e4ab3006577fefcbeecaddd1a2f62cfa","modified":1590714027985},{"_id":"public/medias/featureimages/4.jpg","hash":"f46e3860fbcbb63cd76023d91b7a4715e27fb231","modified":1590714027987},{"_id":"public/medias/featureimages/5.jpg","hash":"4c001e19790f5ac73259138ad1713338ea34c664","modified":1590714028197},{"_id":"public/medias/banner/3.jpg","hash":"5c494c93ad30b8f71c7865b42b3cf613279a914e","modified":1590714028197},{"_id":"public/medias/featureimages/9.jpg","hash":"1829b3464d5715136d3feec2849c7716541e83ed","modified":1590714028198},{"_id":"public/medias/featureimages/3.jpg","hash":"447bf84c1d9bd71491545922c8735b5b41e2121f","modified":1590714028307},{"_id":"public/medias/featureimages/11.jpg","hash":"3fa19adaa3c19d58e34be573f1c3233c9b57b242","modified":1590714028307},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1590714028307},{"_id":"public/medias/banner/0.jpg","hash":"33004c3f9c57f834f33d278db430e48dc3b14bd6","modified":1590714028652}],"Category":[{"name":"方法","_id":"ckari24wr00055sjod6iueq07"},{"name":"Vue","_id":"ckari24xb000d5sjorlsxz8zz"},{"name":"开发环境","_id":"ckari24xl000k5sjowdbi3ws1"},{"name":"RN","_id":"ckari24yo001a5sjo4ie1su86"},{"name":"React","_id":"ckari24yv001j5sjouky6adr6"},{"name":"随笔","_id":"ckari24z7001s5sjohks13b7k"},{"name":"TS","_id":"ckari24ze00205sjof4i411cr"},{"name":"技术","_id":"ckari24zt002f5sjo2hhhiv9u"},{"name":"总结","_id":"ckari24zw002m5sjokqoy5to5"},{"name":"面试","_id":"ckari2500002s5sjol618s2ix"}],"Data":[{"_id":"musics","data":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}]},{"_id":"friends","data":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}],"Page":[{"title":"404","date":"2019-07-19T08:41:10.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n","updated":"2020-05-28T07:51:13.063Z","path":"404.html","comments":1,"_id":"ckari24te00005sjox9s9yk8i","content":"","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":""},{"title":"archives","date":"2019-07-19T08:39:20.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-07-19 16:39:20\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2020-05-28T07:51:13.156Z","path":"archives/index.html","comments":1,"_id":"ckari24wf00015sjobsv182k5","content":"","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":""},{"title":"about","date":"2019-07-19T08:41:10.000Z","type":"about","layout":"about","_content":"\n\n<!-- # 教育经历\n* <b>硕士 计算机科学与技术</b>\n华东师范大学\n2018/06 - 现在\n* <b>本科 计算机科学与技术</b>\n华东师范大学\n2014/09 - 2018/06\n<b>综合排名专业第一</b>\n\n# 获得荣誉\n### 2017\n* <b>金牌</b>\nACM-ICPC全国邀请赛（陕西）\n* <b>特等奖学金</b>\n大三学年\n* <b>二等奖</b>\n蓝桥杯C++组（上海）\n* <b>团体一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n* <b>高校一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n\n### 2016\n* <b>银牌</b>\nACM-ICPC亚洲区域赛（青岛）\n* <b>铜牌</b>\nACM-CCPC总决赛（宁波）\n* <b>铜牌</b>\nACM-CCPC（杭州）\n* <b>一等奖学金</b>\n大二学年\n\n### 2015\n* <b>国家奖学金</b>\n大一学年\n* <b>铜牌</b>\nACM-ICPC亚洲区域赛（上海）\n* <b>铜牌</b>\nACM-ICPC上海大都会赛\n\n# 联系方式\n* <b>电子邮箱</b>\ni@godweiyang.com\n792321264@qq.com\n* <b>地址</b>\n上海市普陀区中山北路3663号理科大楼B906，邮编200062\n* <b>微信</b>\nty632271304\n* <b>QQ</b>\n792321264 -->","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-07-19 16:41:10\ntype: \"about\"\nlayout: \"about\"\n---\n\n\n<!-- # 教育经历\n* <b>硕士 计算机科学与技术</b>\n华东师范大学\n2018/06 - 现在\n* <b>本科 计算机科学与技术</b>\n华东师范大学\n2014/09 - 2018/06\n<b>综合排名专业第一</b>\n\n# 获得荣誉\n### 2017\n* <b>金牌</b>\nACM-ICPC全国邀请赛（陕西）\n* <b>特等奖学金</b>\n大三学年\n* <b>二等奖</b>\n蓝桥杯C++组（上海）\n* <b>团体一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n* <b>高校一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n\n### 2016\n* <b>银牌</b>\nACM-ICPC亚洲区域赛（青岛）\n* <b>铜牌</b>\nACM-CCPC总决赛（宁波）\n* <b>铜牌</b>\nACM-CCPC（杭州）\n* <b>一等奖学金</b>\n大二学年\n\n### 2015\n* <b>国家奖学金</b>\n大一学年\n* <b>铜牌</b>\nACM-ICPC亚洲区域赛（上海）\n* <b>铜牌</b>\nACM-ICPC上海大都会赛\n\n# 联系方式\n* <b>电子邮箱</b>\ni@godweiyang.com\n792321264@qq.com\n* <b>地址</b>\n上海市普陀区中山北路3663号理科大楼B906，邮编200062\n* <b>微信</b>\nty632271304\n* <b>QQ</b>\n792321264 -->","updated":"2020-05-28T07:51:13.156Z","path":"about/index.html","comments":1,"_id":"ckari24wn00035sjoozgeloxf","content":"<!-- # 教育经历\n* <b>硕士 计算机科学与技术</b>\n华东师范大学\n2018/06 - 现在\n* <b>本科 计算机科学与技术</b>\n华东师范大学\n2014/09 - 2018/06\n<b>综合排名专业第一</b>\n\n# 获得荣誉\n### 2017\n* <b>金牌</b>\nACM-ICPC全国邀请赛（陕西）\n* <b>特等奖学金</b>\n大三学年\n* <b>二等奖</b>\n蓝桥杯C++组（上海）\n* <b>团体一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n* <b>高校一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n\n### 2016\n* <b>银牌</b>\nACM-ICPC亚洲区域赛（青岛）\n* <b>铜牌</b>\nACM-CCPC总决赛（宁波）\n* <b>铜牌</b>\nACM-CCPC（杭州）\n* <b>一等奖学金</b>\n大二学年\n\n### 2015\n* <b>国家奖学金</b>\n大一学年\n* <b>铜牌</b>\nACM-ICPC亚洲区域赛（上海）\n* <b>铜牌</b>\nACM-ICPC上海大都会赛\n\n# 联系方式\n* <b>电子邮箱</b>\ni@godweiyang.com\n792321264@qq.com\n* <b>地址</b>\n上海市普陀区中山北路3663号理科大楼B906，邮编200062\n* <b>微信</b>\nty632271304\n* <b>QQ</b>\n792321264 -->","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<!-- # 教育经历\n* <b>硕士 计算机科学与技术</b>\n华东师范大学\n2018/06 - 现在\n* <b>本科 计算机科学与技术</b>\n华东师范大学\n2014/09 - 2018/06\n<b>综合排名专业第一</b>\n\n# 获得荣誉\n### 2017\n* <b>金牌</b>\nACM-ICPC全国邀请赛（陕西）\n* <b>特等奖学金</b>\n大三学年\n* <b>二等奖</b>\n蓝桥杯C++组（上海）\n* <b>团体一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n* <b>高校一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n\n### 2016\n* <b>银牌</b>\nACM-ICPC亚洲区域赛（青岛）\n* <b>铜牌</b>\nACM-CCPC总决赛（宁波）\n* <b>铜牌</b>\nACM-CCPC（杭州）\n* <b>一等奖学金</b>\n大二学年\n\n### 2015\n* <b>国家奖学金</b>\n大一学年\n* <b>铜牌</b>\nACM-ICPC亚洲区域赛（上海）\n* <b>铜牌</b>\nACM-ICPC上海大都会赛\n\n# 联系方式\n* <b>电子邮箱</b>\ni@godweiyang.com\n792321264@qq.com\n* <b>地址</b>\n上海市普陀区中山北路3663号理科大楼B906，邮编200062\n* <b>微信</b>\nty632271304\n* <b>QQ</b>\n792321264 -->"},{"title":"categories","date":"2019-07-19T08:39:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-19 16:39:20\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2020-05-28T07:51:13.156Z","path":"categories/index.html","comments":1,"_id":"ckari24wu00075sjo2n4b21a9","content":"","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":""},{"title":"friends","date":"2019-07-19T08:42:10.000Z","type":"friends","layout":"friends","_content":"\n# 赞赏名单\n感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！\n> \\*子汉\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**linfengdunwu\n* **地址：**https://linfengdunwu.cn\n* **简介：**ECNU NLPer\n","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-07-19 16:42:10\ntype: \"friends\"\nlayout: \"friends\"\n---\n\n# 赞赏名单\n感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！\n> \\*子汉\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**linfengdunwu\n* **地址：**https://linfengdunwu.cn\n* **简介：**ECNU NLPer\n","updated":"2020-05-28T07:51:13.156Z","path":"friends/index.html","comments":1,"_id":"ckari24x300095sjoa23iq96v","content":"<h1 id=\"赞赏名单\"><a href=\"#赞赏名单\" class=\"headerlink\" title=\"赞赏名单\"></a>赞赏名单</h1><p>感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！</p>\n<blockquote>\n<p>*子汉</p>\n</blockquote>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>linfengdunwu</li>\n<li><strong>地址：</strong><a href=\"https://linfengdunwu.cn\" target=\"_blank\" rel=\"noopener\">https://linfengdunwu.cn</a></li>\n<li><strong>简介：</strong>ECNU NLPer</li>\n</ul>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<h1 id=\"赞赏名单\"><a href=\"#赞赏名单\" class=\"headerlink\" title=\"赞赏名单\"></a>赞赏名单</h1><p>感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！</p>\n<blockquote>\n<p>*子汉</p>\n</blockquote>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>linfengdunwu</li>\n<li><strong>地址：</strong><a href=\"https://linfengdunwu.cn\" target=\"_blank\" rel=\"noopener\">https://linfengdunwu.cn</a></li>\n<li><strong>简介：</strong>ECNU NLPer</li>\n</ul>\n"},{"title":"contact","date":"2019-07-26T09:17:02.000Z","type":"contact","layout":"contact","_content":"\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加我联系方式：\n* QQ：**632271304**\n* 微信：**ty632271304**\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n**当然不介意小改改加我哦~~**\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**linfengdunwu\n* **地址：**https://linfengdunwu.cn\n* **简介：**ECNU NLPer\n<!-- * **头像：**https://godweiyang.com/medias/avatars/avatar.jpg -->","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2019-07-26 17:17:02\ntype: \"contact\"\nlayout: \"contact\"\n---\n\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加我联系方式：\n* QQ：**632271304**\n* 微信：**ty632271304**\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n**当然不介意小改改加我哦~~**\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**linfengdunwu\n* **地址：**https://linfengdunwu.cn\n* **简介：**ECNU NLPer\n<!-- * **头像：**https://godweiyang.com/medias/avatars/avatar.jpg -->","updated":"2020-05-28T07:51:13.156Z","path":"contact/index.html","comments":1,"_id":"ckari24x8000b5sjop23cr70y","content":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加我联系方式：</p>\n<ul>\n<li>QQ：<strong>632271304</strong></li>\n<li>微信：<strong>ty632271304</strong></li>\n</ul>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。<br><strong>当然不介意小改改加我哦~~</strong></p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>linfengdunwu</li>\n<li><strong>地址：</strong><a href=\"https://linfengdunwu.cn\" target=\"_blank\" rel=\"noopener\">https://linfengdunwu.cn</a></li>\n<li><strong>简介：</strong>ECNU NLPer<!-- * **头像：**https://godweiyang.com/medias/avatars/avatar.jpg --></li>\n</ul>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加我联系方式：</p>\n<ul>\n<li>QQ：<strong>632271304</strong></li>\n<li>微信：<strong>ty632271304</strong></li>\n</ul>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。<br><strong>当然不介意小改改加我哦~~</strong></p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>linfengdunwu</li>\n<li><strong>地址：</strong><a href=\"https://linfengdunwu.cn\" target=\"_blank\" rel=\"noopener\">https://linfengdunwu.cn</a></li>\n<li><strong>简介：</strong>ECNU NLPer<!-- * **头像：**https://godweiyang.com/medias/avatars/avatar.jpg --></li>\n</ul>\n"},{"title":"tags","date":"2019-07-19T08:40:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-19 16:40:27\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2020-05-28T07:51:13.156Z","path":"tags/index.html","comments":1,"_id":"ckari24xf000g5sjo7vc1vq8c","content":"","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"26个常用易忘CSS小技巧","date":"2019-09-22T05:32:09.000Z","top":false,"cover":false,"password":null,"toc":false,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28854182&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 开篇\n---\n26个常用易忘CSS小技巧\n\n\n收集于平时常用但易忘的CSS实现方法.....\n\n**1.解决inline-block元素设置overflow:hidden属性导致相邻行内元素向下偏移**\n\n    .wrap {\n      display: inline-block;\n      overflow: hidden\n      vertical-align: bottom\n    }\n \n**2.超出部分显示省略号**\n\n    // 单行文本\n    .wrap {\n      overflow:hidden;/*超出部分隐藏*/\n      text-overflow:ellipsis;/*超出部分显示省略号*/\n      white-space:nowrap;/*规定段落中的文本不进行换行 */\n    }\n    // 多行文本\n    .wrap {\n        width: 100%;\n        overflow: hidden;\n        display: -webkit-box;   //将对象作为弹性伸缩盒子模型显示  *必须结合的属性*\n        -webkit-box-orient: vertical;   //设置伸缩盒对象的子元素的排列方式  *必须结合的属性*\n        -webkit-line-clamp: 3;   //用来限制在一个块元素中显示的文本的行数\n        word-break: break-all;   //让浏览器实现在任意位置的换行 *break-all为允许在单词内换行*\n    }\n \n**3.css实现不换行、自动换行、强制换行**\n\n    //不换行\n    .wrap {\n      white-space:nowrap;\n    }\n    //自动换行\n    .wrap {\n      word-wrap: break-word;\n      word-break: normal;\n    }\n    //强制换行\n    .wrap {\n      word-break:break-all;\n    }\n \n**4.CSS实现文本两端对齐**\n\n    .wrap {\n        text-align: justify;\n        text-justify: distribute-all-lines;  //ie6-8\n        text-align-last: justify;  //一个块或行的最后一行对齐方式\n        -moz-text-align-last: justify;\n        -webkit-text-align-last: justify;\n    }\n \n**5.现文字竖向排版**\n\n    // 单列展示时\n    .wrap {\n        width: 25px;\n        line-height: 18px;\n        height: auto;\n        font-size: 12px;\n        padding: 8px 5px;\n        word-wrap: break-word;/*英文的时候需要加上这句，自动换行*/  \n    }\n    // 多列展示时\n    .wrap {\n        height: 210px;\n        line-height: 30px;\n        text-align: justify;\n        writing-mode: vertical-lr;  //从左向右    \n        writing-mode: tb-lr;        //IE从左向右\n        //writing-mode: vertical-rl;  -- 从右向左\n        //writing-mode: tb-rl;        -- 从右向左\n    }\n \n**6.使元素鼠标事件失效**\n\n    .wrap {\n        // 如果按tab能选中该元素，如button，然后按回车还是能执行对应的事件，如click。\n      pointer-events: none;\n        cursor: default;\n    }\n \n**7.禁止用户选择**\n\n    .wrap {\n      -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none;\n    }\n \n**8.cursor属性**\n\n    .wrap {\n      cursor：pointer; //小手指；\n      cursor：help; //箭头加问号；\n      cursor：wait; //转圈圈；\n      cursor：move; //移动光标；\n      cursor：crosshair; //十字光标\n    }\n\n \n**9.使用硬件加速**\n\n    .wrap {\n        transform: translateZ(0);\n    }\n \n**10.图片宽度自适应**\n\n    img {max-width: 100%}\n \n**11.Text-transform和Font Variant**\n\n    p {text-transform: uppercase}  // 将所有字母变成大写字母\n    p {text-transform: lowercase}  // 将所有字母变成小写字母\n    p {text-transform: capitalize} // 首字母大写\n    p {font-variant: small-caps}   // 将字体变成小型的大写字母\n \n**12.将一个容器设为透明**\n\n    .wrap { \n      filter:alpha(opacity=50); \n      -moz-opacity:0.5; \n      -khtml-opacity: 0.5; \n      opacity: 0.5; \n    }\n \n**13.消除transition闪屏**\n\n    .wrap {\n        -webkit-transform-style: preserve-3d;\n        -webkit-backface-visibility: hidden;\n        -webkit-perspective: 1000;\n    }\n \n**14.自定义滚动条**\n\n    overflow-y: scroll;\n    整个滚动条\n    ::-webkit-scrollbar {\n        width: 5px;\n    }\n\n    滚动条的轨道\n    ::-webkit-scrollbar-track {\n        background-color: #ffa336;\n        border-radius: 5px;\n    }\n\n    滚动条的滑块\n    ::-webkit-scorllbar-thumb {\n        background-color: #ffc076;\n        border-radius: 5px;\n    }\n \n**15让 HTML 识别 string 里的 '\\n' 并换行**\n\n    body {\n        white-space: pre-line;\n    }\n    \n**16.实现一个三角形**\n\n    .wrap { \n      border-color: transparent transparent green transparent; \n      border-style: solid; \n      border-width: 0px 300px 300px 300px; \n      height: 0px; \n      width: 0px; \n    }\n \n**17.移除被点链接的边框**\n\n      a {outline: none}\n      a {outline: 0}\n \n**18.使用CSS显示链接之后的URL**\n\n    a:after{content:\" (\" attr(href) \") \";}\n \n**19.select内容居中显示、下拉内容右对齐**\n\n      select{\n          text-align: center;\n          text-align-last: center;\n      }\n      select option {\n          direction: rtl;\n      }\n \n**20.修改input输入框中光标的颜色不改变字体的颜色**\n\n      input{\n          color:  #fff;\n          caret-color: red;\n      }\n \n**21.修改input 输入框中 placeholder 默认字体样式**\n\n      //webkit内核的浏览器 \n      input::-webkit-input-placeholder {\n          color: #c2c6ce;\n      }\n      //Firefox版本4-18 \n      input:-moz-placeholder {\n          color: #c2c6ce;\n      }\n      //Firefox版本19+\n      input::-moz-placeholder {\n          color: #c2c6ce;\n      }\n      //IE浏览器\n      input:-ms-input-placeholder {\n          color: #c2c6ce;\n      }\n \n**22.子元素固定宽度 父元素宽度被撑开**\n\n    // 父元素下的子元素是行内元素\n    .wrap {\n      white-space: nowrap;\n    }\n    // 若父元素下的子元素是块级元素\n    .wrap {\n      white-space: nowrap;  // 子元素不被换行\n      display: inline-block;\n    }\n      \n**23.让div里的图片和文字同时上下居中**\n\n      .wrap {\n        height: 100,\n        line-height: 100\n      }\n      img {\n        vertival-align：middle\n      }\n    \n// vertical-align css的属性vertical-align用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式。只对行内元素、表格单元格元素生效，不能用它垂直对齐块级元素\n// vertical-align：baseline/top/middle/bottom/sub/text-top;\n \n**24.实现宽高等比例自适应矩形**\n\n        .scale {\n            width: 100%;\n            padding-bottom: 56.25%;\n            height: 0;\n            position: relative; \n        }\n\n        .item {\n            position: absolute; \n            width: 100%;\n            height: 100%;\n            background-color: 499e56;\n        }    \n   <div class=\"scale\">\n        <div class=\"item\">\n            这里是所有子元素的容器\n        </div>\n    </div>\n \n**25.transfrom的rotate属性在span标签下失效**\n\n      span {\n        display: inline-block\n      }\n \n**26.边框字体同色**\n\n\t.wrap {\n\t\twidth: 200px;\n\t\theight: 200px;\n\t\tcolor: #000;\n\t\tfont-size: 30px;\n\t\tborder: 50px solid currentColor;\n\t\t// border: 50px solid; // 实现二\n\t}\n\n  **27.实现一个多边形**\n     clip-path: polygon()\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/26个常用易忘CSS小技巧.md","raw":"---\ntitle: 26个常用易忘CSS小技巧\ndate: 2019-09-22 13:32:09\ntop: false\ncover: false\npassword:\ntoc: false\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n- 方法\ncategories:\n- 方法\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28854182&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 开篇\n---\n26个常用易忘CSS小技巧\n\n\n收集于平时常用但易忘的CSS实现方法.....\n\n**1.解决inline-block元素设置overflow:hidden属性导致相邻行内元素向下偏移**\n\n    .wrap {\n      display: inline-block;\n      overflow: hidden\n      vertical-align: bottom\n    }\n \n**2.超出部分显示省略号**\n\n    // 单行文本\n    .wrap {\n      overflow:hidden;/*超出部分隐藏*/\n      text-overflow:ellipsis;/*超出部分显示省略号*/\n      white-space:nowrap;/*规定段落中的文本不进行换行 */\n    }\n    // 多行文本\n    .wrap {\n        width: 100%;\n        overflow: hidden;\n        display: -webkit-box;   //将对象作为弹性伸缩盒子模型显示  *必须结合的属性*\n        -webkit-box-orient: vertical;   //设置伸缩盒对象的子元素的排列方式  *必须结合的属性*\n        -webkit-line-clamp: 3;   //用来限制在一个块元素中显示的文本的行数\n        word-break: break-all;   //让浏览器实现在任意位置的换行 *break-all为允许在单词内换行*\n    }\n \n**3.css实现不换行、自动换行、强制换行**\n\n    //不换行\n    .wrap {\n      white-space:nowrap;\n    }\n    //自动换行\n    .wrap {\n      word-wrap: break-word;\n      word-break: normal;\n    }\n    //强制换行\n    .wrap {\n      word-break:break-all;\n    }\n \n**4.CSS实现文本两端对齐**\n\n    .wrap {\n        text-align: justify;\n        text-justify: distribute-all-lines;  //ie6-8\n        text-align-last: justify;  //一个块或行的最后一行对齐方式\n        -moz-text-align-last: justify;\n        -webkit-text-align-last: justify;\n    }\n \n**5.现文字竖向排版**\n\n    // 单列展示时\n    .wrap {\n        width: 25px;\n        line-height: 18px;\n        height: auto;\n        font-size: 12px;\n        padding: 8px 5px;\n        word-wrap: break-word;/*英文的时候需要加上这句，自动换行*/  \n    }\n    // 多列展示时\n    .wrap {\n        height: 210px;\n        line-height: 30px;\n        text-align: justify;\n        writing-mode: vertical-lr;  //从左向右    \n        writing-mode: tb-lr;        //IE从左向右\n        //writing-mode: vertical-rl;  -- 从右向左\n        //writing-mode: tb-rl;        -- 从右向左\n    }\n \n**6.使元素鼠标事件失效**\n\n    .wrap {\n        // 如果按tab能选中该元素，如button，然后按回车还是能执行对应的事件，如click。\n      pointer-events: none;\n        cursor: default;\n    }\n \n**7.禁止用户选择**\n\n    .wrap {\n      -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none;\n    }\n \n**8.cursor属性**\n\n    .wrap {\n      cursor：pointer; //小手指；\n      cursor：help; //箭头加问号；\n      cursor：wait; //转圈圈；\n      cursor：move; //移动光标；\n      cursor：crosshair; //十字光标\n    }\n\n \n**9.使用硬件加速**\n\n    .wrap {\n        transform: translateZ(0);\n    }\n \n**10.图片宽度自适应**\n\n    img {max-width: 100%}\n \n**11.Text-transform和Font Variant**\n\n    p {text-transform: uppercase}  // 将所有字母变成大写字母\n    p {text-transform: lowercase}  // 将所有字母变成小写字母\n    p {text-transform: capitalize} // 首字母大写\n    p {font-variant: small-caps}   // 将字体变成小型的大写字母\n \n**12.将一个容器设为透明**\n\n    .wrap { \n      filter:alpha(opacity=50); \n      -moz-opacity:0.5; \n      -khtml-opacity: 0.5; \n      opacity: 0.5; \n    }\n \n**13.消除transition闪屏**\n\n    .wrap {\n        -webkit-transform-style: preserve-3d;\n        -webkit-backface-visibility: hidden;\n        -webkit-perspective: 1000;\n    }\n \n**14.自定义滚动条**\n\n    overflow-y: scroll;\n    整个滚动条\n    ::-webkit-scrollbar {\n        width: 5px;\n    }\n\n    滚动条的轨道\n    ::-webkit-scrollbar-track {\n        background-color: #ffa336;\n        border-radius: 5px;\n    }\n\n    滚动条的滑块\n    ::-webkit-scorllbar-thumb {\n        background-color: #ffc076;\n        border-radius: 5px;\n    }\n \n**15让 HTML 识别 string 里的 '\\n' 并换行**\n\n    body {\n        white-space: pre-line;\n    }\n    \n**16.实现一个三角形**\n\n    .wrap { \n      border-color: transparent transparent green transparent; \n      border-style: solid; \n      border-width: 0px 300px 300px 300px; \n      height: 0px; \n      width: 0px; \n    }\n \n**17.移除被点链接的边框**\n\n      a {outline: none}\n      a {outline: 0}\n \n**18.使用CSS显示链接之后的URL**\n\n    a:after{content:\" (\" attr(href) \") \";}\n \n**19.select内容居中显示、下拉内容右对齐**\n\n      select{\n          text-align: center;\n          text-align-last: center;\n      }\n      select option {\n          direction: rtl;\n      }\n \n**20.修改input输入框中光标的颜色不改变字体的颜色**\n\n      input{\n          color:  #fff;\n          caret-color: red;\n      }\n \n**21.修改input 输入框中 placeholder 默认字体样式**\n\n      //webkit内核的浏览器 \n      input::-webkit-input-placeholder {\n          color: #c2c6ce;\n      }\n      //Firefox版本4-18 \n      input:-moz-placeholder {\n          color: #c2c6ce;\n      }\n      //Firefox版本19+\n      input::-moz-placeholder {\n          color: #c2c6ce;\n      }\n      //IE浏览器\n      input:-ms-input-placeholder {\n          color: #c2c6ce;\n      }\n \n**22.子元素固定宽度 父元素宽度被撑开**\n\n    // 父元素下的子元素是行内元素\n    .wrap {\n      white-space: nowrap;\n    }\n    // 若父元素下的子元素是块级元素\n    .wrap {\n      white-space: nowrap;  // 子元素不被换行\n      display: inline-block;\n    }\n      \n**23.让div里的图片和文字同时上下居中**\n\n      .wrap {\n        height: 100,\n        line-height: 100\n      }\n      img {\n        vertival-align：middle\n      }\n    \n// vertical-align css的属性vertical-align用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式。只对行内元素、表格单元格元素生效，不能用它垂直对齐块级元素\n// vertical-align：baseline/top/middle/bottom/sub/text-top;\n \n**24.实现宽高等比例自适应矩形**\n\n        .scale {\n            width: 100%;\n            padding-bottom: 56.25%;\n            height: 0;\n            position: relative; \n        }\n\n        .item {\n            position: absolute; \n            width: 100%;\n            height: 100%;\n            background-color: 499e56;\n        }    \n   <div class=\"scale\">\n        <div class=\"item\">\n            这里是所有子元素的容器\n        </div>\n    </div>\n \n**25.transfrom的rotate属性在span标签下失效**\n\n      span {\n        display: inline-block\n      }\n \n**26.边框字体同色**\n\n\t.wrap {\n\t\twidth: 200px;\n\t\theight: 200px;\n\t\tcolor: #000;\n\t\tfont-size: 30px;\n\t\tborder: 50px solid currentColor;\n\t\t// border: 50px solid; // 实现二\n\t}\n\n  **27.实现一个多边形**\n     clip-path: polygon()\n\n\n\n\n\n\n\n\n\n\n\n","slug":"26个常用易忘CSS小技巧","published":1,"updated":"2020-05-28T08:03:46.974Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckari24wg00025sjo2xqhzli5","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28854182&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h1><hr>\n<p>26个常用易忘CSS小技巧</p>\n<p>收集于平时常用但易忘的CSS实现方法…..</p>\n<p><strong>1.解决inline-block元素设置overflow:hidden属性导致相邻行内元素向下偏移</strong></p>\n<pre><code>.wrap {\n  display: inline-block;\n  overflow: hidden\n  vertical-align: bottom\n}</code></pre><p><strong>2.超出部分显示省略号</strong></p>\n<pre><code>// 单行文本\n.wrap {\n  overflow:hidden;/*超出部分隐藏*/\n  text-overflow:ellipsis;/*超出部分显示省略号*/\n  white-space:nowrap;/*规定段落中的文本不进行换行 */\n}\n// 多行文本\n.wrap {\n    width: 100%;\n    overflow: hidden;\n    display: -webkit-box;   //将对象作为弹性伸缩盒子模型显示  *必须结合的属性*\n    -webkit-box-orient: vertical;   //设置伸缩盒对象的子元素的排列方式  *必须结合的属性*\n    -webkit-line-clamp: 3;   //用来限制在一个块元素中显示的文本的行数\n    word-break: break-all;   //让浏览器实现在任意位置的换行 *break-all为允许在单词内换行*\n}</code></pre><p><strong>3.css实现不换行、自动换行、强制换行</strong></p>\n<pre><code>//不换行\n.wrap {\n  white-space:nowrap;\n}\n//自动换行\n.wrap {\n  word-wrap: break-word;\n  word-break: normal;\n}\n//强制换行\n.wrap {\n  word-break:break-all;\n}</code></pre><p><strong>4.CSS实现文本两端对齐</strong></p>\n<pre><code>.wrap {\n    text-align: justify;\n    text-justify: distribute-all-lines;  //ie6-8\n    text-align-last: justify;  //一个块或行的最后一行对齐方式\n    -moz-text-align-last: justify;\n    -webkit-text-align-last: justify;\n}</code></pre><p><strong>5.现文字竖向排版</strong></p>\n<pre><code>// 单列展示时\n.wrap {\n    width: 25px;\n    line-height: 18px;\n    height: auto;\n    font-size: 12px;\n    padding: 8px 5px;\n    word-wrap: break-word;/*英文的时候需要加上这句，自动换行*/  \n}\n// 多列展示时\n.wrap {\n    height: 210px;\n    line-height: 30px;\n    text-align: justify;\n    writing-mode: vertical-lr;  //从左向右    \n    writing-mode: tb-lr;        //IE从左向右\n    //writing-mode: vertical-rl;  -- 从右向左\n    //writing-mode: tb-rl;        -- 从右向左\n}</code></pre><p><strong>6.使元素鼠标事件失效</strong></p>\n<pre><code>.wrap {\n    // 如果按tab能选中该元素，如button，然后按回车还是能执行对应的事件，如click。\n  pointer-events: none;\n    cursor: default;\n}</code></pre><p><strong>7.禁止用户选择</strong></p>\n<pre><code>.wrap {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}</code></pre><p><strong>8.cursor属性</strong></p>\n<pre><code>.wrap {\n  cursor：pointer; //小手指；\n  cursor：help; //箭头加问号；\n  cursor：wait; //转圈圈；\n  cursor：move; //移动光标；\n  cursor：crosshair; //十字光标\n}</code></pre><p><strong>9.使用硬件加速</strong></p>\n<pre><code>.wrap {\n    transform: translateZ(0);\n}</code></pre><p><strong>10.图片宽度自适应</strong></p>\n<pre><code>img {max-width: 100%}</code></pre><p><strong>11.Text-transform和Font Variant</strong></p>\n<pre><code>p {text-transform: uppercase}  // 将所有字母变成大写字母\np {text-transform: lowercase}  // 将所有字母变成小写字母\np {text-transform: capitalize} // 首字母大写\np {font-variant: small-caps}   // 将字体变成小型的大写字母</code></pre><p><strong>12.将一个容器设为透明</strong></p>\n<pre><code>.wrap { \n  filter:alpha(opacity=50); \n  -moz-opacity:0.5; \n  -khtml-opacity: 0.5; \n  opacity: 0.5; \n}</code></pre><p><strong>13.消除transition闪屏</strong></p>\n<pre><code>.wrap {\n    -webkit-transform-style: preserve-3d;\n    -webkit-backface-visibility: hidden;\n    -webkit-perspective: 1000;\n}</code></pre><p><strong>14.自定义滚动条</strong></p>\n<pre><code>overflow-y: scroll;\n整个滚动条\n::-webkit-scrollbar {\n    width: 5px;\n}\n\n滚动条的轨道\n::-webkit-scrollbar-track {\n    background-color: #ffa336;\n    border-radius: 5px;\n}\n\n滚动条的滑块\n::-webkit-scorllbar-thumb {\n    background-color: #ffc076;\n    border-radius: 5px;\n}</code></pre><p><strong>15让 HTML 识别 string 里的 ‘\\n’ 并换行</strong></p>\n<pre><code>body {\n    white-space: pre-line;\n}</code></pre><p><strong>16.实现一个三角形</strong></p>\n<pre><code>.wrap { \n  border-color: transparent transparent green transparent; \n  border-style: solid; \n  border-width: 0px 300px 300px 300px; \n  height: 0px; \n  width: 0px; \n}</code></pre><p><strong>17.移除被点链接的边框</strong></p>\n<pre><code>  a {outline: none}\n  a {outline: 0}</code></pre><p><strong>18.使用CSS显示链接之后的URL</strong></p>\n<pre><code>a:after{content:&quot; (&quot; attr(href) &quot;) &quot;;}</code></pre><p><strong>19.select内容居中显示、下拉内容右对齐</strong></p>\n<pre><code>  select{\n      text-align: center;\n      text-align-last: center;\n  }\n  select option {\n      direction: rtl;\n  }</code></pre><p><strong>20.修改input输入框中光标的颜色不改变字体的颜色</strong></p>\n<pre><code>  input{\n      color:  #fff;\n      caret-color: red;\n  }</code></pre><p><strong>21.修改input 输入框中 placeholder 默认字体样式</strong></p>\n<pre><code>  //webkit内核的浏览器 \n  input::-webkit-input-placeholder {\n      color: #c2c6ce;\n  }\n  //Firefox版本4-18 \n  input:-moz-placeholder {\n      color: #c2c6ce;\n  }\n  //Firefox版本19+\n  input::-moz-placeholder {\n      color: #c2c6ce;\n  }\n  //IE浏览器\n  input:-ms-input-placeholder {\n      color: #c2c6ce;\n  }</code></pre><p><strong>22.子元素固定宽度 父元素宽度被撑开</strong></p>\n<pre><code>// 父元素下的子元素是行内元素\n.wrap {\n  white-space: nowrap;\n}\n// 若父元素下的子元素是块级元素\n.wrap {\n  white-space: nowrap;  // 子元素不被换行\n  display: inline-block;\n}</code></pre><p><strong>23.让div里的图片和文字同时上下居中</strong></p>\n<pre><code>  .wrap {\n    height: 100,\n    line-height: 100\n  }\n  img {\n    vertival-align：middle\n  }</code></pre><p>// vertical-align css的属性vertical-align用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式。只对行内元素、表格单元格元素生效，不能用它垂直对齐块级元素<br>// vertical-align：baseline/top/middle/bottom/sub/text-top;</p>\n<p><strong>24.实现宽高等比例自适应矩形</strong></p>\n<pre><code>    .scale {\n        width: 100%;\n        padding-bottom: 56.25%;\n        height: 0;\n        position: relative; \n    }\n\n    .item {\n        position: absolute; \n        width: 100%;\n        height: 100%;\n        background-color: 499e56;\n    }    </code></pre>   <div class=\"scale\">\n        <div class=\"item\">\n            这里是所有子元素的容器\n        </div>\n    </div>\n\n<p><strong>25.transfrom的rotate属性在span标签下失效</strong></p>\n<pre><code>  span {\n    display: inline-block\n  }</code></pre><p><strong>26.边框字体同色</strong></p>\n<pre><code>.wrap {\n    width: 200px;\n    height: 200px;\n    color: #000;\n    font-size: 30px;\n    border: 50px solid currentColor;\n    // border: 50px solid; // 实现二\n}</code></pre><p>  <strong>27.实现一个多边形</strong><br>     clip-path: polygon()</p>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28854182&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h1><hr>\n<p>26个常用易忘CSS小技巧</p>\n<p>收集于平时常用但易忘的CSS实现方法…..</p>\n<p><strong>1.解决inline-block元素设置overflow:hidden属性导致相邻行内元素向下偏移</strong></p>\n<pre><code>.wrap {\n  display: inline-block;\n  overflow: hidden\n  vertical-align: bottom\n}</code></pre><p><strong>2.超出部分显示省略号</strong></p>\n<pre><code>// 单行文本\n.wrap {\n  overflow:hidden;/*超出部分隐藏*/\n  text-overflow:ellipsis;/*超出部分显示省略号*/\n  white-space:nowrap;/*规定段落中的文本不进行换行 */\n}\n// 多行文本\n.wrap {\n    width: 100%;\n    overflow: hidden;\n    display: -webkit-box;   //将对象作为弹性伸缩盒子模型显示  *必须结合的属性*\n    -webkit-box-orient: vertical;   //设置伸缩盒对象的子元素的排列方式  *必须结合的属性*\n    -webkit-line-clamp: 3;   //用来限制在一个块元素中显示的文本的行数\n    word-break: break-all;   //让浏览器实现在任意位置的换行 *break-all为允许在单词内换行*\n}</code></pre><p><strong>3.css实现不换行、自动换行、强制换行</strong></p>\n<pre><code>//不换行\n.wrap {\n  white-space:nowrap;\n}\n//自动换行\n.wrap {\n  word-wrap: break-word;\n  word-break: normal;\n}\n//强制换行\n.wrap {\n  word-break:break-all;\n}</code></pre><p><strong>4.CSS实现文本两端对齐</strong></p>\n<pre><code>.wrap {\n    text-align: justify;\n    text-justify: distribute-all-lines;  //ie6-8\n    text-align-last: justify;  //一个块或行的最后一行对齐方式\n    -moz-text-align-last: justify;\n    -webkit-text-align-last: justify;\n}</code></pre><p><strong>5.现文字竖向排版</strong></p>\n<pre><code>// 单列展示时\n.wrap {\n    width: 25px;\n    line-height: 18px;\n    height: auto;\n    font-size: 12px;\n    padding: 8px 5px;\n    word-wrap: break-word;/*英文的时候需要加上这句，自动换行*/  \n}\n// 多列展示时\n.wrap {\n    height: 210px;\n    line-height: 30px;\n    text-align: justify;\n    writing-mode: vertical-lr;  //从左向右    \n    writing-mode: tb-lr;        //IE从左向右\n    //writing-mode: vertical-rl;  -- 从右向左\n    //writing-mode: tb-rl;        -- 从右向左\n}</code></pre><p><strong>6.使元素鼠标事件失效</strong></p>\n<pre><code>.wrap {\n    // 如果按tab能选中该元素，如button，然后按回车还是能执行对应的事件，如click。\n  pointer-events: none;\n    cursor: default;\n}</code></pre><p><strong>7.禁止用户选择</strong></p>\n<pre><code>.wrap {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}</code></pre><p><strong>8.cursor属性</strong></p>\n<pre><code>.wrap {\n  cursor：pointer; //小手指；\n  cursor：help; //箭头加问号；\n  cursor：wait; //转圈圈；\n  cursor：move; //移动光标；\n  cursor：crosshair; //十字光标\n}</code></pre><p><strong>9.使用硬件加速</strong></p>\n<pre><code>.wrap {\n    transform: translateZ(0);\n}</code></pre><p><strong>10.图片宽度自适应</strong></p>\n<pre><code>img {max-width: 100%}</code></pre><p><strong>11.Text-transform和Font Variant</strong></p>\n<pre><code>p {text-transform: uppercase}  // 将所有字母变成大写字母\np {text-transform: lowercase}  // 将所有字母变成小写字母\np {text-transform: capitalize} // 首字母大写\np {font-variant: small-caps}   // 将字体变成小型的大写字母</code></pre><p><strong>12.将一个容器设为透明</strong></p>\n<pre><code>.wrap { \n  filter:alpha(opacity=50); \n  -moz-opacity:0.5; \n  -khtml-opacity: 0.5; \n  opacity: 0.5; \n}</code></pre><p><strong>13.消除transition闪屏</strong></p>\n<pre><code>.wrap {\n    -webkit-transform-style: preserve-3d;\n    -webkit-backface-visibility: hidden;\n    -webkit-perspective: 1000;\n}</code></pre><p><strong>14.自定义滚动条</strong></p>\n<pre><code>overflow-y: scroll;\n整个滚动条\n::-webkit-scrollbar {\n    width: 5px;\n}\n\n滚动条的轨道\n::-webkit-scrollbar-track {\n    background-color: #ffa336;\n    border-radius: 5px;\n}\n\n滚动条的滑块\n::-webkit-scorllbar-thumb {\n    background-color: #ffc076;\n    border-radius: 5px;\n}</code></pre><p><strong>15让 HTML 识别 string 里的 ‘\\n’ 并换行</strong></p>\n<pre><code>body {\n    white-space: pre-line;\n}</code></pre><p><strong>16.实现一个三角形</strong></p>\n<pre><code>.wrap { \n  border-color: transparent transparent green transparent; \n  border-style: solid; \n  border-width: 0px 300px 300px 300px; \n  height: 0px; \n  width: 0px; \n}</code></pre><p><strong>17.移除被点链接的边框</strong></p>\n<pre><code>  a {outline: none}\n  a {outline: 0}</code></pre><p><strong>18.使用CSS显示链接之后的URL</strong></p>\n<pre><code>a:after{content:&quot; (&quot; attr(href) &quot;) &quot;;}</code></pre><p><strong>19.select内容居中显示、下拉内容右对齐</strong></p>\n<pre><code>  select{\n      text-align: center;\n      text-align-last: center;\n  }\n  select option {\n      direction: rtl;\n  }</code></pre><p><strong>20.修改input输入框中光标的颜色不改变字体的颜色</strong></p>\n<pre><code>  input{\n      color:  #fff;\n      caret-color: red;\n  }</code></pre><p><strong>21.修改input 输入框中 placeholder 默认字体样式</strong></p>\n<pre><code>  //webkit内核的浏览器 \n  input::-webkit-input-placeholder {\n      color: #c2c6ce;\n  }\n  //Firefox版本4-18 \n  input:-moz-placeholder {\n      color: #c2c6ce;\n  }\n  //Firefox版本19+\n  input::-moz-placeholder {\n      color: #c2c6ce;\n  }\n  //IE浏览器\n  input:-ms-input-placeholder {\n      color: #c2c6ce;\n  }</code></pre><p><strong>22.子元素固定宽度 父元素宽度被撑开</strong></p>\n<pre><code>// 父元素下的子元素是行内元素\n.wrap {\n  white-space: nowrap;\n}\n// 若父元素下的子元素是块级元素\n.wrap {\n  white-space: nowrap;  // 子元素不被换行\n  display: inline-block;\n}</code></pre><p><strong>23.让div里的图片和文字同时上下居中</strong></p>\n<pre><code>  .wrap {\n    height: 100,\n    line-height: 100\n  }\n  img {\n    vertival-align：middle\n  }</code></pre><p>// vertical-align css的属性vertical-align用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式。只对行内元素、表格单元格元素生效，不能用它垂直对齐块级元素<br>// vertical-align：baseline/top/middle/bottom/sub/text-top;</p>\n<p><strong>24.实现宽高等比例自适应矩形</strong></p>\n<pre><code>    .scale {\n        width: 100%;\n        padding-bottom: 56.25%;\n        height: 0;\n        position: relative; \n    }\n\n    .item {\n        position: absolute; \n        width: 100%;\n        height: 100%;\n        background-color: 499e56;\n    }    </code></pre>   <div class=\"scale\">\n        <div class=\"item\">\n            这里是所有子元素的容器\n        </div>\n    </div>\n\n<p><strong>25.transfrom的rotate属性在span标签下失效</strong></p>\n<pre><code>  span {\n    display: inline-block\n  }</code></pre><p><strong>26.边框字体同色</strong></p>\n<pre><code>.wrap {\n    width: 200px;\n    height: 200px;\n    color: #000;\n    font-size: 30px;\n    border: 50px solid currentColor;\n    // border: 50px solid; // 实现二\n}</code></pre><p>  <strong>27.实现一个多边形</strong><br>     clip-path: polygon()</p>\n"},{"title":"如何在 Vue 项目中使用 Echarts","date":"2019-10-17T01:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n废话不多说，那我们就看看如何在 Vue 的项目中使用 echarts......\n\n# 如何在 Vue 项目中使用 Echarts\n\n---\n\n## 第一种方法 直接引入 Echarts\n\n### 安装 echarts 项目依赖\n\n        npm install echarts --save\n        //或者\n        npm install echarts -S\n\n如果没有科学上网的朋友可以使用国内的淘宝镜像。\n\n        npm install -g cnpm --registry=https://registry.npm.taobao.org\n        cnpm install echarts -S\n\n- 首先我们需要在自己的项目 main.js 中全局引入 Echarts\n\n        import echarts from 'echarts';\n        Vue.prototype.$echarts=echarts;\n\n### 创建图表\n\n        <template>\n        <div id=\"app\">\n          <div id=\"main\" style=\"width: 600px;height:400px;\"></div>\n        </div>\n        </template>\n        export default {\n          name: \"app\",\n          methods: {\n            drawChart() {\n              // 基于准备好的dom，初始化echarts实例\n              let myChart = this.$echarts.init(document.getElementById(\"main\"));\n              // 指定图表的配置项和数据\n              let option = {\n                title: {\n                  text: \"ECharts 入门示例\"\n                },\n                tooltip: {},\n                legend: {\n                  data: [\"销量\"]\n                },\n                xAxis: {\n                  data: [\"衬衫\", \"羊毛衫\", \"雪纺衫\", \"裤子\", \"高跟鞋\", \"袜子\"]\n                },\n                yAxis: {},\n                series: [\n                  {\n                    name: \"销量\",\n                    type: \"bar\",\n                    data: [5, 20, 36, 10, 10, 20]\n                  }\n                ]\n              };\n              // 使用刚指定的配置项和数据显示图表。\n              myChart.setOption(option);\n            }\n          },\n          mounted() {\n            this.drawChart();\n          }\n        };\n        </script>\n\n### 入门实例\n\n  ![](4.jpg)\n\n## 第二种方法 使用 Vue-ECharts 组件\n\n### 安装组件\n\n      npm install vue-echarts -S\n\n### 使用组件\n\n      <template>\n        <div id=\"app\">\n          <v-chart class=\"my-chart\" :options=\"bar\"/>\n        </div>\n      </template>\n      <script>\n      // 在对应组件内引用或者main.js全局引用\n      import ECharts from \"vue-echarts/components/ECharts\";\n      import \"echarts/lib/chart/bar\";`\n      export default {\n        name: \"App\",\n        components: {\n          \"v-chart\": ECharts\n        },\n        data: function() {\n          return {\n            bar: {\n              title: {\n                text: \"ECharts 入门示例\"\n              },\n              tooltip: {},\n              legend: {\n                data: [\"销量\"]\n              },\n              xAxis: {\n                data: [\"衬衫\", \"羊毛衫\", \"雪纺衫\", \"裤子\", \"高跟鞋\", \"袜子\"]\n              },\n              yAxis: {},\n              series: [\n                {\n                  name: \"销量\",\n                  type: \"bar\",\n                  data: [5, 20, 36, 10, 10, 20]\n                }\n              ]\n            }\n          };\n        }\n      };\n      </script>\n      <style>\n      .my-chart {\n        width: 800px;\n        height: 500px;\n      }\n      </style>\n\n### 入门实例\n\n![](1679c3f7aa381aa7)\n\n## 问题\n\n### 问题1：父子组件传值，容易造成点开子组件后，echarts 图不出现\n\n    原因：因此在另一个父组件进行应用的时候，他是首屏就加载，数据不变动。但是当数据变动之后，无法自动的更新图表。由于 mounted 只会在挂载的时候执行一次，因此无法后续进行更新。\n    **解决办法：给父组件加上一个 v-if，使子组件重新渲染**\n\n      <template>\n       <div>\n       <envy-pie :voltage=\"voltage\" v-if=\"flag\">\n       </div>\n      </template>\n        //js部分\n        data () {\n              return {\n                voltage: [],\n                flag: false\n              }\n            },\n            components: {\n              envyPie\n            },\n            methods: {\n              getEnvyContent () {\n                axios.get('../../../static/mock/envy.json').then(this.getEnvyContentSucc)\n              },\n              getEnvyContentSucc (res) {\n                if (res) {\n                  const data = res.data\n                  this.voltage = res.data.capacity_by_voltage\n                  this.flag = true\n                }\n              }\n            },\n            mounted() {\n              this.getEnvyContent()\n            }\n\n### 问题2:自动缩放\n  Echarts 本身是不支持自动缩放的，但是 Echarts 为我们提供了 resize 方法。\n\n        //在**调用方法**中加入下面这行代码\n        window.addEventListener(\"resize\", this.chart.resize);\n\n### 问题3:支持数据自动刷新 \n[原文链接](https://juejin.im/post/5ab220b8f265da237c68ca11)\n\n    因为 Echarts 是数据驱动的，这意味着只要我们重新设置数据，那么图表就会随之重新渲染，这是实现本需求的基础。我们再设想一下，如果想要支持数据的自动刷新，必然需要一个监听器能够实时监听到数据的变化然后告知 Echarts 重新设置数据。所幸 Vue 为我们提供了==watcher==功能，通过它我们可以很方便的实现上述功能\n\n\n      //在Chart.vue中加入watch\n      watch: {    \n        //观察option的变化\n         option: {      \n           handler(newVal, oldVal) {       \n              if (this.chart) {          \n              if (newVal) {            t\n              his.chart.setOption(newVal);          \n              } else {            \n              this.chart.setOption(oldVal);   }      \n              } else {            \n              this.init();   \n              } },      \n              deep: true //对象内部属性的监听，关键。  \n              } \n            }\n\n\n### 问题4:图表太丑怎么破，ECharts神器带你飞！\n[原文链接](https://juejin.im/post/59dcb823f265da432d270f26)\n### 问题5:Echarts x轴文本内容太长的几种解决方案\n[原文链接](https://juejin.im/post/5d255d69f265da1b80206db1)\n### Echars 遇到问题汇总....\n[原文链接](https://www.cnblogs.com/padding1015/p/9936533.html)","source":"_posts/Echars在Vue中如何使用.md","raw":"---\ntitle: 如何在 Vue 项目中使用 Echarts\ndate: 2019-10-17 09:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n  - Vue\ncategories:\n  - Vue\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n废话不多说，那我们就看看如何在 Vue 的项目中使用 echarts......\n\n# 如何在 Vue 项目中使用 Echarts\n\n---\n\n## 第一种方法 直接引入 Echarts\n\n### 安装 echarts 项目依赖\n\n        npm install echarts --save\n        //或者\n        npm install echarts -S\n\n如果没有科学上网的朋友可以使用国内的淘宝镜像。\n\n        npm install -g cnpm --registry=https://registry.npm.taobao.org\n        cnpm install echarts -S\n\n- 首先我们需要在自己的项目 main.js 中全局引入 Echarts\n\n        import echarts from 'echarts';\n        Vue.prototype.$echarts=echarts;\n\n### 创建图表\n\n        <template>\n        <div id=\"app\">\n          <div id=\"main\" style=\"width: 600px;height:400px;\"></div>\n        </div>\n        </template>\n        export default {\n          name: \"app\",\n          methods: {\n            drawChart() {\n              // 基于准备好的dom，初始化echarts实例\n              let myChart = this.$echarts.init(document.getElementById(\"main\"));\n              // 指定图表的配置项和数据\n              let option = {\n                title: {\n                  text: \"ECharts 入门示例\"\n                },\n                tooltip: {},\n                legend: {\n                  data: [\"销量\"]\n                },\n                xAxis: {\n                  data: [\"衬衫\", \"羊毛衫\", \"雪纺衫\", \"裤子\", \"高跟鞋\", \"袜子\"]\n                },\n                yAxis: {},\n                series: [\n                  {\n                    name: \"销量\",\n                    type: \"bar\",\n                    data: [5, 20, 36, 10, 10, 20]\n                  }\n                ]\n              };\n              // 使用刚指定的配置项和数据显示图表。\n              myChart.setOption(option);\n            }\n          },\n          mounted() {\n            this.drawChart();\n          }\n        };\n        </script>\n\n### 入门实例\n\n  ![](4.jpg)\n\n## 第二种方法 使用 Vue-ECharts 组件\n\n### 安装组件\n\n      npm install vue-echarts -S\n\n### 使用组件\n\n      <template>\n        <div id=\"app\">\n          <v-chart class=\"my-chart\" :options=\"bar\"/>\n        </div>\n      </template>\n      <script>\n      // 在对应组件内引用或者main.js全局引用\n      import ECharts from \"vue-echarts/components/ECharts\";\n      import \"echarts/lib/chart/bar\";`\n      export default {\n        name: \"App\",\n        components: {\n          \"v-chart\": ECharts\n        },\n        data: function() {\n          return {\n            bar: {\n              title: {\n                text: \"ECharts 入门示例\"\n              },\n              tooltip: {},\n              legend: {\n                data: [\"销量\"]\n              },\n              xAxis: {\n                data: [\"衬衫\", \"羊毛衫\", \"雪纺衫\", \"裤子\", \"高跟鞋\", \"袜子\"]\n              },\n              yAxis: {},\n              series: [\n                {\n                  name: \"销量\",\n                  type: \"bar\",\n                  data: [5, 20, 36, 10, 10, 20]\n                }\n              ]\n            }\n          };\n        }\n      };\n      </script>\n      <style>\n      .my-chart {\n        width: 800px;\n        height: 500px;\n      }\n      </style>\n\n### 入门实例\n\n![](1679c3f7aa381aa7)\n\n## 问题\n\n### 问题1：父子组件传值，容易造成点开子组件后，echarts 图不出现\n\n    原因：因此在另一个父组件进行应用的时候，他是首屏就加载，数据不变动。但是当数据变动之后，无法自动的更新图表。由于 mounted 只会在挂载的时候执行一次，因此无法后续进行更新。\n    **解决办法：给父组件加上一个 v-if，使子组件重新渲染**\n\n      <template>\n       <div>\n       <envy-pie :voltage=\"voltage\" v-if=\"flag\">\n       </div>\n      </template>\n        //js部分\n        data () {\n              return {\n                voltage: [],\n                flag: false\n              }\n            },\n            components: {\n              envyPie\n            },\n            methods: {\n              getEnvyContent () {\n                axios.get('../../../static/mock/envy.json').then(this.getEnvyContentSucc)\n              },\n              getEnvyContentSucc (res) {\n                if (res) {\n                  const data = res.data\n                  this.voltage = res.data.capacity_by_voltage\n                  this.flag = true\n                }\n              }\n            },\n            mounted() {\n              this.getEnvyContent()\n            }\n\n### 问题2:自动缩放\n  Echarts 本身是不支持自动缩放的，但是 Echarts 为我们提供了 resize 方法。\n\n        //在**调用方法**中加入下面这行代码\n        window.addEventListener(\"resize\", this.chart.resize);\n\n### 问题3:支持数据自动刷新 \n[原文链接](https://juejin.im/post/5ab220b8f265da237c68ca11)\n\n    因为 Echarts 是数据驱动的，这意味着只要我们重新设置数据，那么图表就会随之重新渲染，这是实现本需求的基础。我们再设想一下，如果想要支持数据的自动刷新，必然需要一个监听器能够实时监听到数据的变化然后告知 Echarts 重新设置数据。所幸 Vue 为我们提供了==watcher==功能，通过它我们可以很方便的实现上述功能\n\n\n      //在Chart.vue中加入watch\n      watch: {    \n        //观察option的变化\n         option: {      \n           handler(newVal, oldVal) {       \n              if (this.chart) {          \n              if (newVal) {            t\n              his.chart.setOption(newVal);          \n              } else {            \n              this.chart.setOption(oldVal);   }      \n              } else {            \n              this.init();   \n              } },      \n              deep: true //对象内部属性的监听，关键。  \n              } \n            }\n\n\n### 问题4:图表太丑怎么破，ECharts神器带你飞！\n[原文链接](https://juejin.im/post/59dcb823f265da432d270f26)\n### 问题5:Echarts x轴文本内容太长的几种解决方案\n[原文链接](https://juejin.im/post/5d255d69f265da1b80206db1)\n### Echars 遇到问题汇总....\n[原文链接](https://www.cnblogs.com/padding1015/p/9936533.html)","slug":"Echars在Vue中如何使用","published":1,"updated":"2020-05-28T07:51:13.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckari24wo00045sjoulcn57t8","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>废话不多说，那我们就看看如何在 Vue 的项目中使用 echarts……</p>\n<h1 id=\"如何在-Vue-项目中使用-Echarts\"><a href=\"#如何在-Vue-项目中使用-Echarts\" class=\"headerlink\" title=\"如何在 Vue 项目中使用 Echarts\"></a>如何在 Vue 项目中使用 Echarts</h1><hr>\n<h2 id=\"第一种方法-直接引入-Echarts\"><a href=\"#第一种方法-直接引入-Echarts\" class=\"headerlink\" title=\"第一种方法 直接引入 Echarts\"></a>第一种方法 直接引入 Echarts</h2><h3 id=\"安装-echarts-项目依赖\"><a href=\"#安装-echarts-项目依赖\" class=\"headerlink\" title=\"安装 echarts 项目依赖\"></a>安装 echarts 项目依赖</h3><pre><code>    npm install echarts --save\n    //或者\n    npm install echarts -S</code></pre><p>如果没有科学上网的朋友可以使用国内的淘宝镜像。</p>\n<pre><code>    npm install -g cnpm --registry=https://registry.npm.taobao.org\n    cnpm install echarts -S</code></pre><ul>\n<li><p>首先我们需要在自己的项目 main.js 中全局引入 Echarts</p>\n<pre><code>  import echarts from &#39;echarts&#39;;\n  Vue.prototype.$echarts=echarts;</code></pre></li>\n</ul>\n<h3 id=\"创建图表\"><a href=\"#创建图表\" class=\"headerlink\" title=\"创建图表\"></a>创建图表</h3><pre><code>    &lt;template&gt;\n    &lt;div id=&quot;app&quot;&gt;\n      &lt;div id=&quot;main&quot; style=&quot;width: 600px;height:400px;&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/template&gt;\n    export default {\n      name: &quot;app&quot;,\n      methods: {\n        drawChart() {\n          // 基于准备好的dom，初始化echarts实例\n          let myChart = this.$echarts.init(document.getElementById(&quot;main&quot;));\n          // 指定图表的配置项和数据\n          let option = {\n            title: {\n              text: &quot;ECharts 入门示例&quot;\n            },\n            tooltip: {},\n            legend: {\n              data: [&quot;销量&quot;]\n            },\n            xAxis: {\n              data: [&quot;衬衫&quot;, &quot;羊毛衫&quot;, &quot;雪纺衫&quot;, &quot;裤子&quot;, &quot;高跟鞋&quot;, &quot;袜子&quot;]\n            },\n            yAxis: {},\n            series: [\n              {\n                name: &quot;销量&quot;,\n                type: &quot;bar&quot;,\n                data: [5, 20, 36, 10, 10, 20]\n              }\n            ]\n          };\n          // 使用刚指定的配置项和数据显示图表。\n          myChart.setOption(option);\n        }\n      },\n      mounted() {\n        this.drawChart();\n      }\n    };\n    &lt;/script&gt;</code></pre><h3 id=\"入门实例\"><a href=\"#入门实例\" class=\"headerlink\" title=\"入门实例\"></a>入门实例</h3><p>  <img src=\"4.jpg\" alt></p>\n<h2 id=\"第二种方法-使用-Vue-ECharts-组件\"><a href=\"#第二种方法-使用-Vue-ECharts-组件\" class=\"headerlink\" title=\"第二种方法 使用 Vue-ECharts 组件\"></a>第二种方法 使用 Vue-ECharts 组件</h2><h3 id=\"安装组件\"><a href=\"#安装组件\" class=\"headerlink\" title=\"安装组件\"></a>安装组件</h3><pre><code>  npm install vue-echarts -S</code></pre><h3 id=\"使用组件\"><a href=\"#使用组件\" class=\"headerlink\" title=\"使用组件\"></a>使用组件</h3><pre><code>  &lt;template&gt;\n    &lt;div id=&quot;app&quot;&gt;\n      &lt;v-chart class=&quot;my-chart&quot; :options=&quot;bar&quot;/&gt;\n    &lt;/div&gt;\n  &lt;/template&gt;\n  &lt;script&gt;\n  // 在对应组件内引用或者main.js全局引用\n  import ECharts from &quot;vue-echarts/components/ECharts&quot;;\n  import &quot;echarts/lib/chart/bar&quot;;`\n  export default {\n    name: &quot;App&quot;,\n    components: {\n      &quot;v-chart&quot;: ECharts\n    },\n    data: function() {\n      return {\n        bar: {\n          title: {\n            text: &quot;ECharts 入门示例&quot;\n          },\n          tooltip: {},\n          legend: {\n            data: [&quot;销量&quot;]\n          },\n          xAxis: {\n            data: [&quot;衬衫&quot;, &quot;羊毛衫&quot;, &quot;雪纺衫&quot;, &quot;裤子&quot;, &quot;高跟鞋&quot;, &quot;袜子&quot;]\n          },\n          yAxis: {},\n          series: [\n            {\n              name: &quot;销量&quot;,\n              type: &quot;bar&quot;,\n              data: [5, 20, 36, 10, 10, 20]\n            }\n          ]\n        }\n      };\n    }\n  };\n  &lt;/script&gt;\n  &lt;style&gt;\n  .my-chart {\n    width: 800px;\n    height: 500px;\n  }\n  &lt;/style&gt;</code></pre><h3 id=\"入门实例-1\"><a href=\"#入门实例-1\" class=\"headerlink\" title=\"入门实例\"></a>入门实例</h3><p><img src=\"1679c3f7aa381aa7\" alt></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"问题1：父子组件传值，容易造成点开子组件后，echarts-图不出现\"><a href=\"#问题1：父子组件传值，容易造成点开子组件后，echarts-图不出现\" class=\"headerlink\" title=\"问题1：父子组件传值，容易造成点开子组件后，echarts 图不出现\"></a>问题1：父子组件传值，容易造成点开子组件后，echarts 图不出现</h3><pre><code>原因：因此在另一个父组件进行应用的时候，他是首屏就加载，数据不变动。但是当数据变动之后，无法自动的更新图表。由于 mounted 只会在挂载的时候执行一次，因此无法后续进行更新。\n**解决办法：给父组件加上一个 v-if，使子组件重新渲染**\n\n  &lt;template&gt;\n   &lt;div&gt;\n   &lt;envy-pie :voltage=&quot;voltage&quot; v-if=&quot;flag&quot;&gt;\n   &lt;/div&gt;\n  &lt;/template&gt;\n    //js部分\n    data () {\n          return {\n            voltage: [],\n            flag: false\n          }\n        },\n        components: {\n          envyPie\n        },\n        methods: {\n          getEnvyContent () {\n            axios.get(&#39;../../../static/mock/envy.json&#39;).then(this.getEnvyContentSucc)\n          },\n          getEnvyContentSucc (res) {\n            if (res) {\n              const data = res.data\n              this.voltage = res.data.capacity_by_voltage\n              this.flag = true\n            }\n          }\n        },\n        mounted() {\n          this.getEnvyContent()\n        }</code></pre><h3 id=\"问题2-自动缩放\"><a href=\"#问题2-自动缩放\" class=\"headerlink\" title=\"问题2:自动缩放\"></a>问题2:自动缩放</h3><p>  Echarts 本身是不支持自动缩放的，但是 Echarts 为我们提供了 resize 方法。</p>\n<pre><code>    //在**调用方法**中加入下面这行代码\n    window.addEventListener(&quot;resize&quot;, this.chart.resize);</code></pre><h3 id=\"问题3-支持数据自动刷新\"><a href=\"#问题3-支持数据自动刷新\" class=\"headerlink\" title=\"问题3:支持数据自动刷新\"></a>问题3:支持数据自动刷新</h3><p><a href=\"https://juejin.im/post/5ab220b8f265da237c68ca11\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<pre><code>因为 Echarts 是数据驱动的，这意味着只要我们重新设置数据，那么图表就会随之重新渲染，这是实现本需求的基础。我们再设想一下，如果想要支持数据的自动刷新，必然需要一个监听器能够实时监听到数据的变化然后告知 Echarts 重新设置数据。所幸 Vue 为我们提供了==watcher==功能，通过它我们可以很方便的实现上述功能\n\n\n  //在Chart.vue中加入watch\n  watch: {    \n    //观察option的变化\n     option: {      \n       handler(newVal, oldVal) {       \n          if (this.chart) {          \n          if (newVal) {            t\n          his.chart.setOption(newVal);          \n          } else {            \n          this.chart.setOption(oldVal);   }      \n          } else {            \n          this.init();   \n          } },      \n          deep: true //对象内部属性的监听，关键。  \n          } \n        }</code></pre><h3 id=\"问题4-图表太丑怎么破，ECharts神器带你飞！\"><a href=\"#问题4-图表太丑怎么破，ECharts神器带你飞！\" class=\"headerlink\" title=\"问题4:图表太丑怎么破，ECharts神器带你飞！\"></a>问题4:图表太丑怎么破，ECharts神器带你飞！</h3><p><a href=\"https://juejin.im/post/59dcb823f265da432d270f26\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<h3 id=\"问题5-Echarts-x轴文本内容太长的几种解决方案\"><a href=\"#问题5-Echarts-x轴文本内容太长的几种解决方案\" class=\"headerlink\" title=\"问题5:Echarts x轴文本内容太长的几种解决方案\"></a>问题5:Echarts x轴文本内容太长的几种解决方案</h3><p><a href=\"https://juejin.im/post/5d255d69f265da1b80206db1\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<h3 id=\"Echars-遇到问题汇总…\"><a href=\"#Echars-遇到问题汇总…\" class=\"headerlink\" title=\"Echars 遇到问题汇总….\"></a>Echars 遇到问题汇总….</h3><p><a href=\"https://www.cnblogs.com/padding1015/p/9936533.html\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>废话不多说，那我们就看看如何在 Vue 的项目中使用 echarts……</p>\n<h1 id=\"如何在-Vue-项目中使用-Echarts\"><a href=\"#如何在-Vue-项目中使用-Echarts\" class=\"headerlink\" title=\"如何在 Vue 项目中使用 Echarts\"></a>如何在 Vue 项目中使用 Echarts</h1><hr>\n<h2 id=\"第一种方法-直接引入-Echarts\"><a href=\"#第一种方法-直接引入-Echarts\" class=\"headerlink\" title=\"第一种方法 直接引入 Echarts\"></a>第一种方法 直接引入 Echarts</h2><h3 id=\"安装-echarts-项目依赖\"><a href=\"#安装-echarts-项目依赖\" class=\"headerlink\" title=\"安装 echarts 项目依赖\"></a>安装 echarts 项目依赖</h3><pre><code>    npm install echarts --save\n    //或者\n    npm install echarts -S</code></pre><p>如果没有科学上网的朋友可以使用国内的淘宝镜像。</p>\n<pre><code>    npm install -g cnpm --registry=https://registry.npm.taobao.org\n    cnpm install echarts -S</code></pre><ul>\n<li><p>首先我们需要在自己的项目 main.js 中全局引入 Echarts</p>\n<pre><code>  import echarts from &#39;echarts&#39;;\n  Vue.prototype.$echarts=echarts;</code></pre></li>\n</ul>\n<h3 id=\"创建图表\"><a href=\"#创建图表\" class=\"headerlink\" title=\"创建图表\"></a>创建图表</h3><pre><code>    &lt;template&gt;\n    &lt;div id=&quot;app&quot;&gt;\n      &lt;div id=&quot;main&quot; style=&quot;width: 600px;height:400px;&quot;&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/template&gt;\n    export default {\n      name: &quot;app&quot;,\n      methods: {\n        drawChart() {\n          // 基于准备好的dom，初始化echarts实例\n          let myChart = this.$echarts.init(document.getElementById(&quot;main&quot;));\n          // 指定图表的配置项和数据\n          let option = {\n            title: {\n              text: &quot;ECharts 入门示例&quot;\n            },\n            tooltip: {},\n            legend: {\n              data: [&quot;销量&quot;]\n            },\n            xAxis: {\n              data: [&quot;衬衫&quot;, &quot;羊毛衫&quot;, &quot;雪纺衫&quot;, &quot;裤子&quot;, &quot;高跟鞋&quot;, &quot;袜子&quot;]\n            },\n            yAxis: {},\n            series: [\n              {\n                name: &quot;销量&quot;,\n                type: &quot;bar&quot;,\n                data: [5, 20, 36, 10, 10, 20]\n              }\n            ]\n          };\n          // 使用刚指定的配置项和数据显示图表。\n          myChart.setOption(option);\n        }\n      },\n      mounted() {\n        this.drawChart();\n      }\n    };\n    &lt;/script&gt;</code></pre><h3 id=\"入门实例\"><a href=\"#入门实例\" class=\"headerlink\" title=\"入门实例\"></a>入门实例</h3><p>  <img src=\"4.jpg\" alt></p>\n<h2 id=\"第二种方法-使用-Vue-ECharts-组件\"><a href=\"#第二种方法-使用-Vue-ECharts-组件\" class=\"headerlink\" title=\"第二种方法 使用 Vue-ECharts 组件\"></a>第二种方法 使用 Vue-ECharts 组件</h2><h3 id=\"安装组件\"><a href=\"#安装组件\" class=\"headerlink\" title=\"安装组件\"></a>安装组件</h3><pre><code>  npm install vue-echarts -S</code></pre><h3 id=\"使用组件\"><a href=\"#使用组件\" class=\"headerlink\" title=\"使用组件\"></a>使用组件</h3><pre><code>  &lt;template&gt;\n    &lt;div id=&quot;app&quot;&gt;\n      &lt;v-chart class=&quot;my-chart&quot; :options=&quot;bar&quot;/&gt;\n    &lt;/div&gt;\n  &lt;/template&gt;\n  &lt;script&gt;\n  // 在对应组件内引用或者main.js全局引用\n  import ECharts from &quot;vue-echarts/components/ECharts&quot;;\n  import &quot;echarts/lib/chart/bar&quot;;`\n  export default {\n    name: &quot;App&quot;,\n    components: {\n      &quot;v-chart&quot;: ECharts\n    },\n    data: function() {\n      return {\n        bar: {\n          title: {\n            text: &quot;ECharts 入门示例&quot;\n          },\n          tooltip: {},\n          legend: {\n            data: [&quot;销量&quot;]\n          },\n          xAxis: {\n            data: [&quot;衬衫&quot;, &quot;羊毛衫&quot;, &quot;雪纺衫&quot;, &quot;裤子&quot;, &quot;高跟鞋&quot;, &quot;袜子&quot;]\n          },\n          yAxis: {},\n          series: [\n            {\n              name: &quot;销量&quot;,\n              type: &quot;bar&quot;,\n              data: [5, 20, 36, 10, 10, 20]\n            }\n          ]\n        }\n      };\n    }\n  };\n  &lt;/script&gt;\n  &lt;style&gt;\n  .my-chart {\n    width: 800px;\n    height: 500px;\n  }\n  &lt;/style&gt;</code></pre><h3 id=\"入门实例-1\"><a href=\"#入门实例-1\" class=\"headerlink\" title=\"入门实例\"></a>入门实例</h3><p><img src=\"1679c3f7aa381aa7\" alt></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"问题1：父子组件传值，容易造成点开子组件后，echarts-图不出现\"><a href=\"#问题1：父子组件传值，容易造成点开子组件后，echarts-图不出现\" class=\"headerlink\" title=\"问题1：父子组件传值，容易造成点开子组件后，echarts 图不出现\"></a>问题1：父子组件传值，容易造成点开子组件后，echarts 图不出现</h3><pre><code>原因：因此在另一个父组件进行应用的时候，他是首屏就加载，数据不变动。但是当数据变动之后，无法自动的更新图表。由于 mounted 只会在挂载的时候执行一次，因此无法后续进行更新。\n**解决办法：给父组件加上一个 v-if，使子组件重新渲染**\n\n  &lt;template&gt;\n   &lt;div&gt;\n   &lt;envy-pie :voltage=&quot;voltage&quot; v-if=&quot;flag&quot;&gt;\n   &lt;/div&gt;\n  &lt;/template&gt;\n    //js部分\n    data () {\n          return {\n            voltage: [],\n            flag: false\n          }\n        },\n        components: {\n          envyPie\n        },\n        methods: {\n          getEnvyContent () {\n            axios.get(&#39;../../../static/mock/envy.json&#39;).then(this.getEnvyContentSucc)\n          },\n          getEnvyContentSucc (res) {\n            if (res) {\n              const data = res.data\n              this.voltage = res.data.capacity_by_voltage\n              this.flag = true\n            }\n          }\n        },\n        mounted() {\n          this.getEnvyContent()\n        }</code></pre><h3 id=\"问题2-自动缩放\"><a href=\"#问题2-自动缩放\" class=\"headerlink\" title=\"问题2:自动缩放\"></a>问题2:自动缩放</h3><p>  Echarts 本身是不支持自动缩放的，但是 Echarts 为我们提供了 resize 方法。</p>\n<pre><code>    //在**调用方法**中加入下面这行代码\n    window.addEventListener(&quot;resize&quot;, this.chart.resize);</code></pre><h3 id=\"问题3-支持数据自动刷新\"><a href=\"#问题3-支持数据自动刷新\" class=\"headerlink\" title=\"问题3:支持数据自动刷新\"></a>问题3:支持数据自动刷新</h3><p><a href=\"https://juejin.im/post/5ab220b8f265da237c68ca11\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<pre><code>因为 Echarts 是数据驱动的，这意味着只要我们重新设置数据，那么图表就会随之重新渲染，这是实现本需求的基础。我们再设想一下，如果想要支持数据的自动刷新，必然需要一个监听器能够实时监听到数据的变化然后告知 Echarts 重新设置数据。所幸 Vue 为我们提供了==watcher==功能，通过它我们可以很方便的实现上述功能\n\n\n  //在Chart.vue中加入watch\n  watch: {    \n    //观察option的变化\n     option: {      \n       handler(newVal, oldVal) {       \n          if (this.chart) {          \n          if (newVal) {            t\n          his.chart.setOption(newVal);          \n          } else {            \n          this.chart.setOption(oldVal);   }      \n          } else {            \n          this.init();   \n          } },      \n          deep: true //对象内部属性的监听，关键。  \n          } \n        }</code></pre><h3 id=\"问题4-图表太丑怎么破，ECharts神器带你飞！\"><a href=\"#问题4-图表太丑怎么破，ECharts神器带你飞！\" class=\"headerlink\" title=\"问题4:图表太丑怎么破，ECharts神器带你飞！\"></a>问题4:图表太丑怎么破，ECharts神器带你飞！</h3><p><a href=\"https://juejin.im/post/59dcb823f265da432d270f26\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<h3 id=\"问题5-Echarts-x轴文本内容太长的几种解决方案\"><a href=\"#问题5-Echarts-x轴文本内容太长的几种解决方案\" class=\"headerlink\" title=\"问题5:Echarts x轴文本内容太长的几种解决方案\"></a>问题5:Echarts x轴文本内容太长的几种解决方案</h3><p><a href=\"https://juejin.im/post/5d255d69f265da1b80206db1\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<h3 id=\"Echars-遇到问题汇总…\"><a href=\"#Echars-遇到问题汇总…\" class=\"headerlink\" title=\"Echars 遇到问题汇总….\"></a>Echars 遇到问题汇总….</h3><p><a href=\"https://www.cnblogs.com/padding1015/p/9936533.html\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n"},{"title":"Echars中常用方法","date":"2019-07-22T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# Echars中常用方法\n---\n\n\n\n**1.什么是Echars?**\n>一个纯JavaScript图表库。[ECharts官网](https://www.echartsjs.com/zh/index.html)，缩写来自Enterprise Charts，商业级数据图表，一个纯Javascript的图表库，可以流畅的运行在PC和移动设备上，兼容当前绝大部分浏览器（IE6/7/8/9/10/11，chrome，firefox，Safari等），底层依赖轻量级的Canvas类库ZRender，提供直观，生动，可交互，可高度个性化定制的数据可视化图表。创新的拖拽重计算、数据视图、值域漫游等特性大大增强了用户体验，赋予了用户对数据进行挖掘、整合的能力。\n\n\n## 1. Echars术语速查手册 ->\n\n+ [Echars术语速查手册](https://www.echartsjs.com/zh/cheat-sheet.html)\n\n## 2. echarts属性的设置（完整大全）\n  ### 全图默认背景 \n      // backgroundColor: ‘rgba(0,0,0,0)’,\n      // 默认色板\n      color: ['#ff7f50','#87cefa','#da70d6','#32cd32','#6495ed',\n          '#ff69b4','#ba55d3','#cd5c5c','#ffa500','#40e0d0',\n          '#1e90ff','#ff6347','#7b68ee','#00fa9a','#ffd700',\n          '#6699FF','#ff6666','#3cb371','#b8860b','#30e0e0'],\n      \n  ### 1.图表标题\n      title: {\n          x: 'left',                // 水平安放位置，默认为左对齐，可选为：\n                            // 'center' ¦ 'left' ¦ 'right'\n                            // ¦ {number}（x坐标，单位px）\n          y: 'top',             // 垂直安放位置，默认为全图顶端，可选为：\n                            // 'top' ¦ 'bottom' ¦ 'center'\n                            // ¦ {number}（y坐标，单位px）\n          //textAlign: null          // 水平对齐方式，默认根据x设置自动调整\n          backgroundColor: 'rgba(0,0,0,0)',\n          borderColor: '#ccc',          // 标题边框颜色\n          borderWidth: 0,           // 标题边框线宽，单位px，默认为0（无边框）\n          padding: 5,             // 标题内边距，单位px，默认各方向内边距为5，\n                                    // 接受数组分别设定上右下左边距，同css\n          itemGap: 10,             // 主副标题纵向间隔，单位px，默认为10，\n          textStyle: {\n              fontSize: 18,\n              fontWeight: 'bolder',\n              color: '#333'                             // 主标题文字颜色\n          },\n          subtextStyle: {\n              color: '#aaa'                            // 副标题文字颜色\n          }\n      },\n      \n  ### 2.图例\n      legend: {\n          orient: 'horizontal',          // 布局方式，默认为水平布局，可选为：\n                            // 'horizontal' ¦ 'vertical'\n          x: 'center',                // 水平安放位置，默认为全图居中，可选为：\n                                    // 'center' ¦ 'left' ¦ 'right'\n                            // ¦ {number}（x坐标，单位px）\n          y: 'top',              // 垂直安放位置，默认为全图顶端，可选为：\n                            // 'top' ¦ 'bottom' ¦ 'center'\n                            // ¦ {number}（y坐标，单位px）\n          backgroundColor: 'rgba(0,0,0,0)',\n          borderColor: '#ccc',            // 图例边框颜色\n          borderWidth: 0,                // 图例边框线宽，单位px，默认为0（无边框）\n          padding: 5,                  // 图例内边距，单位px，默认各方向内边距为5，\n                                    // 接受数组分别设定上右下左边距，同css\n          itemGap: 10,              // 各个item之间的间隔，单位px，默认为10，\n                              // 横向布局时为水平间隔，纵向布局时为纵向间隔\n          itemWidth: 20,             // 图例图形宽度\n          itemHeight: 14,            // 图例图形高度\n          textStyle: {\n              color: '#333'                              // 图例文字颜色\n          }\n      },\n      \n  ### 3.值域\n      dataRange: {\n          orient: 'vertical',             // 布局方式，默认为垂直布局，可选为：\n                              // 'horizontal' ¦ 'vertical'\n          x: 'left',                   // 水平安放位置，默认为全图左对齐，可选为：\n                              // 'center' ¦ 'left' ¦ 'right'\n                              // ¦ {number}（x坐标，单位px）\n          y: 'bottom',                  // 垂直安放位置，默认为全图底部，可选为：\n                              // 'top' ¦ 'bottom' ¦ 'center'\n                              // ¦ {number}（y坐标，单位px）\n          backgroundColor: 'rgba(0,0,0,0)',\n          borderColor: '#ccc',             // 值域边框颜色\n          borderWidth: 0,                 // 值域边框线宽，单位px，默认为0（无边框）\n          padding: 5,                    // 值域内边距，单位px，默认各方向内边距为5，\n                              // 接受数组分别设定上右下左边距，同css\n          itemGap: 10,               // 各个item之间的间隔，单位px，默认为10，\n                              // 横向布局时为水平间隔，纵向布局时为纵向间隔\n          itemWidth: 20,             // 值域图形宽度，线性渐变水平布局宽度为该值 * 10\n          itemHeight: 14,            // 值域图形高度，线性渐变垂直布局高度为该值 * 10\n          splitNumber: 5,            // 分割段数，默认为5，为0时为线性渐变\n          color:['#1e90ff','#f0ffff'],//颜色\n          //text:['高','低'],              // 文本，默认为数值文本\n          textStyle: {\n              color: '#333'                                // 值域文字颜色\n          }\n      },\n      \n      toolbox: {\n          orient: 'horizontal',            // 布局方式，默认为水平布局，可选为：\n                              // 'horizontal' ¦ 'vertical'\n          x: 'right',              // 水平安放位置，默认为全图右对齐，可选为：\n                              // 'center' ¦ 'left' ¦ 'right'\n                              // ¦ {number}（x坐标，单位px）\n          y: 'top',               // 垂直安放位置，默认为全图顶端，可选为：\n                              // 'top' ¦ 'bottom' ¦ 'center'\n                              // ¦ {number}（y坐标，单位px）\n          color : ['#1e90ff','#22bb22','#4b0082','#d2691e'],\n          backgroundColor: 'rgba(0,0,0,0)',    // 工具箱背景颜色\n          borderColor: '#ccc',             // 工具箱边框颜色\n          borderWidth: 0,                 // 工具箱边框线宽，单位px，默认为0（无边框）\n          padding: 5,                    // 工具箱内边距，单位px，默认各方向内边距为5，\n                                      // 接受数组分别设定上右下左边距，同css\n          itemGap: 10,                  // 各个item之间的间隔，单位px，默认为10，\n                                      // 横向布局时为水平间隔，纵向布局时为纵向间隔\n          itemSize: 16,              // 工具箱图形宽度\n          featureImageIcon : {},            // 自定义图片icon\n          featureTitle : {\n              mark : '辅助线开关',\n              markUndo : '删除辅助线',\n              markClear : '清空辅助线',\n              dataZoom : '区域缩放',\n              dataZoomReset : '区域缩放后退',\n              dataView : '数据视图',\n              lineChart : '折线图切换',\n              barChart : '柱形图切换',\n              restore : '还原',\n              saveAsImage : '保存为图片'\n          }\n      },\n      \n  ### 4.提示框\n      tooltip: {\n          trigger: 'item',           // 触发类型，默认数据触发，见下图，可选为：'item' ¦ 'axis'\n          showDelay: 20,             // 显示延迟，添加显示延迟可以避免频繁切换，单位ms\n          hideDelay: 100,            // 隐藏延迟，单位ms\n          transitionDuration : 0.4,         // 动画变换时间，单位s\n          backgroundColor: 'rgba(0,0,0,0.7)',  // 提示背景颜色，默认为透明度为0.7的黑色\n          borderColor: '#333',            // 提示边框颜色\n          borderRadius: 4,                // 提示边框圆角，单位px，默认为4\n          borderWidth: 0,                // 提示边框线宽，单位px，默认为0（无边框）\n          padding: 5,                   // 提示内边距，单位px，默认各方向内边距为5，\n                                      // 接受数组分别设定上右下左边距，同css\n          axisPointer : {                 // 坐标轴指示器，坐标轴触发有效\n              type : 'line',         // 默认为直线，可选为：'line' | 'shadow'\n              lineStyle : {          // 直线指示器样式设置\n                  color: '#48b',\n                  width: 2,\n                  type: 'solid'\n              },\n              shadowStyle : {              // 阴影指示器样式设置\n                  width: 'auto',         // 阴影大小\n                  color: 'rgba(150,150,150,0.3)'  // 阴影颜色\n              }\n          },\n          textStyle: {\n              color: '#fff'\n          }\n      },\n      \n  ### 5.区域缩放控制器\n      dataZoom: {\n          orient: 'horizontal',         // 布局方式，默认为水平布局，可选为：\n                                  // 'horizontal' ¦ 'vertical'\n          // x: {number},              // 水平安放位置，默认为根据grid参数适配，可选为：\n                                  // {number}（x坐标，单位px）\n          // y: {number},              // 垂直安放位置，默认为根据grid参数适配，可选为：\n                                  // {number}（y坐标，单位px）\n          // width: {number},           // 指定宽度，横向布局时默认为根据grid参数适配\n          // height: {number},          // 指定高度，纵向布局时默认为根据grid参数适配\n          backgroundColor: 'rgba(0,0,0,0)',    // 背景颜色\n          dataBackgroundColor: '#eee',       // 数据背景颜色\n          fillerColor: 'rgba(144,197,237,0.2)', // 填充颜色\n          handleColor: 'rgba(70,130,180,0.8)'       // 手柄颜色\n      },\n      \n  ### 6.网格\n      grid: {\n          x: 80,\n          y: 60,\n          x2: 80,\n          y2: 60,\n          // width: {totalWidth} - x - x2,\n          // height: {totalHeight} - y - y2,\n          backgroundColor: 'rgba(0,0,0,0)',\n          borderWidth: 1,\n          borderColor: '#ccc'\n      },\n      \n  ### 7.类目轴\n      categoryAxis: {\n          position: 'bottom',        // 位置\n          nameLocation: 'end',      // 坐标轴名字位置，支持'start' | 'end'\n          boundaryGap: true,     // 类目起始和结束两端空白策略\n          axisLine: {            // 坐标轴线\n              show: true,         // 默认显示，属性show控制显示与否\n              lineStyle: {        // 属性lineStyle控制线条样式\n                  color: '#48b',\n                  width: 2,\n                  type: 'solid'\n              }\n          },\n          axisTick: {            // 坐标轴小标记\n              show: true,       // 属性show控制显示与否，默认不显示\n              interval: 'auto',\n              // onGap: null,\n              inside : false,        // 控制小标记是否在grid里\n              length :5,         // 属性length控制线长\n              lineStyle: {       // 属性lineStyle控制线条样式\n                  color: '#333',\n                  width: 1\n              }\n          },\n          axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel\n              show: true,\n              interval: 'auto',\n              rotate: 0,\n              margin: 8,\n              // formatter: null,\n              textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n                  color: '#333'\n              }\n          },\n          splitLine: {                // 分隔线\n              show: true,        // 默认显示，属性show控制显示与否\n              // onGap: null,\n              lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式\n                  color: ['#ccc'],\n                  width: 1,\n                  type: 'solid'\n              }\n          },\n          splitArea: {                // 分隔区域\n              show: false,       // 默认不显示，属性show控制显示与否\n              // onGap: null,\n              areaStyle: {        // 属性areaStyle（详见areaStyle）控制区域样式\n                  color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']\n              }\n          }\n      },\n      \n  ### 8.数值型坐标轴默认参数\n      valueAxis: {\n          position: 'left',      // 位置\n          nameLocation: 'end',     // 坐标轴名字位置，支持'start' | 'end'\n          nameTextStyle: {},     // 坐标轴文字样式，默认取全局样式\n          boundaryGap: [0, 0],    // 数值起始和结束两端空白策略\n          splitNumber: 5,        // 分割段数，默认为5\n          axisLine: {             // 坐标轴线\n              show: true,      // 默认显示，属性show控制显示与否\n              lineStyle: {      // 属性lineStyle控制线条样式\n                  color: '#48b',\n                  width: 2,\n                  type: 'solid'\n              }\n          },\n          axisTick: {            // 坐标轴小标记\n              show: false,       // 属性show控制显示与否，默认不显示\n              inside : false,      // 控制小标记是否在grid里\n              length :5,          // 属性length控制线长\n              lineStyle: {       // 属性lineStyle控制线条样式\n                  color: '#333',\n                  width: 1\n              }\n          },\n          axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel\n              show: true,\n              rotate: 0,\n              margin: 8,\n              // formatter: null,\n              textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n                  color: '#333'\n              }\n          },\n          splitLine: {                // 分隔线\n              show: true,        // 默认显示，属性show控制显示与否\n              lineStyle: {          // 属性lineStyle（详见lineStyle）控制线条样式\n                  color: ['#ccc'],\n                  width: 1,\n                  type: 'solid'\n              }\n          },\n          splitArea: {                // 分隔区域\n              show: false,       // 默认不显示，属性show控制显示与否\n              areaStyle: {       // 属性areaStyle（详见areaStyle）控制区域样式\n                  color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']\n              }\n          }\n      },\n      \n      polar : {\n          center : ['50%', '50%'],    // 默认全局居中\n          radius : '75%',\n          startAngle : 90,\n          splitNumber : 5,\n          name : {\n              show: true,\n              textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n                  color: '#333'\n              }\n          },\n          axisLine: {            // 坐标轴线\n              show: true,         // 默认显示，属性show控制显示与否\n              lineStyle: {        // 属性lineStyle控制线条样式\n                  color: '#ccc',\n                  width: 1,\n                  type: 'solid'\n              }\n          },\n          axisLabel: {                // 坐标轴文本标签，详见axis.axisLabel\n              show: false,\n              textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n                  color: '#333'\n              }\n          },\n          splitArea : {\n              show : true,\n              areaStyle : {\n                  color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']\n              }\n          },\n          splitLine : {\n              show : true,\n              lineStyle : {\n                  width : 1,\n                  color : '#ccc'\n              }\n          }\n      },\n      \n  ### 9.柱形图默认参数\n      bar: {\n          barMinHeight: 0,            // 最小高度改为0\n          // barWidth: null,        // 默认自适应\n          barGap: '30%',           // 柱间距离，默认为柱形宽度的30%，可设固定值\n          barCategoryGap : '20%',   // 类目间柱形距离，默认为类目间距的20%，可设固定值\n          itemStyle: {\n              normal: {\n                  // color: '各异',\n                  barBorderColor: '#fff',         // 柱条边线\n                  barBorderRadius: 0,            // 柱条边线圆角，单位px，默认为0\n                  barBorderWidth: 1,             // 柱条边线线宽，单位px，默认为1\n                  label: {\n                      show: false\n                                              // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为\n                                              // 'inside'|'left'|'right'|'top'|'bottom'\n                                              // textStyle: null // 默认使用全局文本样式，详见TEXTSTYLE\n                  }\n              },\n              emphasis: {\n                  // color: '各异',\n                  barBorderColor: 'rgba(0,0,0,0)',            // 柱条边线\n                  barBorderRadius: 0,                // 柱条边线圆角，单位px，默认为0\n                  barBorderWidth: 1,                     // 柱条边线线宽，单位px，默认为1\n                  label: {\n                      show: false\n                      // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为\n                      //           'inside'|'left'|'right'|'top'|'bottom'\n                      // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                  }\n              }\n          }\n      },\n      \n  ### 10.折线图默认参数\n      line: {\n          itemStyle: {\n              normal: {\n                  // color: 各异,\n                  label: {\n                      show: false\n                      // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为\n                      //           'inside'|'left'|'right'|'top'|'bottom'\n                      // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                  },\n                  lineStyle: {\n                      width: 2,\n                      type: 'solid',\n                      shadowColor : 'rgba(0,0,0,0)', //默认透明\n                      shadowBlur: 5,\n                      shadowOffsetX: 3,\n                      shadowOffsetY: 3\n                  }\n              },\n              emphasis: {\n                  // color: 各异,\n                  label: {\n                      show: false\n                      // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为\n                      //           'inside'|'left'|'right'|'top'|'bottom'\n                      // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                  }\n              }\n          },\n          //smooth : false,\n          //symbol: null,             // 拐点图形类型\n          symbolSize: 2,          // 拐点图形大小\n          //symbolRotate : null,       // 拐点图形旋转控制\n          showAllSymbol: false                   // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）\n      },\n      \n  ### 11.K线图默认参数\n      k: {\n          // barWidth : null              // 默认自适应\n          // barMaxWidth : null           // 默认自适应\n          itemStyle: {\n              normal: {\n                  color: '#fff',      // 阳线填充颜色\n                  color0: '#00aa11',  // 阴线填充颜色\n                  lineStyle: {\n                      width: 1,\n                      color: '#ff3200',    // 阳线边框颜色\n                      color0: '#00aa11'          // 阴线边框颜色\n                  }\n              },\n              emphasis: {\n                  // color: 各异,\n                  // color0: 各异\n              }\n          }\n      },\n      \n  ### 12.散点图默认参数\n      scatter: {\n          //symbol: null,         // 图形类型\n          symbolSize: 4,       // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2\n          //symbolRotate : null,   // 图形旋转控制\n          large: false,        // 大规模散点图\n          largeThreshold: 2000,   // 大规模阀值，large为true且数据量>largeThreshold才启用大规模模式\n          itemStyle: {\n              normal: {\n                  // color: 各异,\n                  label: {\n                      show: false\n                      // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为\n                      //           'inside'|'left'|'right'|'top'|'bottom'\n                      // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                  }\n              },\n              emphasis: {\n                  // color: '各异'\n                  label: {\n                      show: false\n                      // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为\n                      //           'inside'|'left'|'right'|'top'|'bottom'\n                      // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                  }\n              }\n          }\n      },\n      \n  ### 13.雷达图默认参数\n      radar : {\n          itemStyle: {\n              normal: {\n                  // color: 各异,\n                  label: {\n                      show: false\n                  },\n                  lineStyle: {\n                      width: 2,\n                      type: 'solid'\n                  }\n              },\n              emphasis: {\n                  // color: 各异,\n                  label: {\n                      show: false\n                  }\n              }\n          },\n          //symbol: null,          // 拐点图形类型\n          symbolSize: 2          // 可计算特性参数，空数据拖拽提示图形大小\n          //symbolRotate : null,    // 图形旋转控制\n      },\n      \n  ### 14.饼图默认参数\n      pie: {\n          center : ['50%', '50%'],          // 默认全局居中\n          radius : [0, '75%'],\n          clockWise : false,             // 默认逆时针\n          startAngle: 90,\n          minAngle: 0,                 // 最小角度改为0\n          selectedOffset: 10,         // 选中是扇区偏移量\n          itemStyle: {\n              normal: {\n                  // color: 各异,\n                  borderColor: '#fff',\n                  borderWidth: 1,\n                  label: {\n                      show: true,\n                      position: 'outer'\n                      // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                  },\n                  labelLine: {\n                      show: true,\n                      length: 20,\n                      lineStyle: {\n                          // color: 各异,\n                          width: 1,\n                          type: 'solid'\n                      }\n                  }\n              },\n              emphasis: {\n                  // color: 各异,\n                  borderColor: 'rgba(0,0,0,0)',\n                  borderWidth: 1,\n                  label: {\n                      show: false\n                      // position: 'outer'\n                      // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                  },\n                  labelLine: {\n                      show: false,\n                      length: 20,\n                      lineStyle: {\n                          // color: 各异,\n                          width: 1,\n                          type: 'solid'\n                      }\n                  }\n              }\n          }\n      },\n      \n      map: {\n          mapType: 'china',   // 各省的mapType暂时都用中文\n          mapLocation: {\n              x : 'center',\n              y : 'center'\n              // width    // 自适应\n              // height   // 自适应\n          },\n          showLegendSymbol : true,       // 显示图例颜色标识（系列标识的小圆点），存在legend时生效\n          itemStyle: {\n              normal: {\n                  // color: 各异,\n                  borderColor: '#fff',\n                  borderWidth: 1,\n                  areaStyle: {\n                      color: '#ccc'   //rgba(135,206,250,0.8)\n                  },\n                  label: {\n                      show: false,\n                      textStyle: {\n                          color: 'rgba(139,69,19,1)'\n                      }\n                  }\n              },\n              emphasis: {                // 也是选中样式\n                  // color: 各异,\n                  borderColor: 'rgba(0,0,0,0)',\n                  borderWidth: 1,\n                  areaStyle: {\n                      color: 'rgba(255,215,0,0.8)'\n                  },\n                  label: {\n                      show: false,\n                      textStyle: {\n                          color: 'rgba(139,69,19,1)'\n                      }\n                  }\n              }\n          }\n      },\n      \n      force : {\n          // 数据map到圆的半径的最小值和最大值\n          minRadius : 10,\n          maxRadius : 20,\n          density : 1.0,\n          attractiveness : 1.0,\n          // 初始化的随机大小位置\n          initSize : 300,\n          // 向心力因子，越大向心力越大\n          centripetal : 1,\n          // 冷却因子\n          coolDown : 0.99,\n          // 分类里如果有样式会覆盖节点默认样式\n          itemStyle: {\n              normal: {\n                  // color: 各异,\n                  label: {\n                      show: false\n                      // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                  },\n                  nodeStyle : {\n                      brushType : 'both',\n                      color : '#f08c2e',\n                      strokeColor : '#5182ab'\n                  },\n                  linkStyle : {\n                      strokeColor : '#5182ab'\n                  }\n              },\n              emphasis: {\n                  // color: 各异,\n                  label: {\n                      show: false\n                      // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                  },\n                  nodeStyle : {},\n                  linkStyle : {}\n              }\n          }\n      },\n      \n      chord : {\n          radius : ['65%', '75%'],\n          center : ['50%', '50%'],\n          padding : 2,\n          sort : 'none',   // can be 'none', 'ascending', 'descending'\n          sortSub : 'none', // can be 'none', 'ascending', 'descending'\n          startAngle : 90,\n          clockWise : false,\n          showScale : false,\n          showScaleText : false,\n          itemStyle : {\n              normal : {\n                  label : {\n                      show : true\n                      // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                  },\n                  lineStyle : {\n                      width : 0,\n                      color : '#000'\n                  },\n                  chordStyle : {\n                      lineStyle : {\n                          width : 1,\n                          color : '#666'\n                      }\n                  }\n              },\n              emphasis : {\n                  lineStyle : {\n                      width : 0,\n                      color : '#000'\n                  },\n                  chordStyle : {\n                      lineStyle : {\n                          width : 2,\n                          color : '#333'\n                      }\n                  }\n              }\n          }\n      },\n      \n      island: {\n          r: 15,\n          calculateStep: 0.1  // 滚轮可计算步长 0.1 = 10%\n      },\n      \n      markPoint : {\n          symbol: 'pin',         // 标注类型\n          symbolSize: 10,            // 标注大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2\n          //symbolRotate : null, // 标注旋转控制\n          itemStyle: {\n              normal: {\n                  // color: 各异，\n                  // borderColor: 各异,     // 标注边线颜色，优先于color\n                  borderWidth: 2,         // 标注边线线宽，单位px，默认为1\n                  label: {\n                      show: true,\n                      position: 'inside'    // 可选为'left'|'right'|'top'|'bottom'\n                      // textStyle: null    // 默认使用全局文本样式，详见TEXTSTYLE\n                  }\n              },\n              emphasis: {\n                  // color: 各异\n                  label: {\n                      show: true\n                      // position: 'inside'    // 'left'|'right'|'top'|'bottom'\n                      // textStyle: null     // 默认使用全局文本样式，详见TEXTSTYLE\n                  }\n              }\n          }\n      },\n      \n      markLine : {\n          // 标线起始和结束的symbol介绍类型，如果都一样，可以直接传string\n          symbol: ['circle', 'arrow'], \n          // 标线起始和结束的symbol大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2\n          symbolSize: [2, 4],\n          // 标线起始和结束的symbol旋转控制\n          //symbolRotate : null,\n          itemStyle: {\n              normal: {\n                  // color: 各异,           // 标线主色，线色，symbol主色\n                  // borderColor: 随color,       // 标线symbol边框颜色，优先于color\n                  borderWidth: 2,          // 标线symbol边框线宽，单位px，默认为2\n                  label: {\n                      show: false,\n                      // 可选为 'start'|'end'|'left'|'right'|'top'|'bottom'\n                      position: 'inside', \n                      textStyle: {         // 默认使用全局文本样式，详见TEXTSTYLE\n                          color: '#333'\n                      }\n                  },\n                  lineStyle: {\n                      // color: 随borderColor,    // 主色，线色，优先级高于borderColor和color\n                      // width: 随borderWidth,    // 优先于borderWidth\n                      type: 'solid',\n                      shadowColor : 'rgba(0,0,0,0)', //默认透明\n                      shadowBlur: 5,\n                      shadowOffsetX: 3,\n                      shadowOffsetY: 3\n                  }\n              },\n              emphasis: {\n                  // color: 各异\n                  label: {\n                      show: false\n                      // position: 'inside'   // 'left'|'right'|'top'|'bottom'\n                      // textStyle: null    // 默认使用全局文本样式，详见TEXTSTYLE\n                  },\n                  lineStyle : {}\n              }\n          }\n      },\n      \n      textStyle: {\n          decoration: 'none',\n          fontFamily: 'Arial, Verdana, sans-serif',\n          fontFamily2: '微软雅黑',    // IE8- 字体模糊并且不支持不同字体混排，额外指定一份\n          fontSize: 12,\n          fontStyle: 'normal',\n          fontWeight: 'normal'\n      },\n      \n  ### 15.默认标志图形类型列表\n      symbolList : [\n        'circle', 'rectangle', 'triangle', 'diamond',\n        'emptyCircle', 'emptyRectangle', 'emptyTriangle', 'emptyDiamond'\n      ],\n      loadingText : 'Loading...',\n  ### 16.可计算特性配置，孤岛，提示颜色\n      calculable: false,                       // 默认关闭可计算特性\n      calculableColor: 'rgba(255,165,0,0.6)',       // 拖拽提示边框颜色\n      calculableHolderColor: '#ccc',               // 可计算占位提示颜色\n      nameConnector: ' & ',\n      valueConnector: ' : ',\n      animation: true,\n      animationThreshold: 2500,           // 动画元素阀值，产生的图形原素超过2500不出动画\n      addDataAnimation: true,         // 动态数据接口是否开启动画效果\n      animationDuration: 2000,\n      animationEasing: 'ExponentialOut'             //BounceOut\n\n\n## 3. Echars官方案例\n\n+ [Echars官方案例](https://www.echartsjs.com/examples/zh/index.html)\n\n## 4. [Echars社区](https://gallery.echartsjs.com/explore.html)经典模板 \n\n+ [自定义tooltip，实时获取最新geojson数据](https://gallery.echartsjs.com/editor.html?c=xmCAi_XNuJ)\n![](2.jpg)\n+ [中国地图自定义轮播](https://gallery.echartsjs.com/editor.html?c=xPkPpAWqSt)\n![](1.jpg)\n\n+ ......\n\n<!-- ## 5.Echars在Vue项目中的使用 -->\n\n\n\n\n\n\n\n","source":"_posts/Echars中常用方法.md","raw":"---\ntitle: Echars中常用方法\ndate: 2019-07-22 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n- 开发环境\ncategories:\n- 开发环境\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# Echars中常用方法\n---\n\n\n\n**1.什么是Echars?**\n>一个纯JavaScript图表库。[ECharts官网](https://www.echartsjs.com/zh/index.html)，缩写来自Enterprise Charts，商业级数据图表，一个纯Javascript的图表库，可以流畅的运行在PC和移动设备上，兼容当前绝大部分浏览器（IE6/7/8/9/10/11，chrome，firefox，Safari等），底层依赖轻量级的Canvas类库ZRender，提供直观，生动，可交互，可高度个性化定制的数据可视化图表。创新的拖拽重计算、数据视图、值域漫游等特性大大增强了用户体验，赋予了用户对数据进行挖掘、整合的能力。\n\n\n## 1. Echars术语速查手册 ->\n\n+ [Echars术语速查手册](https://www.echartsjs.com/zh/cheat-sheet.html)\n\n## 2. echarts属性的设置（完整大全）\n  ### 全图默认背景 \n      // backgroundColor: ‘rgba(0,0,0,0)’,\n      // 默认色板\n      color: ['#ff7f50','#87cefa','#da70d6','#32cd32','#6495ed',\n          '#ff69b4','#ba55d3','#cd5c5c','#ffa500','#40e0d0',\n          '#1e90ff','#ff6347','#7b68ee','#00fa9a','#ffd700',\n          '#6699FF','#ff6666','#3cb371','#b8860b','#30e0e0'],\n      \n  ### 1.图表标题\n      title: {\n          x: 'left',                // 水平安放位置，默认为左对齐，可选为：\n                            // 'center' ¦ 'left' ¦ 'right'\n                            // ¦ {number}（x坐标，单位px）\n          y: 'top',             // 垂直安放位置，默认为全图顶端，可选为：\n                            // 'top' ¦ 'bottom' ¦ 'center'\n                            // ¦ {number}（y坐标，单位px）\n          //textAlign: null          // 水平对齐方式，默认根据x设置自动调整\n          backgroundColor: 'rgba(0,0,0,0)',\n          borderColor: '#ccc',          // 标题边框颜色\n          borderWidth: 0,           // 标题边框线宽，单位px，默认为0（无边框）\n          padding: 5,             // 标题内边距，单位px，默认各方向内边距为5，\n                                    // 接受数组分别设定上右下左边距，同css\n          itemGap: 10,             // 主副标题纵向间隔，单位px，默认为10，\n          textStyle: {\n              fontSize: 18,\n              fontWeight: 'bolder',\n              color: '#333'                             // 主标题文字颜色\n          },\n          subtextStyle: {\n              color: '#aaa'                            // 副标题文字颜色\n          }\n      },\n      \n  ### 2.图例\n      legend: {\n          orient: 'horizontal',          // 布局方式，默认为水平布局，可选为：\n                            // 'horizontal' ¦ 'vertical'\n          x: 'center',                // 水平安放位置，默认为全图居中，可选为：\n                                    // 'center' ¦ 'left' ¦ 'right'\n                            // ¦ {number}（x坐标，单位px）\n          y: 'top',              // 垂直安放位置，默认为全图顶端，可选为：\n                            // 'top' ¦ 'bottom' ¦ 'center'\n                            // ¦ {number}（y坐标，单位px）\n          backgroundColor: 'rgba(0,0,0,0)',\n          borderColor: '#ccc',            // 图例边框颜色\n          borderWidth: 0,                // 图例边框线宽，单位px，默认为0（无边框）\n          padding: 5,                  // 图例内边距，单位px，默认各方向内边距为5，\n                                    // 接受数组分别设定上右下左边距，同css\n          itemGap: 10,              // 各个item之间的间隔，单位px，默认为10，\n                              // 横向布局时为水平间隔，纵向布局时为纵向间隔\n          itemWidth: 20,             // 图例图形宽度\n          itemHeight: 14,            // 图例图形高度\n          textStyle: {\n              color: '#333'                              // 图例文字颜色\n          }\n      },\n      \n  ### 3.值域\n      dataRange: {\n          orient: 'vertical',             // 布局方式，默认为垂直布局，可选为：\n                              // 'horizontal' ¦ 'vertical'\n          x: 'left',                   // 水平安放位置，默认为全图左对齐，可选为：\n                              // 'center' ¦ 'left' ¦ 'right'\n                              // ¦ {number}（x坐标，单位px）\n          y: 'bottom',                  // 垂直安放位置，默认为全图底部，可选为：\n                              // 'top' ¦ 'bottom' ¦ 'center'\n                              // ¦ {number}（y坐标，单位px）\n          backgroundColor: 'rgba(0,0,0,0)',\n          borderColor: '#ccc',             // 值域边框颜色\n          borderWidth: 0,                 // 值域边框线宽，单位px，默认为0（无边框）\n          padding: 5,                    // 值域内边距，单位px，默认各方向内边距为5，\n                              // 接受数组分别设定上右下左边距，同css\n          itemGap: 10,               // 各个item之间的间隔，单位px，默认为10，\n                              // 横向布局时为水平间隔，纵向布局时为纵向间隔\n          itemWidth: 20,             // 值域图形宽度，线性渐变水平布局宽度为该值 * 10\n          itemHeight: 14,            // 值域图形高度，线性渐变垂直布局高度为该值 * 10\n          splitNumber: 5,            // 分割段数，默认为5，为0时为线性渐变\n          color:['#1e90ff','#f0ffff'],//颜色\n          //text:['高','低'],              // 文本，默认为数值文本\n          textStyle: {\n              color: '#333'                                // 值域文字颜色\n          }\n      },\n      \n      toolbox: {\n          orient: 'horizontal',            // 布局方式，默认为水平布局，可选为：\n                              // 'horizontal' ¦ 'vertical'\n          x: 'right',              // 水平安放位置，默认为全图右对齐，可选为：\n                              // 'center' ¦ 'left' ¦ 'right'\n                              // ¦ {number}（x坐标，单位px）\n          y: 'top',               // 垂直安放位置，默认为全图顶端，可选为：\n                              // 'top' ¦ 'bottom' ¦ 'center'\n                              // ¦ {number}（y坐标，单位px）\n          color : ['#1e90ff','#22bb22','#4b0082','#d2691e'],\n          backgroundColor: 'rgba(0,0,0,0)',    // 工具箱背景颜色\n          borderColor: '#ccc',             // 工具箱边框颜色\n          borderWidth: 0,                 // 工具箱边框线宽，单位px，默认为0（无边框）\n          padding: 5,                    // 工具箱内边距，单位px，默认各方向内边距为5，\n                                      // 接受数组分别设定上右下左边距，同css\n          itemGap: 10,                  // 各个item之间的间隔，单位px，默认为10，\n                                      // 横向布局时为水平间隔，纵向布局时为纵向间隔\n          itemSize: 16,              // 工具箱图形宽度\n          featureImageIcon : {},            // 自定义图片icon\n          featureTitle : {\n              mark : '辅助线开关',\n              markUndo : '删除辅助线',\n              markClear : '清空辅助线',\n              dataZoom : '区域缩放',\n              dataZoomReset : '区域缩放后退',\n              dataView : '数据视图',\n              lineChart : '折线图切换',\n              barChart : '柱形图切换',\n              restore : '还原',\n              saveAsImage : '保存为图片'\n          }\n      },\n      \n  ### 4.提示框\n      tooltip: {\n          trigger: 'item',           // 触发类型，默认数据触发，见下图，可选为：'item' ¦ 'axis'\n          showDelay: 20,             // 显示延迟，添加显示延迟可以避免频繁切换，单位ms\n          hideDelay: 100,            // 隐藏延迟，单位ms\n          transitionDuration : 0.4,         // 动画变换时间，单位s\n          backgroundColor: 'rgba(0,0,0,0.7)',  // 提示背景颜色，默认为透明度为0.7的黑色\n          borderColor: '#333',            // 提示边框颜色\n          borderRadius: 4,                // 提示边框圆角，单位px，默认为4\n          borderWidth: 0,                // 提示边框线宽，单位px，默认为0（无边框）\n          padding: 5,                   // 提示内边距，单位px，默认各方向内边距为5，\n                                      // 接受数组分别设定上右下左边距，同css\n          axisPointer : {                 // 坐标轴指示器，坐标轴触发有效\n              type : 'line',         // 默认为直线，可选为：'line' | 'shadow'\n              lineStyle : {          // 直线指示器样式设置\n                  color: '#48b',\n                  width: 2,\n                  type: 'solid'\n              },\n              shadowStyle : {              // 阴影指示器样式设置\n                  width: 'auto',         // 阴影大小\n                  color: 'rgba(150,150,150,0.3)'  // 阴影颜色\n              }\n          },\n          textStyle: {\n              color: '#fff'\n          }\n      },\n      \n  ### 5.区域缩放控制器\n      dataZoom: {\n          orient: 'horizontal',         // 布局方式，默认为水平布局，可选为：\n                                  // 'horizontal' ¦ 'vertical'\n          // x: {number},              // 水平安放位置，默认为根据grid参数适配，可选为：\n                                  // {number}（x坐标，单位px）\n          // y: {number},              // 垂直安放位置，默认为根据grid参数适配，可选为：\n                                  // {number}（y坐标，单位px）\n          // width: {number},           // 指定宽度，横向布局时默认为根据grid参数适配\n          // height: {number},          // 指定高度，纵向布局时默认为根据grid参数适配\n          backgroundColor: 'rgba(0,0,0,0)',    // 背景颜色\n          dataBackgroundColor: '#eee',       // 数据背景颜色\n          fillerColor: 'rgba(144,197,237,0.2)', // 填充颜色\n          handleColor: 'rgba(70,130,180,0.8)'       // 手柄颜色\n      },\n      \n  ### 6.网格\n      grid: {\n          x: 80,\n          y: 60,\n          x2: 80,\n          y2: 60,\n          // width: {totalWidth} - x - x2,\n          // height: {totalHeight} - y - y2,\n          backgroundColor: 'rgba(0,0,0,0)',\n          borderWidth: 1,\n          borderColor: '#ccc'\n      },\n      \n  ### 7.类目轴\n      categoryAxis: {\n          position: 'bottom',        // 位置\n          nameLocation: 'end',      // 坐标轴名字位置，支持'start' | 'end'\n          boundaryGap: true,     // 类目起始和结束两端空白策略\n          axisLine: {            // 坐标轴线\n              show: true,         // 默认显示，属性show控制显示与否\n              lineStyle: {        // 属性lineStyle控制线条样式\n                  color: '#48b',\n                  width: 2,\n                  type: 'solid'\n              }\n          },\n          axisTick: {            // 坐标轴小标记\n              show: true,       // 属性show控制显示与否，默认不显示\n              interval: 'auto',\n              // onGap: null,\n              inside : false,        // 控制小标记是否在grid里\n              length :5,         // 属性length控制线长\n              lineStyle: {       // 属性lineStyle控制线条样式\n                  color: '#333',\n                  width: 1\n              }\n          },\n          axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel\n              show: true,\n              interval: 'auto',\n              rotate: 0,\n              margin: 8,\n              // formatter: null,\n              textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n                  color: '#333'\n              }\n          },\n          splitLine: {                // 分隔线\n              show: true,        // 默认显示，属性show控制显示与否\n              // onGap: null,\n              lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式\n                  color: ['#ccc'],\n                  width: 1,\n                  type: 'solid'\n              }\n          },\n          splitArea: {                // 分隔区域\n              show: false,       // 默认不显示，属性show控制显示与否\n              // onGap: null,\n              areaStyle: {        // 属性areaStyle（详见areaStyle）控制区域样式\n                  color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']\n              }\n          }\n      },\n      \n  ### 8.数值型坐标轴默认参数\n      valueAxis: {\n          position: 'left',      // 位置\n          nameLocation: 'end',     // 坐标轴名字位置，支持'start' | 'end'\n          nameTextStyle: {},     // 坐标轴文字样式，默认取全局样式\n          boundaryGap: [0, 0],    // 数值起始和结束两端空白策略\n          splitNumber: 5,        // 分割段数，默认为5\n          axisLine: {             // 坐标轴线\n              show: true,      // 默认显示，属性show控制显示与否\n              lineStyle: {      // 属性lineStyle控制线条样式\n                  color: '#48b',\n                  width: 2,\n                  type: 'solid'\n              }\n          },\n          axisTick: {            // 坐标轴小标记\n              show: false,       // 属性show控制显示与否，默认不显示\n              inside : false,      // 控制小标记是否在grid里\n              length :5,          // 属性length控制线长\n              lineStyle: {       // 属性lineStyle控制线条样式\n                  color: '#333',\n                  width: 1\n              }\n          },\n          axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel\n              show: true,\n              rotate: 0,\n              margin: 8,\n              // formatter: null,\n              textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n                  color: '#333'\n              }\n          },\n          splitLine: {                // 分隔线\n              show: true,        // 默认显示，属性show控制显示与否\n              lineStyle: {          // 属性lineStyle（详见lineStyle）控制线条样式\n                  color: ['#ccc'],\n                  width: 1,\n                  type: 'solid'\n              }\n          },\n          splitArea: {                // 分隔区域\n              show: false,       // 默认不显示，属性show控制显示与否\n              areaStyle: {       // 属性areaStyle（详见areaStyle）控制区域样式\n                  color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']\n              }\n          }\n      },\n      \n      polar : {\n          center : ['50%', '50%'],    // 默认全局居中\n          radius : '75%',\n          startAngle : 90,\n          splitNumber : 5,\n          name : {\n              show: true,\n              textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n                  color: '#333'\n              }\n          },\n          axisLine: {            // 坐标轴线\n              show: true,         // 默认显示，属性show控制显示与否\n              lineStyle: {        // 属性lineStyle控制线条样式\n                  color: '#ccc',\n                  width: 1,\n                  type: 'solid'\n              }\n          },\n          axisLabel: {                // 坐标轴文本标签，详见axis.axisLabel\n              show: false,\n              textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n                  color: '#333'\n              }\n          },\n          splitArea : {\n              show : true,\n              areaStyle : {\n                  color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']\n              }\n          },\n          splitLine : {\n              show : true,\n              lineStyle : {\n                  width : 1,\n                  color : '#ccc'\n              }\n          }\n      },\n      \n  ### 9.柱形图默认参数\n      bar: {\n          barMinHeight: 0,            // 最小高度改为0\n          // barWidth: null,        // 默认自适应\n          barGap: '30%',           // 柱间距离，默认为柱形宽度的30%，可设固定值\n          barCategoryGap : '20%',   // 类目间柱形距离，默认为类目间距的20%，可设固定值\n          itemStyle: {\n              normal: {\n                  // color: '各异',\n                  barBorderColor: '#fff',         // 柱条边线\n                  barBorderRadius: 0,            // 柱条边线圆角，单位px，默认为0\n                  barBorderWidth: 1,             // 柱条边线线宽，单位px，默认为1\n                  label: {\n                      show: false\n                                              // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为\n                                              // 'inside'|'left'|'right'|'top'|'bottom'\n                                              // textStyle: null // 默认使用全局文本样式，详见TEXTSTYLE\n                  }\n              },\n              emphasis: {\n                  // color: '各异',\n                  barBorderColor: 'rgba(0,0,0,0)',            // 柱条边线\n                  barBorderRadius: 0,                // 柱条边线圆角，单位px，默认为0\n                  barBorderWidth: 1,                     // 柱条边线线宽，单位px，默认为1\n                  label: {\n                      show: false\n                      // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为\n                      //           'inside'|'left'|'right'|'top'|'bottom'\n                      // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                  }\n              }\n          }\n      },\n      \n  ### 10.折线图默认参数\n      line: {\n          itemStyle: {\n              normal: {\n                  // color: 各异,\n                  label: {\n                      show: false\n                      // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为\n                      //           'inside'|'left'|'right'|'top'|'bottom'\n                      // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                  },\n                  lineStyle: {\n                      width: 2,\n                      type: 'solid',\n                      shadowColor : 'rgba(0,0,0,0)', //默认透明\n                      shadowBlur: 5,\n                      shadowOffsetX: 3,\n                      shadowOffsetY: 3\n                  }\n              },\n              emphasis: {\n                  // color: 各异,\n                  label: {\n                      show: false\n                      // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为\n                      //           'inside'|'left'|'right'|'top'|'bottom'\n                      // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                  }\n              }\n          },\n          //smooth : false,\n          //symbol: null,             // 拐点图形类型\n          symbolSize: 2,          // 拐点图形大小\n          //symbolRotate : null,       // 拐点图形旋转控制\n          showAllSymbol: false                   // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）\n      },\n      \n  ### 11.K线图默认参数\n      k: {\n          // barWidth : null              // 默认自适应\n          // barMaxWidth : null           // 默认自适应\n          itemStyle: {\n              normal: {\n                  color: '#fff',      // 阳线填充颜色\n                  color0: '#00aa11',  // 阴线填充颜色\n                  lineStyle: {\n                      width: 1,\n                      color: '#ff3200',    // 阳线边框颜色\n                      color0: '#00aa11'          // 阴线边框颜色\n                  }\n              },\n              emphasis: {\n                  // color: 各异,\n                  // color0: 各异\n              }\n          }\n      },\n      \n  ### 12.散点图默认参数\n      scatter: {\n          //symbol: null,         // 图形类型\n          symbolSize: 4,       // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2\n          //symbolRotate : null,   // 图形旋转控制\n          large: false,        // 大规模散点图\n          largeThreshold: 2000,   // 大规模阀值，large为true且数据量>largeThreshold才启用大规模模式\n          itemStyle: {\n              normal: {\n                  // color: 各异,\n                  label: {\n                      show: false\n                      // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为\n                      //           'inside'|'left'|'right'|'top'|'bottom'\n                      // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                  }\n              },\n              emphasis: {\n                  // color: '各异'\n                  label: {\n                      show: false\n                      // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为\n                      //           'inside'|'left'|'right'|'top'|'bottom'\n                      // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                  }\n              }\n          }\n      },\n      \n  ### 13.雷达图默认参数\n      radar : {\n          itemStyle: {\n              normal: {\n                  // color: 各异,\n                  label: {\n                      show: false\n                  },\n                  lineStyle: {\n                      width: 2,\n                      type: 'solid'\n                  }\n              },\n              emphasis: {\n                  // color: 各异,\n                  label: {\n                      show: false\n                  }\n              }\n          },\n          //symbol: null,          // 拐点图形类型\n          symbolSize: 2          // 可计算特性参数，空数据拖拽提示图形大小\n          //symbolRotate : null,    // 图形旋转控制\n      },\n      \n  ### 14.饼图默认参数\n      pie: {\n          center : ['50%', '50%'],          // 默认全局居中\n          radius : [0, '75%'],\n          clockWise : false,             // 默认逆时针\n          startAngle: 90,\n          minAngle: 0,                 // 最小角度改为0\n          selectedOffset: 10,         // 选中是扇区偏移量\n          itemStyle: {\n              normal: {\n                  // color: 各异,\n                  borderColor: '#fff',\n                  borderWidth: 1,\n                  label: {\n                      show: true,\n                      position: 'outer'\n                      // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                  },\n                  labelLine: {\n                      show: true,\n                      length: 20,\n                      lineStyle: {\n                          // color: 各异,\n                          width: 1,\n                          type: 'solid'\n                      }\n                  }\n              },\n              emphasis: {\n                  // color: 各异,\n                  borderColor: 'rgba(0,0,0,0)',\n                  borderWidth: 1,\n                  label: {\n                      show: false\n                      // position: 'outer'\n                      // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                  },\n                  labelLine: {\n                      show: false,\n                      length: 20,\n                      lineStyle: {\n                          // color: 各异,\n                          width: 1,\n                          type: 'solid'\n                      }\n                  }\n              }\n          }\n      },\n      \n      map: {\n          mapType: 'china',   // 各省的mapType暂时都用中文\n          mapLocation: {\n              x : 'center',\n              y : 'center'\n              // width    // 自适应\n              // height   // 自适应\n          },\n          showLegendSymbol : true,       // 显示图例颜色标识（系列标识的小圆点），存在legend时生效\n          itemStyle: {\n              normal: {\n                  // color: 各异,\n                  borderColor: '#fff',\n                  borderWidth: 1,\n                  areaStyle: {\n                      color: '#ccc'   //rgba(135,206,250,0.8)\n                  },\n                  label: {\n                      show: false,\n                      textStyle: {\n                          color: 'rgba(139,69,19,1)'\n                      }\n                  }\n              },\n              emphasis: {                // 也是选中样式\n                  // color: 各异,\n                  borderColor: 'rgba(0,0,0,0)',\n                  borderWidth: 1,\n                  areaStyle: {\n                      color: 'rgba(255,215,0,0.8)'\n                  },\n                  label: {\n                      show: false,\n                      textStyle: {\n                          color: 'rgba(139,69,19,1)'\n                      }\n                  }\n              }\n          }\n      },\n      \n      force : {\n          // 数据map到圆的半径的最小值和最大值\n          minRadius : 10,\n          maxRadius : 20,\n          density : 1.0,\n          attractiveness : 1.0,\n          // 初始化的随机大小位置\n          initSize : 300,\n          // 向心力因子，越大向心力越大\n          centripetal : 1,\n          // 冷却因子\n          coolDown : 0.99,\n          // 分类里如果有样式会覆盖节点默认样式\n          itemStyle: {\n              normal: {\n                  // color: 各异,\n                  label: {\n                      show: false\n                      // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                  },\n                  nodeStyle : {\n                      brushType : 'both',\n                      color : '#f08c2e',\n                      strokeColor : '#5182ab'\n                  },\n                  linkStyle : {\n                      strokeColor : '#5182ab'\n                  }\n              },\n              emphasis: {\n                  // color: 各异,\n                  label: {\n                      show: false\n                      // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                  },\n                  nodeStyle : {},\n                  linkStyle : {}\n              }\n          }\n      },\n      \n      chord : {\n          radius : ['65%', '75%'],\n          center : ['50%', '50%'],\n          padding : 2,\n          sort : 'none',   // can be 'none', 'ascending', 'descending'\n          sortSub : 'none', // can be 'none', 'ascending', 'descending'\n          startAngle : 90,\n          clockWise : false,\n          showScale : false,\n          showScaleText : false,\n          itemStyle : {\n              normal : {\n                  label : {\n                      show : true\n                      // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n                  },\n                  lineStyle : {\n                      width : 0,\n                      color : '#000'\n                  },\n                  chordStyle : {\n                      lineStyle : {\n                          width : 1,\n                          color : '#666'\n                      }\n                  }\n              },\n              emphasis : {\n                  lineStyle : {\n                      width : 0,\n                      color : '#000'\n                  },\n                  chordStyle : {\n                      lineStyle : {\n                          width : 2,\n                          color : '#333'\n                      }\n                  }\n              }\n          }\n      },\n      \n      island: {\n          r: 15,\n          calculateStep: 0.1  // 滚轮可计算步长 0.1 = 10%\n      },\n      \n      markPoint : {\n          symbol: 'pin',         // 标注类型\n          symbolSize: 10,            // 标注大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2\n          //symbolRotate : null, // 标注旋转控制\n          itemStyle: {\n              normal: {\n                  // color: 各异，\n                  // borderColor: 各异,     // 标注边线颜色，优先于color\n                  borderWidth: 2,         // 标注边线线宽，单位px，默认为1\n                  label: {\n                      show: true,\n                      position: 'inside'    // 可选为'left'|'right'|'top'|'bottom'\n                      // textStyle: null    // 默认使用全局文本样式，详见TEXTSTYLE\n                  }\n              },\n              emphasis: {\n                  // color: 各异\n                  label: {\n                      show: true\n                      // position: 'inside'    // 'left'|'right'|'top'|'bottom'\n                      // textStyle: null     // 默认使用全局文本样式，详见TEXTSTYLE\n                  }\n              }\n          }\n      },\n      \n      markLine : {\n          // 标线起始和结束的symbol介绍类型，如果都一样，可以直接传string\n          symbol: ['circle', 'arrow'], \n          // 标线起始和结束的symbol大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2\n          symbolSize: [2, 4],\n          // 标线起始和结束的symbol旋转控制\n          //symbolRotate : null,\n          itemStyle: {\n              normal: {\n                  // color: 各异,           // 标线主色，线色，symbol主色\n                  // borderColor: 随color,       // 标线symbol边框颜色，优先于color\n                  borderWidth: 2,          // 标线symbol边框线宽，单位px，默认为2\n                  label: {\n                      show: false,\n                      // 可选为 'start'|'end'|'left'|'right'|'top'|'bottom'\n                      position: 'inside', \n                      textStyle: {         // 默认使用全局文本样式，详见TEXTSTYLE\n                          color: '#333'\n                      }\n                  },\n                  lineStyle: {\n                      // color: 随borderColor,    // 主色，线色，优先级高于borderColor和color\n                      // width: 随borderWidth,    // 优先于borderWidth\n                      type: 'solid',\n                      shadowColor : 'rgba(0,0,0,0)', //默认透明\n                      shadowBlur: 5,\n                      shadowOffsetX: 3,\n                      shadowOffsetY: 3\n                  }\n              },\n              emphasis: {\n                  // color: 各异\n                  label: {\n                      show: false\n                      // position: 'inside'   // 'left'|'right'|'top'|'bottom'\n                      // textStyle: null    // 默认使用全局文本样式，详见TEXTSTYLE\n                  },\n                  lineStyle : {}\n              }\n          }\n      },\n      \n      textStyle: {\n          decoration: 'none',\n          fontFamily: 'Arial, Verdana, sans-serif',\n          fontFamily2: '微软雅黑',    // IE8- 字体模糊并且不支持不同字体混排，额外指定一份\n          fontSize: 12,\n          fontStyle: 'normal',\n          fontWeight: 'normal'\n      },\n      \n  ### 15.默认标志图形类型列表\n      symbolList : [\n        'circle', 'rectangle', 'triangle', 'diamond',\n        'emptyCircle', 'emptyRectangle', 'emptyTriangle', 'emptyDiamond'\n      ],\n      loadingText : 'Loading...',\n  ### 16.可计算特性配置，孤岛，提示颜色\n      calculable: false,                       // 默认关闭可计算特性\n      calculableColor: 'rgba(255,165,0,0.6)',       // 拖拽提示边框颜色\n      calculableHolderColor: '#ccc',               // 可计算占位提示颜色\n      nameConnector: ' & ',\n      valueConnector: ' : ',\n      animation: true,\n      animationThreshold: 2500,           // 动画元素阀值，产生的图形原素超过2500不出动画\n      addDataAnimation: true,         // 动态数据接口是否开启动画效果\n      animationDuration: 2000,\n      animationEasing: 'ExponentialOut'             //BounceOut\n\n\n## 3. Echars官方案例\n\n+ [Echars官方案例](https://www.echartsjs.com/examples/zh/index.html)\n\n## 4. [Echars社区](https://gallery.echartsjs.com/explore.html)经典模板 \n\n+ [自定义tooltip，实时获取最新geojson数据](https://gallery.echartsjs.com/editor.html?c=xmCAi_XNuJ)\n![](2.jpg)\n+ [中国地图自定义轮播](https://gallery.echartsjs.com/editor.html?c=xPkPpAWqSt)\n![](1.jpg)\n\n+ ......\n\n<!-- ## 5.Echars在Vue项目中的使用 -->\n\n\n\n\n\n\n\n","slug":"Echars中常用方法","published":1,"updated":"2020-05-28T07:51:13.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckari24wv00085sjo9zd2cxt2","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"Echars中常用方法\"><a href=\"#Echars中常用方法\" class=\"headerlink\" title=\"Echars中常用方法\"></a>Echars中常用方法</h1><hr>\n<p><strong>1.什么是Echars?</strong></p>\n<blockquote>\n<p>一个纯JavaScript图表库。<a href=\"https://www.echartsjs.com/zh/index.html\" target=\"_blank\" rel=\"noopener\">ECharts官网</a>，缩写来自Enterprise Charts，商业级数据图表，一个纯Javascript的图表库，可以流畅的运行在PC和移动设备上，兼容当前绝大部分浏览器（IE6/7/8/9/10/11，chrome，firefox，Safari等），底层依赖轻量级的Canvas类库ZRender，提供直观，生动，可交互，可高度个性化定制的数据可视化图表。创新的拖拽重计算、数据视图、值域漫游等特性大大增强了用户体验，赋予了用户对数据进行挖掘、整合的能力。</p>\n</blockquote>\n<h2 id=\"1-Echars术语速查手册-gt\"><a href=\"#1-Echars术语速查手册-gt\" class=\"headerlink\" title=\"1. Echars术语速查手册 -&gt;\"></a>1. Echars术语速查手册 -&gt;</h2><ul>\n<li><a href=\"https://www.echartsjs.com/zh/cheat-sheet.html\" target=\"_blank\" rel=\"noopener\">Echars术语速查手册</a></li>\n</ul>\n<h2 id=\"2-echarts属性的设置（完整大全）\"><a href=\"#2-echarts属性的设置（完整大全）\" class=\"headerlink\" title=\"2. echarts属性的设置（完整大全）\"></a>2. echarts属性的设置（完整大全）</h2><h3 id=\"全图默认背景\"><a href=\"#全图默认背景\" class=\"headerlink\" title=\"全图默认背景\"></a>全图默认背景</h3><pre><code>  // backgroundColor: ‘rgba(0,0,0,0)’,\n  // 默认色板\n  color: [&#39;#ff7f50&#39;,&#39;#87cefa&#39;,&#39;#da70d6&#39;,&#39;#32cd32&#39;,&#39;#6495ed&#39;,\n      &#39;#ff69b4&#39;,&#39;#ba55d3&#39;,&#39;#cd5c5c&#39;,&#39;#ffa500&#39;,&#39;#40e0d0&#39;,\n      &#39;#1e90ff&#39;,&#39;#ff6347&#39;,&#39;#7b68ee&#39;,&#39;#00fa9a&#39;,&#39;#ffd700&#39;,\n      &#39;#6699FF&#39;,&#39;#ff6666&#39;,&#39;#3cb371&#39;,&#39;#b8860b&#39;,&#39;#30e0e0&#39;],</code></pre><h3 id=\"1-图表标题\"><a href=\"#1-图表标题\" class=\"headerlink\" title=\"1.图表标题\"></a>1.图表标题</h3><pre><code>  title: {\n      x: &#39;left&#39;,                // 水平安放位置，默认为左对齐，可选为：\n                        // &#39;center&#39; ¦ &#39;left&#39; ¦ &#39;right&#39;\n                        // ¦ {number}（x坐标，单位px）\n      y: &#39;top&#39;,             // 垂直安放位置，默认为全图顶端，可选为：\n                        // &#39;top&#39; ¦ &#39;bottom&#39; ¦ &#39;center&#39;\n                        // ¦ {number}（y坐标，单位px）\n      //textAlign: null          // 水平对齐方式，默认根据x设置自动调整\n      backgroundColor: &#39;rgba(0,0,0,0)&#39;,\n      borderColor: &#39;#ccc&#39;,          // 标题边框颜色\n      borderWidth: 0,           // 标题边框线宽，单位px，默认为0（无边框）\n      padding: 5,             // 标题内边距，单位px，默认各方向内边距为5，\n                                // 接受数组分别设定上右下左边距，同css\n      itemGap: 10,             // 主副标题纵向间隔，单位px，默认为10，\n      textStyle: {\n          fontSize: 18,\n          fontWeight: &#39;bolder&#39;,\n          color: &#39;#333&#39;                             // 主标题文字颜色\n      },\n      subtextStyle: {\n          color: &#39;#aaa&#39;                            // 副标题文字颜色\n      }\n  },</code></pre><h3 id=\"2-图例\"><a href=\"#2-图例\" class=\"headerlink\" title=\"2.图例\"></a>2.图例</h3><pre><code>  legend: {\n      orient: &#39;horizontal&#39;,          // 布局方式，默认为水平布局，可选为：\n                        // &#39;horizontal&#39; ¦ &#39;vertical&#39;\n      x: &#39;center&#39;,                // 水平安放位置，默认为全图居中，可选为：\n                                // &#39;center&#39; ¦ &#39;left&#39; ¦ &#39;right&#39;\n                        // ¦ {number}（x坐标，单位px）\n      y: &#39;top&#39;,              // 垂直安放位置，默认为全图顶端，可选为：\n                        // &#39;top&#39; ¦ &#39;bottom&#39; ¦ &#39;center&#39;\n                        // ¦ {number}（y坐标，单位px）\n      backgroundColor: &#39;rgba(0,0,0,0)&#39;,\n      borderColor: &#39;#ccc&#39;,            // 图例边框颜色\n      borderWidth: 0,                // 图例边框线宽，单位px，默认为0（无边框）\n      padding: 5,                  // 图例内边距，单位px，默认各方向内边距为5，\n                                // 接受数组分别设定上右下左边距，同css\n      itemGap: 10,              // 各个item之间的间隔，单位px，默认为10，\n                          // 横向布局时为水平间隔，纵向布局时为纵向间隔\n      itemWidth: 20,             // 图例图形宽度\n      itemHeight: 14,            // 图例图形高度\n      textStyle: {\n          color: &#39;#333&#39;                              // 图例文字颜色\n      }\n  },</code></pre><h3 id=\"3-值域\"><a href=\"#3-值域\" class=\"headerlink\" title=\"3.值域\"></a>3.值域</h3><pre><code>  dataRange: {\n      orient: &#39;vertical&#39;,             // 布局方式，默认为垂直布局，可选为：\n                          // &#39;horizontal&#39; ¦ &#39;vertical&#39;\n      x: &#39;left&#39;,                   // 水平安放位置，默认为全图左对齐，可选为：\n                          // &#39;center&#39; ¦ &#39;left&#39; ¦ &#39;right&#39;\n                          // ¦ {number}（x坐标，单位px）\n      y: &#39;bottom&#39;,                  // 垂直安放位置，默认为全图底部，可选为：\n                          // &#39;top&#39; ¦ &#39;bottom&#39; ¦ &#39;center&#39;\n                          // ¦ {number}（y坐标，单位px）\n      backgroundColor: &#39;rgba(0,0,0,0)&#39;,\n      borderColor: &#39;#ccc&#39;,             // 值域边框颜色\n      borderWidth: 0,                 // 值域边框线宽，单位px，默认为0（无边框）\n      padding: 5,                    // 值域内边距，单位px，默认各方向内边距为5，\n                          // 接受数组分别设定上右下左边距，同css\n      itemGap: 10,               // 各个item之间的间隔，单位px，默认为10，\n                          // 横向布局时为水平间隔，纵向布局时为纵向间隔\n      itemWidth: 20,             // 值域图形宽度，线性渐变水平布局宽度为该值 * 10\n      itemHeight: 14,            // 值域图形高度，线性渐变垂直布局高度为该值 * 10\n      splitNumber: 5,            // 分割段数，默认为5，为0时为线性渐变\n      color:[&#39;#1e90ff&#39;,&#39;#f0ffff&#39;],//颜色\n      //text:[&#39;高&#39;,&#39;低&#39;],              // 文本，默认为数值文本\n      textStyle: {\n          color: &#39;#333&#39;                                // 值域文字颜色\n      }\n  },\n\n  toolbox: {\n      orient: &#39;horizontal&#39;,            // 布局方式，默认为水平布局，可选为：\n                          // &#39;horizontal&#39; ¦ &#39;vertical&#39;\n      x: &#39;right&#39;,              // 水平安放位置，默认为全图右对齐，可选为：\n                          // &#39;center&#39; ¦ &#39;left&#39; ¦ &#39;right&#39;\n                          // ¦ {number}（x坐标，单位px）\n      y: &#39;top&#39;,               // 垂直安放位置，默认为全图顶端，可选为：\n                          // &#39;top&#39; ¦ &#39;bottom&#39; ¦ &#39;center&#39;\n                          // ¦ {number}（y坐标，单位px）\n      color : [&#39;#1e90ff&#39;,&#39;#22bb22&#39;,&#39;#4b0082&#39;,&#39;#d2691e&#39;],\n      backgroundColor: &#39;rgba(0,0,0,0)&#39;,    // 工具箱背景颜色\n      borderColor: &#39;#ccc&#39;,             // 工具箱边框颜色\n      borderWidth: 0,                 // 工具箱边框线宽，单位px，默认为0（无边框）\n      padding: 5,                    // 工具箱内边距，单位px，默认各方向内边距为5，\n                                  // 接受数组分别设定上右下左边距，同css\n      itemGap: 10,                  // 各个item之间的间隔，单位px，默认为10，\n                                  // 横向布局时为水平间隔，纵向布局时为纵向间隔\n      itemSize: 16,              // 工具箱图形宽度\n      featureImageIcon : {},            // 自定义图片icon\n      featureTitle : {\n          mark : &#39;辅助线开关&#39;,\n          markUndo : &#39;删除辅助线&#39;,\n          markClear : &#39;清空辅助线&#39;,\n          dataZoom : &#39;区域缩放&#39;,\n          dataZoomReset : &#39;区域缩放后退&#39;,\n          dataView : &#39;数据视图&#39;,\n          lineChart : &#39;折线图切换&#39;,\n          barChart : &#39;柱形图切换&#39;,\n          restore : &#39;还原&#39;,\n          saveAsImage : &#39;保存为图片&#39;\n      }\n  },</code></pre><h3 id=\"4-提示框\"><a href=\"#4-提示框\" class=\"headerlink\" title=\"4.提示框\"></a>4.提示框</h3><pre><code>  tooltip: {\n      trigger: &#39;item&#39;,           // 触发类型，默认数据触发，见下图，可选为：&#39;item&#39; ¦ &#39;axis&#39;\n      showDelay: 20,             // 显示延迟，添加显示延迟可以避免频繁切换，单位ms\n      hideDelay: 100,            // 隐藏延迟，单位ms\n      transitionDuration : 0.4,         // 动画变换时间，单位s\n      backgroundColor: &#39;rgba(0,0,0,0.7)&#39;,  // 提示背景颜色，默认为透明度为0.7的黑色\n      borderColor: &#39;#333&#39;,            // 提示边框颜色\n      borderRadius: 4,                // 提示边框圆角，单位px，默认为4\n      borderWidth: 0,                // 提示边框线宽，单位px，默认为0（无边框）\n      padding: 5,                   // 提示内边距，单位px，默认各方向内边距为5，\n                                  // 接受数组分别设定上右下左边距，同css\n      axisPointer : {                 // 坐标轴指示器，坐标轴触发有效\n          type : &#39;line&#39;,         // 默认为直线，可选为：&#39;line&#39; | &#39;shadow&#39;\n          lineStyle : {          // 直线指示器样式设置\n              color: &#39;#48b&#39;,\n              width: 2,\n              type: &#39;solid&#39;\n          },\n          shadowStyle : {              // 阴影指示器样式设置\n              width: &#39;auto&#39;,         // 阴影大小\n              color: &#39;rgba(150,150,150,0.3)&#39;  // 阴影颜色\n          }\n      },\n      textStyle: {\n          color: &#39;#fff&#39;\n      }\n  },</code></pre><h3 id=\"5-区域缩放控制器\"><a href=\"#5-区域缩放控制器\" class=\"headerlink\" title=\"5.区域缩放控制器\"></a>5.区域缩放控制器</h3><pre><code>  dataZoom: {\n      orient: &#39;horizontal&#39;,         // 布局方式，默认为水平布局，可选为：\n                              // &#39;horizontal&#39; ¦ &#39;vertical&#39;\n      // x: {number},              // 水平安放位置，默认为根据grid参数适配，可选为：\n                              // {number}（x坐标，单位px）\n      // y: {number},              // 垂直安放位置，默认为根据grid参数适配，可选为：\n                              // {number}（y坐标，单位px）\n      // width: {number},           // 指定宽度，横向布局时默认为根据grid参数适配\n      // height: {number},          // 指定高度，纵向布局时默认为根据grid参数适配\n      backgroundColor: &#39;rgba(0,0,0,0)&#39;,    // 背景颜色\n      dataBackgroundColor: &#39;#eee&#39;,       // 数据背景颜色\n      fillerColor: &#39;rgba(144,197,237,0.2)&#39;, // 填充颜色\n      handleColor: &#39;rgba(70,130,180,0.8)&#39;       // 手柄颜色\n  },</code></pre><h3 id=\"6-网格\"><a href=\"#6-网格\" class=\"headerlink\" title=\"6.网格\"></a>6.网格</h3><pre><code>  grid: {\n      x: 80,\n      y: 60,\n      x2: 80,\n      y2: 60,\n      // width: {totalWidth} - x - x2,\n      // height: {totalHeight} - y - y2,\n      backgroundColor: &#39;rgba(0,0,0,0)&#39;,\n      borderWidth: 1,\n      borderColor: &#39;#ccc&#39;\n  },</code></pre><h3 id=\"7-类目轴\"><a href=\"#7-类目轴\" class=\"headerlink\" title=\"7.类目轴\"></a>7.类目轴</h3><pre><code>  categoryAxis: {\n      position: &#39;bottom&#39;,        // 位置\n      nameLocation: &#39;end&#39;,      // 坐标轴名字位置，支持&#39;start&#39; | &#39;end&#39;\n      boundaryGap: true,     // 类目起始和结束两端空白策略\n      axisLine: {            // 坐标轴线\n          show: true,         // 默认显示，属性show控制显示与否\n          lineStyle: {        // 属性lineStyle控制线条样式\n              color: &#39;#48b&#39;,\n              width: 2,\n              type: &#39;solid&#39;\n          }\n      },\n      axisTick: {            // 坐标轴小标记\n          show: true,       // 属性show控制显示与否，默认不显示\n          interval: &#39;auto&#39;,\n          // onGap: null,\n          inside : false,        // 控制小标记是否在grid里\n          length :5,         // 属性length控制线长\n          lineStyle: {       // 属性lineStyle控制线条样式\n              color: &#39;#333&#39;,\n              width: 1\n          }\n      },\n      axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel\n          show: true,\n          interval: &#39;auto&#39;,\n          rotate: 0,\n          margin: 8,\n          // formatter: null,\n          textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n              color: &#39;#333&#39;\n          }\n      },\n      splitLine: {                // 分隔线\n          show: true,        // 默认显示，属性show控制显示与否\n          // onGap: null,\n          lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式\n              color: [&#39;#ccc&#39;],\n              width: 1,\n              type: &#39;solid&#39;\n          }\n      },\n      splitArea: {                // 分隔区域\n          show: false,       // 默认不显示，属性show控制显示与否\n          // onGap: null,\n          areaStyle: {        // 属性areaStyle（详见areaStyle）控制区域样式\n              color: [&#39;rgba(250,250,250,0.3)&#39;,&#39;rgba(200,200,200,0.3)&#39;]\n          }\n      }\n  },</code></pre><h3 id=\"8-数值型坐标轴默认参数\"><a href=\"#8-数值型坐标轴默认参数\" class=\"headerlink\" title=\"8.数值型坐标轴默认参数\"></a>8.数值型坐标轴默认参数</h3><pre><code>  valueAxis: {\n      position: &#39;left&#39;,      // 位置\n      nameLocation: &#39;end&#39;,     // 坐标轴名字位置，支持&#39;start&#39; | &#39;end&#39;\n      nameTextStyle: {},     // 坐标轴文字样式，默认取全局样式\n      boundaryGap: [0, 0],    // 数值起始和结束两端空白策略\n      splitNumber: 5,        // 分割段数，默认为5\n      axisLine: {             // 坐标轴线\n          show: true,      // 默认显示，属性show控制显示与否\n          lineStyle: {      // 属性lineStyle控制线条样式\n              color: &#39;#48b&#39;,\n              width: 2,\n              type: &#39;solid&#39;\n          }\n      },\n      axisTick: {            // 坐标轴小标记\n          show: false,       // 属性show控制显示与否，默认不显示\n          inside : false,      // 控制小标记是否在grid里\n          length :5,          // 属性length控制线长\n          lineStyle: {       // 属性lineStyle控制线条样式\n              color: &#39;#333&#39;,\n              width: 1\n          }\n      },\n      axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel\n          show: true,\n          rotate: 0,\n          margin: 8,\n          // formatter: null,\n          textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n              color: &#39;#333&#39;\n          }\n      },\n      splitLine: {                // 分隔线\n          show: true,        // 默认显示，属性show控制显示与否\n          lineStyle: {          // 属性lineStyle（详见lineStyle）控制线条样式\n              color: [&#39;#ccc&#39;],\n              width: 1,\n              type: &#39;solid&#39;\n          }\n      },\n      splitArea: {                // 分隔区域\n          show: false,       // 默认不显示，属性show控制显示与否\n          areaStyle: {       // 属性areaStyle（详见areaStyle）控制区域样式\n              color: [&#39;rgba(250,250,250,0.3)&#39;,&#39;rgba(200,200,200,0.3)&#39;]\n          }\n      }\n  },\n\n  polar : {\n      center : [&#39;50%&#39;, &#39;50%&#39;],    // 默认全局居中\n      radius : &#39;75%&#39;,\n      startAngle : 90,\n      splitNumber : 5,\n      name : {\n          show: true,\n          textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n              color: &#39;#333&#39;\n          }\n      },\n      axisLine: {            // 坐标轴线\n          show: true,         // 默认显示，属性show控制显示与否\n          lineStyle: {        // 属性lineStyle控制线条样式\n              color: &#39;#ccc&#39;,\n              width: 1,\n              type: &#39;solid&#39;\n          }\n      },\n      axisLabel: {                // 坐标轴文本标签，详见axis.axisLabel\n          show: false,\n          textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n              color: &#39;#333&#39;\n          }\n      },\n      splitArea : {\n          show : true,\n          areaStyle : {\n              color: [&#39;rgba(250,250,250,0.3)&#39;,&#39;rgba(200,200,200,0.3)&#39;]\n          }\n      },\n      splitLine : {\n          show : true,\n          lineStyle : {\n              width : 1,\n              color : &#39;#ccc&#39;\n          }\n      }\n  },</code></pre><h3 id=\"9-柱形图默认参数\"><a href=\"#9-柱形图默认参数\" class=\"headerlink\" title=\"9.柱形图默认参数\"></a>9.柱形图默认参数</h3><pre><code>  bar: {\n      barMinHeight: 0,            // 最小高度改为0\n      // barWidth: null,        // 默认自适应\n      barGap: &#39;30%&#39;,           // 柱间距离，默认为柱形宽度的30%，可设固定值\n      barCategoryGap : &#39;20%&#39;,   // 类目间柱形距离，默认为类目间距的20%，可设固定值\n      itemStyle: {\n          normal: {\n              // color: &#39;各异&#39;,\n              barBorderColor: &#39;#fff&#39;,         // 柱条边线\n              barBorderRadius: 0,            // 柱条边线圆角，单位px，默认为0\n              barBorderWidth: 1,             // 柱条边线线宽，单位px，默认为1\n              label: {\n                  show: false\n                                          // position: 默认自适应，水平布局为&#39;top&#39;，垂直布局为&#39;right&#39;，可选为\n                                          // &#39;inside&#39;|&#39;left&#39;|&#39;right&#39;|&#39;top&#39;|&#39;bottom&#39;\n                                          // textStyle: null // 默认使用全局文本样式，详见TEXTSTYLE\n              }\n          },\n          emphasis: {\n              // color: &#39;各异&#39;,\n              barBorderColor: &#39;rgba(0,0,0,0)&#39;,            // 柱条边线\n              barBorderRadius: 0,                // 柱条边线圆角，单位px，默认为0\n              barBorderWidth: 1,                     // 柱条边线线宽，单位px，默认为1\n              label: {\n                  show: false\n                  // position: 默认自适应，水平布局为&#39;top&#39;，垂直布局为&#39;right&#39;，可选为\n                  //           &#39;inside&#39;|&#39;left&#39;|&#39;right&#39;|&#39;top&#39;|&#39;bottom&#39;\n                  // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n              }\n          }\n      }\n  },</code></pre><h3 id=\"10-折线图默认参数\"><a href=\"#10-折线图默认参数\" class=\"headerlink\" title=\"10.折线图默认参数\"></a>10.折线图默认参数</h3><pre><code>  line: {\n      itemStyle: {\n          normal: {\n              // color: 各异,\n              label: {\n                  show: false\n                  // position: 默认自适应，水平布局为&#39;top&#39;，垂直布局为&#39;right&#39;，可选为\n                  //           &#39;inside&#39;|&#39;left&#39;|&#39;right&#39;|&#39;top&#39;|&#39;bottom&#39;\n                  // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n              },\n              lineStyle: {\n                  width: 2,\n                  type: &#39;solid&#39;,\n                  shadowColor : &#39;rgba(0,0,0,0)&#39;, //默认透明\n                  shadowBlur: 5,\n                  shadowOffsetX: 3,\n                  shadowOffsetY: 3\n              }\n          },\n          emphasis: {\n              // color: 各异,\n              label: {\n                  show: false\n                  // position: 默认自适应，水平布局为&#39;top&#39;，垂直布局为&#39;right&#39;，可选为\n                  //           &#39;inside&#39;|&#39;left&#39;|&#39;right&#39;|&#39;top&#39;|&#39;bottom&#39;\n                  // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n              }\n          }\n      },\n      //smooth : false,\n      //symbol: null,             // 拐点图形类型\n      symbolSize: 2,          // 拐点图形大小\n      //symbolRotate : null,       // 拐点图形旋转控制\n      showAllSymbol: false                   // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）\n  },</code></pre><h3 id=\"11-K线图默认参数\"><a href=\"#11-K线图默认参数\" class=\"headerlink\" title=\"11.K线图默认参数\"></a>11.K线图默认参数</h3><pre><code>  k: {\n      // barWidth : null              // 默认自适应\n      // barMaxWidth : null           // 默认自适应\n      itemStyle: {\n          normal: {\n              color: &#39;#fff&#39;,      // 阳线填充颜色\n              color0: &#39;#00aa11&#39;,  // 阴线填充颜色\n              lineStyle: {\n                  width: 1,\n                  color: &#39;#ff3200&#39;,    // 阳线边框颜色\n                  color0: &#39;#00aa11&#39;          // 阴线边框颜色\n              }\n          },\n          emphasis: {\n              // color: 各异,\n              // color0: 各异\n          }\n      }\n  },</code></pre><h3 id=\"12-散点图默认参数\"><a href=\"#12-散点图默认参数\" class=\"headerlink\" title=\"12.散点图默认参数\"></a>12.散点图默认参数</h3><pre><code>  scatter: {\n      //symbol: null,         // 图形类型\n      symbolSize: 4,       // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2\n      //symbolRotate : null,   // 图形旋转控制\n      large: false,        // 大规模散点图\n      largeThreshold: 2000,   // 大规模阀值，large为true且数据量&gt;largeThreshold才启用大规模模式\n      itemStyle: {\n          normal: {\n              // color: 各异,\n              label: {\n                  show: false\n                  // position: 默认自适应，水平布局为&#39;top&#39;，垂直布局为&#39;right&#39;，可选为\n                  //           &#39;inside&#39;|&#39;left&#39;|&#39;right&#39;|&#39;top&#39;|&#39;bottom&#39;\n                  // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n              }\n          },\n          emphasis: {\n              // color: &#39;各异&#39;\n              label: {\n                  show: false\n                  // position: 默认自适应，水平布局为&#39;top&#39;，垂直布局为&#39;right&#39;，可选为\n                  //           &#39;inside&#39;|&#39;left&#39;|&#39;right&#39;|&#39;top&#39;|&#39;bottom&#39;\n                  // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n              }\n          }\n      }\n  },</code></pre><h3 id=\"13-雷达图默认参数\"><a href=\"#13-雷达图默认参数\" class=\"headerlink\" title=\"13.雷达图默认参数\"></a>13.雷达图默认参数</h3><pre><code>  radar : {\n      itemStyle: {\n          normal: {\n              // color: 各异,\n              label: {\n                  show: false\n              },\n              lineStyle: {\n                  width: 2,\n                  type: &#39;solid&#39;\n              }\n          },\n          emphasis: {\n              // color: 各异,\n              label: {\n                  show: false\n              }\n          }\n      },\n      //symbol: null,          // 拐点图形类型\n      symbolSize: 2          // 可计算特性参数，空数据拖拽提示图形大小\n      //symbolRotate : null,    // 图形旋转控制\n  },</code></pre><h3 id=\"14-饼图默认参数\"><a href=\"#14-饼图默认参数\" class=\"headerlink\" title=\"14.饼图默认参数\"></a>14.饼图默认参数</h3><pre><code>  pie: {\n      center : [&#39;50%&#39;, &#39;50%&#39;],          // 默认全局居中\n      radius : [0, &#39;75%&#39;],\n      clockWise : false,             // 默认逆时针\n      startAngle: 90,\n      minAngle: 0,                 // 最小角度改为0\n      selectedOffset: 10,         // 选中是扇区偏移量\n      itemStyle: {\n          normal: {\n              // color: 各异,\n              borderColor: &#39;#fff&#39;,\n              borderWidth: 1,\n              label: {\n                  show: true,\n                  position: &#39;outer&#39;\n                  // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n              },\n              labelLine: {\n                  show: true,\n                  length: 20,\n                  lineStyle: {\n                      // color: 各异,\n                      width: 1,\n                      type: &#39;solid&#39;\n                  }\n              }\n          },\n          emphasis: {\n              // color: 各异,\n              borderColor: &#39;rgba(0,0,0,0)&#39;,\n              borderWidth: 1,\n              label: {\n                  show: false\n                  // position: &#39;outer&#39;\n                  // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n              },\n              labelLine: {\n                  show: false,\n                  length: 20,\n                  lineStyle: {\n                      // color: 各异,\n                      width: 1,\n                      type: &#39;solid&#39;\n                  }\n              }\n          }\n      }\n  },\n\n  map: {\n      mapType: &#39;china&#39;,   // 各省的mapType暂时都用中文\n      mapLocation: {\n          x : &#39;center&#39;,\n          y : &#39;center&#39;\n          // width    // 自适应\n          // height   // 自适应\n      },\n      showLegendSymbol : true,       // 显示图例颜色标识（系列标识的小圆点），存在legend时生效\n      itemStyle: {\n          normal: {\n              // color: 各异,\n              borderColor: &#39;#fff&#39;,\n              borderWidth: 1,\n              areaStyle: {\n                  color: &#39;#ccc&#39;   //rgba(135,206,250,0.8)\n              },\n              label: {\n                  show: false,\n                  textStyle: {\n                      color: &#39;rgba(139,69,19,1)&#39;\n                  }\n              }\n          },\n          emphasis: {                // 也是选中样式\n              // color: 各异,\n              borderColor: &#39;rgba(0,0,0,0)&#39;,\n              borderWidth: 1,\n              areaStyle: {\n                  color: &#39;rgba(255,215,0,0.8)&#39;\n              },\n              label: {\n                  show: false,\n                  textStyle: {\n                      color: &#39;rgba(139,69,19,1)&#39;\n                  }\n              }\n          }\n      }\n  },\n\n  force : {\n      // 数据map到圆的半径的最小值和最大值\n      minRadius : 10,\n      maxRadius : 20,\n      density : 1.0,\n      attractiveness : 1.0,\n      // 初始化的随机大小位置\n      initSize : 300,\n      // 向心力因子，越大向心力越大\n      centripetal : 1,\n      // 冷却因子\n      coolDown : 0.99,\n      // 分类里如果有样式会覆盖节点默认样式\n      itemStyle: {\n          normal: {\n              // color: 各异,\n              label: {\n                  show: false\n                  // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n              },\n              nodeStyle : {\n                  brushType : &#39;both&#39;,\n                  color : &#39;#f08c2e&#39;,\n                  strokeColor : &#39;#5182ab&#39;\n              },\n              linkStyle : {\n                  strokeColor : &#39;#5182ab&#39;\n              }\n          },\n          emphasis: {\n              // color: 各异,\n              label: {\n                  show: false\n                  // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n              },\n              nodeStyle : {},\n              linkStyle : {}\n          }\n      }\n  },\n\n  chord : {\n      radius : [&#39;65%&#39;, &#39;75%&#39;],\n      center : [&#39;50%&#39;, &#39;50%&#39;],\n      padding : 2,\n      sort : &#39;none&#39;,   // can be &#39;none&#39;, &#39;ascending&#39;, &#39;descending&#39;\n      sortSub : &#39;none&#39;, // can be &#39;none&#39;, &#39;ascending&#39;, &#39;descending&#39;\n      startAngle : 90,\n      clockWise : false,\n      showScale : false,\n      showScaleText : false,\n      itemStyle : {\n          normal : {\n              label : {\n                  show : true\n                  // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n              },\n              lineStyle : {\n                  width : 0,\n                  color : &#39;#000&#39;\n              },\n              chordStyle : {\n                  lineStyle : {\n                      width : 1,\n                      color : &#39;#666&#39;\n                  }\n              }\n          },\n          emphasis : {\n              lineStyle : {\n                  width : 0,\n                  color : &#39;#000&#39;\n              },\n              chordStyle : {\n                  lineStyle : {\n                      width : 2,\n                      color : &#39;#333&#39;\n                  }\n              }\n          }\n      }\n  },\n\n  island: {\n      r: 15,\n      calculateStep: 0.1  // 滚轮可计算步长 0.1 = 10%\n  },\n\n  markPoint : {\n      symbol: &#39;pin&#39;,         // 标注类型\n      symbolSize: 10,            // 标注大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2\n      //symbolRotate : null, // 标注旋转控制\n      itemStyle: {\n          normal: {\n              // color: 各异，\n              // borderColor: 各异,     // 标注边线颜色，优先于color\n              borderWidth: 2,         // 标注边线线宽，单位px，默认为1\n              label: {\n                  show: true,\n                  position: &#39;inside&#39;    // 可选为&#39;left&#39;|&#39;right&#39;|&#39;top&#39;|&#39;bottom&#39;\n                  // textStyle: null    // 默认使用全局文本样式，详见TEXTSTYLE\n              }\n          },\n          emphasis: {\n              // color: 各异\n              label: {\n                  show: true\n                  // position: &#39;inside&#39;    // &#39;left&#39;|&#39;right&#39;|&#39;top&#39;|&#39;bottom&#39;\n                  // textStyle: null     // 默认使用全局文本样式，详见TEXTSTYLE\n              }\n          }\n      }\n  },\n\n  markLine : {\n      // 标线起始和结束的symbol介绍类型，如果都一样，可以直接传string\n      symbol: [&#39;circle&#39;, &#39;arrow&#39;], \n      // 标线起始和结束的symbol大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2\n      symbolSize: [2, 4],\n      // 标线起始和结束的symbol旋转控制\n      //symbolRotate : null,\n      itemStyle: {\n          normal: {\n              // color: 各异,           // 标线主色，线色，symbol主色\n              // borderColor: 随color,       // 标线symbol边框颜色，优先于color\n              borderWidth: 2,          // 标线symbol边框线宽，单位px，默认为2\n              label: {\n                  show: false,\n                  // 可选为 &#39;start&#39;|&#39;end&#39;|&#39;left&#39;|&#39;right&#39;|&#39;top&#39;|&#39;bottom&#39;\n                  position: &#39;inside&#39;, \n                  textStyle: {         // 默认使用全局文本样式，详见TEXTSTYLE\n                      color: &#39;#333&#39;\n                  }\n              },\n              lineStyle: {\n                  // color: 随borderColor,    // 主色，线色，优先级高于borderColor和color\n                  // width: 随borderWidth,    // 优先于borderWidth\n                  type: &#39;solid&#39;,\n                  shadowColor : &#39;rgba(0,0,0,0)&#39;, //默认透明\n                  shadowBlur: 5,\n                  shadowOffsetX: 3,\n                  shadowOffsetY: 3\n              }\n          },\n          emphasis: {\n              // color: 各异\n              label: {\n                  show: false\n                  // position: &#39;inside&#39;   // &#39;left&#39;|&#39;right&#39;|&#39;top&#39;|&#39;bottom&#39;\n                  // textStyle: null    // 默认使用全局文本样式，详见TEXTSTYLE\n              },\n              lineStyle : {}\n          }\n      }\n  },\n\n  textStyle: {\n      decoration: &#39;none&#39;,\n      fontFamily: &#39;Arial, Verdana, sans-serif&#39;,\n      fontFamily2: &#39;微软雅黑&#39;,    // IE8- 字体模糊并且不支持不同字体混排，额外指定一份\n      fontSize: 12,\n      fontStyle: &#39;normal&#39;,\n      fontWeight: &#39;normal&#39;\n  },</code></pre><h3 id=\"15-默认标志图形类型列表\"><a href=\"#15-默认标志图形类型列表\" class=\"headerlink\" title=\"15.默认标志图形类型列表\"></a>15.默认标志图形类型列表</h3><pre><code>  symbolList : [\n    &#39;circle&#39;, &#39;rectangle&#39;, &#39;triangle&#39;, &#39;diamond&#39;,\n    &#39;emptyCircle&#39;, &#39;emptyRectangle&#39;, &#39;emptyTriangle&#39;, &#39;emptyDiamond&#39;\n  ],\n  loadingText : &#39;Loading...&#39;,</code></pre><h3 id=\"16-可计算特性配置，孤岛，提示颜色\"><a href=\"#16-可计算特性配置，孤岛，提示颜色\" class=\"headerlink\" title=\"16.可计算特性配置，孤岛，提示颜色\"></a>16.可计算特性配置，孤岛，提示颜色</h3><pre><code>  calculable: false,                       // 默认关闭可计算特性\n  calculableColor: &#39;rgba(255,165,0,0.6)&#39;,       // 拖拽提示边框颜色\n  calculableHolderColor: &#39;#ccc&#39;,               // 可计算占位提示颜色\n  nameConnector: &#39; &amp; &#39;,\n  valueConnector: &#39; : &#39;,\n  animation: true,\n  animationThreshold: 2500,           // 动画元素阀值，产生的图形原素超过2500不出动画\n  addDataAnimation: true,         // 动态数据接口是否开启动画效果\n  animationDuration: 2000,\n  animationEasing: &#39;ExponentialOut&#39;             //BounceOut</code></pre><h2 id=\"3-Echars官方案例\"><a href=\"#3-Echars官方案例\" class=\"headerlink\" title=\"3. Echars官方案例\"></a>3. Echars官方案例</h2><ul>\n<li><a href=\"https://www.echartsjs.com/examples/zh/index.html\" target=\"_blank\" rel=\"noopener\">Echars官方案例</a></li>\n</ul>\n<h2 id=\"4-Echars社区经典模板\"><a href=\"#4-Echars社区经典模板\" class=\"headerlink\" title=\"4. Echars社区经典模板\"></a>4. <a href=\"https://gallery.echartsjs.com/explore.html\" target=\"_blank\" rel=\"noopener\">Echars社区</a>经典模板</h2><ul>\n<li><p><a href=\"https://gallery.echartsjs.com/editor.html?c=xmCAi_XNuJ\" target=\"_blank\" rel=\"noopener\">自定义tooltip，实时获取最新geojson数据</a><br><img src=\"2.jpg\" alt></p>\n</li>\n<li><p><a href=\"https://gallery.echartsjs.com/editor.html?c=xPkPpAWqSt\" target=\"_blank\" rel=\"noopener\">中国地图自定义轮播</a><br><img src=\"1.jpg\" alt></p>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<!-- ## 5.Echars在Vue项目中的使用 -->\n\n\n\n\n\n\n\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"Echars中常用方法\"><a href=\"#Echars中常用方法\" class=\"headerlink\" title=\"Echars中常用方法\"></a>Echars中常用方法</h1><hr>\n<p><strong>1.什么是Echars?</strong></p>\n<blockquote>\n<p>一个纯JavaScript图表库。<a href=\"https://www.echartsjs.com/zh/index.html\" target=\"_blank\" rel=\"noopener\">ECharts官网</a>，缩写来自Enterprise Charts，商业级数据图表，一个纯Javascript的图表库，可以流畅的运行在PC和移动设备上，兼容当前绝大部分浏览器（IE6/7/8/9/10/11，chrome，firefox，Safari等），底层依赖轻量级的Canvas类库ZRender，提供直观，生动，可交互，可高度个性化定制的数据可视化图表。创新的拖拽重计算、数据视图、值域漫游等特性大大增强了用户体验，赋予了用户对数据进行挖掘、整合的能力。</p>\n</blockquote>\n<h2 id=\"1-Echars术语速查手册-gt\"><a href=\"#1-Echars术语速查手册-gt\" class=\"headerlink\" title=\"1. Echars术语速查手册 -&gt;\"></a>1. Echars术语速查手册 -&gt;</h2><ul>\n<li><a href=\"https://www.echartsjs.com/zh/cheat-sheet.html\" target=\"_blank\" rel=\"noopener\">Echars术语速查手册</a></li>\n</ul>\n<h2 id=\"2-echarts属性的设置（完整大全）\"><a href=\"#2-echarts属性的设置（完整大全）\" class=\"headerlink\" title=\"2. echarts属性的设置（完整大全）\"></a>2. echarts属性的设置（完整大全）</h2><h3 id=\"全图默认背景\"><a href=\"#全图默认背景\" class=\"headerlink\" title=\"全图默认背景\"></a>全图默认背景</h3><pre><code>  // backgroundColor: ‘rgba(0,0,0,0)’,\n  // 默认色板\n  color: [&#39;#ff7f50&#39;,&#39;#87cefa&#39;,&#39;#da70d6&#39;,&#39;#32cd32&#39;,&#39;#6495ed&#39;,\n      &#39;#ff69b4&#39;,&#39;#ba55d3&#39;,&#39;#cd5c5c&#39;,&#39;#ffa500&#39;,&#39;#40e0d0&#39;,\n      &#39;#1e90ff&#39;,&#39;#ff6347&#39;,&#39;#7b68ee&#39;,&#39;#00fa9a&#39;,&#39;#ffd700&#39;,\n      &#39;#6699FF&#39;,&#39;#ff6666&#39;,&#39;#3cb371&#39;,&#39;#b8860b&#39;,&#39;#30e0e0&#39;],</code></pre><h3 id=\"1-图表标题\"><a href=\"#1-图表标题\" class=\"headerlink\" title=\"1.图表标题\"></a>1.图表标题</h3><pre><code>  title: {\n      x: &#39;left&#39;,                // 水平安放位置，默认为左对齐，可选为：\n                        // &#39;center&#39; ¦ &#39;left&#39; ¦ &#39;right&#39;\n                        // ¦ {number}（x坐标，单位px）\n      y: &#39;top&#39;,             // 垂直安放位置，默认为全图顶端，可选为：\n                        // &#39;top&#39; ¦ &#39;bottom&#39; ¦ &#39;center&#39;\n                        // ¦ {number}（y坐标，单位px）\n      //textAlign: null          // 水平对齐方式，默认根据x设置自动调整\n      backgroundColor: &#39;rgba(0,0,0,0)&#39;,\n      borderColor: &#39;#ccc&#39;,          // 标题边框颜色\n      borderWidth: 0,           // 标题边框线宽，单位px，默认为0（无边框）\n      padding: 5,             // 标题内边距，单位px，默认各方向内边距为5，\n                                // 接受数组分别设定上右下左边距，同css\n      itemGap: 10,             // 主副标题纵向间隔，单位px，默认为10，\n      textStyle: {\n          fontSize: 18,\n          fontWeight: &#39;bolder&#39;,\n          color: &#39;#333&#39;                             // 主标题文字颜色\n      },\n      subtextStyle: {\n          color: &#39;#aaa&#39;                            // 副标题文字颜色\n      }\n  },</code></pre><h3 id=\"2-图例\"><a href=\"#2-图例\" class=\"headerlink\" title=\"2.图例\"></a>2.图例</h3><pre><code>  legend: {\n      orient: &#39;horizontal&#39;,          // 布局方式，默认为水平布局，可选为：\n                        // &#39;horizontal&#39; ¦ &#39;vertical&#39;\n      x: &#39;center&#39;,                // 水平安放位置，默认为全图居中，可选为：\n                                // &#39;center&#39; ¦ &#39;left&#39; ¦ &#39;right&#39;\n                        // ¦ {number}（x坐标，单位px）\n      y: &#39;top&#39;,              // 垂直安放位置，默认为全图顶端，可选为：\n                        // &#39;top&#39; ¦ &#39;bottom&#39; ¦ &#39;center&#39;\n                        // ¦ {number}（y坐标，单位px）\n      backgroundColor: &#39;rgba(0,0,0,0)&#39;,\n      borderColor: &#39;#ccc&#39;,            // 图例边框颜色\n      borderWidth: 0,                // 图例边框线宽，单位px，默认为0（无边框）\n      padding: 5,                  // 图例内边距，单位px，默认各方向内边距为5，\n                                // 接受数组分别设定上右下左边距，同css\n      itemGap: 10,              // 各个item之间的间隔，单位px，默认为10，\n                          // 横向布局时为水平间隔，纵向布局时为纵向间隔\n      itemWidth: 20,             // 图例图形宽度\n      itemHeight: 14,            // 图例图形高度\n      textStyle: {\n          color: &#39;#333&#39;                              // 图例文字颜色\n      }\n  },</code></pre><h3 id=\"3-值域\"><a href=\"#3-值域\" class=\"headerlink\" title=\"3.值域\"></a>3.值域</h3><pre><code>  dataRange: {\n      orient: &#39;vertical&#39;,             // 布局方式，默认为垂直布局，可选为：\n                          // &#39;horizontal&#39; ¦ &#39;vertical&#39;\n      x: &#39;left&#39;,                   // 水平安放位置，默认为全图左对齐，可选为：\n                          // &#39;center&#39; ¦ &#39;left&#39; ¦ &#39;right&#39;\n                          // ¦ {number}（x坐标，单位px）\n      y: &#39;bottom&#39;,                  // 垂直安放位置，默认为全图底部，可选为：\n                          // &#39;top&#39; ¦ &#39;bottom&#39; ¦ &#39;center&#39;\n                          // ¦ {number}（y坐标，单位px）\n      backgroundColor: &#39;rgba(0,0,0,0)&#39;,\n      borderColor: &#39;#ccc&#39;,             // 值域边框颜色\n      borderWidth: 0,                 // 值域边框线宽，单位px，默认为0（无边框）\n      padding: 5,                    // 值域内边距，单位px，默认各方向内边距为5，\n                          // 接受数组分别设定上右下左边距，同css\n      itemGap: 10,               // 各个item之间的间隔，单位px，默认为10，\n                          // 横向布局时为水平间隔，纵向布局时为纵向间隔\n      itemWidth: 20,             // 值域图形宽度，线性渐变水平布局宽度为该值 * 10\n      itemHeight: 14,            // 值域图形高度，线性渐变垂直布局高度为该值 * 10\n      splitNumber: 5,            // 分割段数，默认为5，为0时为线性渐变\n      color:[&#39;#1e90ff&#39;,&#39;#f0ffff&#39;],//颜色\n      //text:[&#39;高&#39;,&#39;低&#39;],              // 文本，默认为数值文本\n      textStyle: {\n          color: &#39;#333&#39;                                // 值域文字颜色\n      }\n  },\n\n  toolbox: {\n      orient: &#39;horizontal&#39;,            // 布局方式，默认为水平布局，可选为：\n                          // &#39;horizontal&#39; ¦ &#39;vertical&#39;\n      x: &#39;right&#39;,              // 水平安放位置，默认为全图右对齐，可选为：\n                          // &#39;center&#39; ¦ &#39;left&#39; ¦ &#39;right&#39;\n                          // ¦ {number}（x坐标，单位px）\n      y: &#39;top&#39;,               // 垂直安放位置，默认为全图顶端，可选为：\n                          // &#39;top&#39; ¦ &#39;bottom&#39; ¦ &#39;center&#39;\n                          // ¦ {number}（y坐标，单位px）\n      color : [&#39;#1e90ff&#39;,&#39;#22bb22&#39;,&#39;#4b0082&#39;,&#39;#d2691e&#39;],\n      backgroundColor: &#39;rgba(0,0,0,0)&#39;,    // 工具箱背景颜色\n      borderColor: &#39;#ccc&#39;,             // 工具箱边框颜色\n      borderWidth: 0,                 // 工具箱边框线宽，单位px，默认为0（无边框）\n      padding: 5,                    // 工具箱内边距，单位px，默认各方向内边距为5，\n                                  // 接受数组分别设定上右下左边距，同css\n      itemGap: 10,                  // 各个item之间的间隔，单位px，默认为10，\n                                  // 横向布局时为水平间隔，纵向布局时为纵向间隔\n      itemSize: 16,              // 工具箱图形宽度\n      featureImageIcon : {},            // 自定义图片icon\n      featureTitle : {\n          mark : &#39;辅助线开关&#39;,\n          markUndo : &#39;删除辅助线&#39;,\n          markClear : &#39;清空辅助线&#39;,\n          dataZoom : &#39;区域缩放&#39;,\n          dataZoomReset : &#39;区域缩放后退&#39;,\n          dataView : &#39;数据视图&#39;,\n          lineChart : &#39;折线图切换&#39;,\n          barChart : &#39;柱形图切换&#39;,\n          restore : &#39;还原&#39;,\n          saveAsImage : &#39;保存为图片&#39;\n      }\n  },</code></pre><h3 id=\"4-提示框\"><a href=\"#4-提示框\" class=\"headerlink\" title=\"4.提示框\"></a>4.提示框</h3><pre><code>  tooltip: {\n      trigger: &#39;item&#39;,           // 触发类型，默认数据触发，见下图，可选为：&#39;item&#39; ¦ &#39;axis&#39;\n      showDelay: 20,             // 显示延迟，添加显示延迟可以避免频繁切换，单位ms\n      hideDelay: 100,            // 隐藏延迟，单位ms\n      transitionDuration : 0.4,         // 动画变换时间，单位s\n      backgroundColor: &#39;rgba(0,0,0,0.7)&#39;,  // 提示背景颜色，默认为透明度为0.7的黑色\n      borderColor: &#39;#333&#39;,            // 提示边框颜色\n      borderRadius: 4,                // 提示边框圆角，单位px，默认为4\n      borderWidth: 0,                // 提示边框线宽，单位px，默认为0（无边框）\n      padding: 5,                   // 提示内边距，单位px，默认各方向内边距为5，\n                                  // 接受数组分别设定上右下左边距，同css\n      axisPointer : {                 // 坐标轴指示器，坐标轴触发有效\n          type : &#39;line&#39;,         // 默认为直线，可选为：&#39;line&#39; | &#39;shadow&#39;\n          lineStyle : {          // 直线指示器样式设置\n              color: &#39;#48b&#39;,\n              width: 2,\n              type: &#39;solid&#39;\n          },\n          shadowStyle : {              // 阴影指示器样式设置\n              width: &#39;auto&#39;,         // 阴影大小\n              color: &#39;rgba(150,150,150,0.3)&#39;  // 阴影颜色\n          }\n      },\n      textStyle: {\n          color: &#39;#fff&#39;\n      }\n  },</code></pre><h3 id=\"5-区域缩放控制器\"><a href=\"#5-区域缩放控制器\" class=\"headerlink\" title=\"5.区域缩放控制器\"></a>5.区域缩放控制器</h3><pre><code>  dataZoom: {\n      orient: &#39;horizontal&#39;,         // 布局方式，默认为水平布局，可选为：\n                              // &#39;horizontal&#39; ¦ &#39;vertical&#39;\n      // x: {number},              // 水平安放位置，默认为根据grid参数适配，可选为：\n                              // {number}（x坐标，单位px）\n      // y: {number},              // 垂直安放位置，默认为根据grid参数适配，可选为：\n                              // {number}（y坐标，单位px）\n      // width: {number},           // 指定宽度，横向布局时默认为根据grid参数适配\n      // height: {number},          // 指定高度，纵向布局时默认为根据grid参数适配\n      backgroundColor: &#39;rgba(0,0,0,0)&#39;,    // 背景颜色\n      dataBackgroundColor: &#39;#eee&#39;,       // 数据背景颜色\n      fillerColor: &#39;rgba(144,197,237,0.2)&#39;, // 填充颜色\n      handleColor: &#39;rgba(70,130,180,0.8)&#39;       // 手柄颜色\n  },</code></pre><h3 id=\"6-网格\"><a href=\"#6-网格\" class=\"headerlink\" title=\"6.网格\"></a>6.网格</h3><pre><code>  grid: {\n      x: 80,\n      y: 60,\n      x2: 80,\n      y2: 60,\n      // width: {totalWidth} - x - x2,\n      // height: {totalHeight} - y - y2,\n      backgroundColor: &#39;rgba(0,0,0,0)&#39;,\n      borderWidth: 1,\n      borderColor: &#39;#ccc&#39;\n  },</code></pre><h3 id=\"7-类目轴\"><a href=\"#7-类目轴\" class=\"headerlink\" title=\"7.类目轴\"></a>7.类目轴</h3><pre><code>  categoryAxis: {\n      position: &#39;bottom&#39;,        // 位置\n      nameLocation: &#39;end&#39;,      // 坐标轴名字位置，支持&#39;start&#39; | &#39;end&#39;\n      boundaryGap: true,     // 类目起始和结束两端空白策略\n      axisLine: {            // 坐标轴线\n          show: true,         // 默认显示，属性show控制显示与否\n          lineStyle: {        // 属性lineStyle控制线条样式\n              color: &#39;#48b&#39;,\n              width: 2,\n              type: &#39;solid&#39;\n          }\n      },\n      axisTick: {            // 坐标轴小标记\n          show: true,       // 属性show控制显示与否，默认不显示\n          interval: &#39;auto&#39;,\n          // onGap: null,\n          inside : false,        // 控制小标记是否在grid里\n          length :5,         // 属性length控制线长\n          lineStyle: {       // 属性lineStyle控制线条样式\n              color: &#39;#333&#39;,\n              width: 1\n          }\n      },\n      axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel\n          show: true,\n          interval: &#39;auto&#39;,\n          rotate: 0,\n          margin: 8,\n          // formatter: null,\n          textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n              color: &#39;#333&#39;\n          }\n      },\n      splitLine: {                // 分隔线\n          show: true,        // 默认显示，属性show控制显示与否\n          // onGap: null,\n          lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式\n              color: [&#39;#ccc&#39;],\n              width: 1,\n              type: &#39;solid&#39;\n          }\n      },\n      splitArea: {                // 分隔区域\n          show: false,       // 默认不显示，属性show控制显示与否\n          // onGap: null,\n          areaStyle: {        // 属性areaStyle（详见areaStyle）控制区域样式\n              color: [&#39;rgba(250,250,250,0.3)&#39;,&#39;rgba(200,200,200,0.3)&#39;]\n          }\n      }\n  },</code></pre><h3 id=\"8-数值型坐标轴默认参数\"><a href=\"#8-数值型坐标轴默认参数\" class=\"headerlink\" title=\"8.数值型坐标轴默认参数\"></a>8.数值型坐标轴默认参数</h3><pre><code>  valueAxis: {\n      position: &#39;left&#39;,      // 位置\n      nameLocation: &#39;end&#39;,     // 坐标轴名字位置，支持&#39;start&#39; | &#39;end&#39;\n      nameTextStyle: {},     // 坐标轴文字样式，默认取全局样式\n      boundaryGap: [0, 0],    // 数值起始和结束两端空白策略\n      splitNumber: 5,        // 分割段数，默认为5\n      axisLine: {             // 坐标轴线\n          show: true,      // 默认显示，属性show控制显示与否\n          lineStyle: {      // 属性lineStyle控制线条样式\n              color: &#39;#48b&#39;,\n              width: 2,\n              type: &#39;solid&#39;\n          }\n      },\n      axisTick: {            // 坐标轴小标记\n          show: false,       // 属性show控制显示与否，默认不显示\n          inside : false,      // 控制小标记是否在grid里\n          length :5,          // 属性length控制线长\n          lineStyle: {       // 属性lineStyle控制线条样式\n              color: &#39;#333&#39;,\n              width: 1\n          }\n      },\n      axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel\n          show: true,\n          rotate: 0,\n          margin: 8,\n          // formatter: null,\n          textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n              color: &#39;#333&#39;\n          }\n      },\n      splitLine: {                // 分隔线\n          show: true,        // 默认显示，属性show控制显示与否\n          lineStyle: {          // 属性lineStyle（详见lineStyle）控制线条样式\n              color: [&#39;#ccc&#39;],\n              width: 1,\n              type: &#39;solid&#39;\n          }\n      },\n      splitArea: {                // 分隔区域\n          show: false,       // 默认不显示，属性show控制显示与否\n          areaStyle: {       // 属性areaStyle（详见areaStyle）控制区域样式\n              color: [&#39;rgba(250,250,250,0.3)&#39;,&#39;rgba(200,200,200,0.3)&#39;]\n          }\n      }\n  },\n\n  polar : {\n      center : [&#39;50%&#39;, &#39;50%&#39;],    // 默认全局居中\n      radius : &#39;75%&#39;,\n      startAngle : 90,\n      splitNumber : 5,\n      name : {\n          show: true,\n          textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n              color: &#39;#333&#39;\n          }\n      },\n      axisLine: {            // 坐标轴线\n          show: true,         // 默认显示，属性show控制显示与否\n          lineStyle: {        // 属性lineStyle控制线条样式\n              color: &#39;#ccc&#39;,\n              width: 1,\n              type: &#39;solid&#39;\n          }\n      },\n      axisLabel: {                // 坐标轴文本标签，详见axis.axisLabel\n          show: false,\n          textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n              color: &#39;#333&#39;\n          }\n      },\n      splitArea : {\n          show : true,\n          areaStyle : {\n              color: [&#39;rgba(250,250,250,0.3)&#39;,&#39;rgba(200,200,200,0.3)&#39;]\n          }\n      },\n      splitLine : {\n          show : true,\n          lineStyle : {\n              width : 1,\n              color : &#39;#ccc&#39;\n          }\n      }\n  },</code></pre><h3 id=\"9-柱形图默认参数\"><a href=\"#9-柱形图默认参数\" class=\"headerlink\" title=\"9.柱形图默认参数\"></a>9.柱形图默认参数</h3><pre><code>  bar: {\n      barMinHeight: 0,            // 最小高度改为0\n      // barWidth: null,        // 默认自适应\n      barGap: &#39;30%&#39;,           // 柱间距离，默认为柱形宽度的30%，可设固定值\n      barCategoryGap : &#39;20%&#39;,   // 类目间柱形距离，默认为类目间距的20%，可设固定值\n      itemStyle: {\n          normal: {\n              // color: &#39;各异&#39;,\n              barBorderColor: &#39;#fff&#39;,         // 柱条边线\n              barBorderRadius: 0,            // 柱条边线圆角，单位px，默认为0\n              barBorderWidth: 1,             // 柱条边线线宽，单位px，默认为1\n              label: {\n                  show: false\n                                          // position: 默认自适应，水平布局为&#39;top&#39;，垂直布局为&#39;right&#39;，可选为\n                                          // &#39;inside&#39;|&#39;left&#39;|&#39;right&#39;|&#39;top&#39;|&#39;bottom&#39;\n                                          // textStyle: null // 默认使用全局文本样式，详见TEXTSTYLE\n              }\n          },\n          emphasis: {\n              // color: &#39;各异&#39;,\n              barBorderColor: &#39;rgba(0,0,0,0)&#39;,            // 柱条边线\n              barBorderRadius: 0,                // 柱条边线圆角，单位px，默认为0\n              barBorderWidth: 1,                     // 柱条边线线宽，单位px，默认为1\n              label: {\n                  show: false\n                  // position: 默认自适应，水平布局为&#39;top&#39;，垂直布局为&#39;right&#39;，可选为\n                  //           &#39;inside&#39;|&#39;left&#39;|&#39;right&#39;|&#39;top&#39;|&#39;bottom&#39;\n                  // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n              }\n          }\n      }\n  },</code></pre><h3 id=\"10-折线图默认参数\"><a href=\"#10-折线图默认参数\" class=\"headerlink\" title=\"10.折线图默认参数\"></a>10.折线图默认参数</h3><pre><code>  line: {\n      itemStyle: {\n          normal: {\n              // color: 各异,\n              label: {\n                  show: false\n                  // position: 默认自适应，水平布局为&#39;top&#39;，垂直布局为&#39;right&#39;，可选为\n                  //           &#39;inside&#39;|&#39;left&#39;|&#39;right&#39;|&#39;top&#39;|&#39;bottom&#39;\n                  // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n              },\n              lineStyle: {\n                  width: 2,\n                  type: &#39;solid&#39;,\n                  shadowColor : &#39;rgba(0,0,0,0)&#39;, //默认透明\n                  shadowBlur: 5,\n                  shadowOffsetX: 3,\n                  shadowOffsetY: 3\n              }\n          },\n          emphasis: {\n              // color: 各异,\n              label: {\n                  show: false\n                  // position: 默认自适应，水平布局为&#39;top&#39;，垂直布局为&#39;right&#39;，可选为\n                  //           &#39;inside&#39;|&#39;left&#39;|&#39;right&#39;|&#39;top&#39;|&#39;bottom&#39;\n                  // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n              }\n          }\n      },\n      //smooth : false,\n      //symbol: null,             // 拐点图形类型\n      symbolSize: 2,          // 拐点图形大小\n      //symbolRotate : null,       // 拐点图形旋转控制\n      showAllSymbol: false                   // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）\n  },</code></pre><h3 id=\"11-K线图默认参数\"><a href=\"#11-K线图默认参数\" class=\"headerlink\" title=\"11.K线图默认参数\"></a>11.K线图默认参数</h3><pre><code>  k: {\n      // barWidth : null              // 默认自适应\n      // barMaxWidth : null           // 默认自适应\n      itemStyle: {\n          normal: {\n              color: &#39;#fff&#39;,      // 阳线填充颜色\n              color0: &#39;#00aa11&#39;,  // 阴线填充颜色\n              lineStyle: {\n                  width: 1,\n                  color: &#39;#ff3200&#39;,    // 阳线边框颜色\n                  color0: &#39;#00aa11&#39;          // 阴线边框颜色\n              }\n          },\n          emphasis: {\n              // color: 各异,\n              // color0: 各异\n          }\n      }\n  },</code></pre><h3 id=\"12-散点图默认参数\"><a href=\"#12-散点图默认参数\" class=\"headerlink\" title=\"12.散点图默认参数\"></a>12.散点图默认参数</h3><pre><code>  scatter: {\n      //symbol: null,         // 图形类型\n      symbolSize: 4,       // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2\n      //symbolRotate : null,   // 图形旋转控制\n      large: false,        // 大规模散点图\n      largeThreshold: 2000,   // 大规模阀值，large为true且数据量&gt;largeThreshold才启用大规模模式\n      itemStyle: {\n          normal: {\n              // color: 各异,\n              label: {\n                  show: false\n                  // position: 默认自适应，水平布局为&#39;top&#39;，垂直布局为&#39;right&#39;，可选为\n                  //           &#39;inside&#39;|&#39;left&#39;|&#39;right&#39;|&#39;top&#39;|&#39;bottom&#39;\n                  // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n              }\n          },\n          emphasis: {\n              // color: &#39;各异&#39;\n              label: {\n                  show: false\n                  // position: 默认自适应，水平布局为&#39;top&#39;，垂直布局为&#39;right&#39;，可选为\n                  //           &#39;inside&#39;|&#39;left&#39;|&#39;right&#39;|&#39;top&#39;|&#39;bottom&#39;\n                  // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n              }\n          }\n      }\n  },</code></pre><h3 id=\"13-雷达图默认参数\"><a href=\"#13-雷达图默认参数\" class=\"headerlink\" title=\"13.雷达图默认参数\"></a>13.雷达图默认参数</h3><pre><code>  radar : {\n      itemStyle: {\n          normal: {\n              // color: 各异,\n              label: {\n                  show: false\n              },\n              lineStyle: {\n                  width: 2,\n                  type: &#39;solid&#39;\n              }\n          },\n          emphasis: {\n              // color: 各异,\n              label: {\n                  show: false\n              }\n          }\n      },\n      //symbol: null,          // 拐点图形类型\n      symbolSize: 2          // 可计算特性参数，空数据拖拽提示图形大小\n      //symbolRotate : null,    // 图形旋转控制\n  },</code></pre><h3 id=\"14-饼图默认参数\"><a href=\"#14-饼图默认参数\" class=\"headerlink\" title=\"14.饼图默认参数\"></a>14.饼图默认参数</h3><pre><code>  pie: {\n      center : [&#39;50%&#39;, &#39;50%&#39;],          // 默认全局居中\n      radius : [0, &#39;75%&#39;],\n      clockWise : false,             // 默认逆时针\n      startAngle: 90,\n      minAngle: 0,                 // 最小角度改为0\n      selectedOffset: 10,         // 选中是扇区偏移量\n      itemStyle: {\n          normal: {\n              // color: 各异,\n              borderColor: &#39;#fff&#39;,\n              borderWidth: 1,\n              label: {\n                  show: true,\n                  position: &#39;outer&#39;\n                  // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n              },\n              labelLine: {\n                  show: true,\n                  length: 20,\n                  lineStyle: {\n                      // color: 各异,\n                      width: 1,\n                      type: &#39;solid&#39;\n                  }\n              }\n          },\n          emphasis: {\n              // color: 各异,\n              borderColor: &#39;rgba(0,0,0,0)&#39;,\n              borderWidth: 1,\n              label: {\n                  show: false\n                  // position: &#39;outer&#39;\n                  // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n              },\n              labelLine: {\n                  show: false,\n                  length: 20,\n                  lineStyle: {\n                      // color: 各异,\n                      width: 1,\n                      type: &#39;solid&#39;\n                  }\n              }\n          }\n      }\n  },\n\n  map: {\n      mapType: &#39;china&#39;,   // 各省的mapType暂时都用中文\n      mapLocation: {\n          x : &#39;center&#39;,\n          y : &#39;center&#39;\n          // width    // 自适应\n          // height   // 自适应\n      },\n      showLegendSymbol : true,       // 显示图例颜色标识（系列标识的小圆点），存在legend时生效\n      itemStyle: {\n          normal: {\n              // color: 各异,\n              borderColor: &#39;#fff&#39;,\n              borderWidth: 1,\n              areaStyle: {\n                  color: &#39;#ccc&#39;   //rgba(135,206,250,0.8)\n              },\n              label: {\n                  show: false,\n                  textStyle: {\n                      color: &#39;rgba(139,69,19,1)&#39;\n                  }\n              }\n          },\n          emphasis: {                // 也是选中样式\n              // color: 各异,\n              borderColor: &#39;rgba(0,0,0,0)&#39;,\n              borderWidth: 1,\n              areaStyle: {\n                  color: &#39;rgba(255,215,0,0.8)&#39;\n              },\n              label: {\n                  show: false,\n                  textStyle: {\n                      color: &#39;rgba(139,69,19,1)&#39;\n                  }\n              }\n          }\n      }\n  },\n\n  force : {\n      // 数据map到圆的半径的最小值和最大值\n      minRadius : 10,\n      maxRadius : 20,\n      density : 1.0,\n      attractiveness : 1.0,\n      // 初始化的随机大小位置\n      initSize : 300,\n      // 向心力因子，越大向心力越大\n      centripetal : 1,\n      // 冷却因子\n      coolDown : 0.99,\n      // 分类里如果有样式会覆盖节点默认样式\n      itemStyle: {\n          normal: {\n              // color: 各异,\n              label: {\n                  show: false\n                  // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n              },\n              nodeStyle : {\n                  brushType : &#39;both&#39;,\n                  color : &#39;#f08c2e&#39;,\n                  strokeColor : &#39;#5182ab&#39;\n              },\n              linkStyle : {\n                  strokeColor : &#39;#5182ab&#39;\n              }\n          },\n          emphasis: {\n              // color: 各异,\n              label: {\n                  show: false\n                  // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n              },\n              nodeStyle : {},\n              linkStyle : {}\n          }\n      }\n  },\n\n  chord : {\n      radius : [&#39;65%&#39;, &#39;75%&#39;],\n      center : [&#39;50%&#39;, &#39;50%&#39;],\n      padding : 2,\n      sort : &#39;none&#39;,   // can be &#39;none&#39;, &#39;ascending&#39;, &#39;descending&#39;\n      sortSub : &#39;none&#39;, // can be &#39;none&#39;, &#39;ascending&#39;, &#39;descending&#39;\n      startAngle : 90,\n      clockWise : false,\n      showScale : false,\n      showScaleText : false,\n      itemStyle : {\n          normal : {\n              label : {\n                  show : true\n                  // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n              },\n              lineStyle : {\n                  width : 0,\n                  color : &#39;#000&#39;\n              },\n              chordStyle : {\n                  lineStyle : {\n                      width : 1,\n                      color : &#39;#666&#39;\n                  }\n              }\n          },\n          emphasis : {\n              lineStyle : {\n                  width : 0,\n                  color : &#39;#000&#39;\n              },\n              chordStyle : {\n                  lineStyle : {\n                      width : 2,\n                      color : &#39;#333&#39;\n                  }\n              }\n          }\n      }\n  },\n\n  island: {\n      r: 15,\n      calculateStep: 0.1  // 滚轮可计算步长 0.1 = 10%\n  },\n\n  markPoint : {\n      symbol: &#39;pin&#39;,         // 标注类型\n      symbolSize: 10,            // 标注大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2\n      //symbolRotate : null, // 标注旋转控制\n      itemStyle: {\n          normal: {\n              // color: 各异，\n              // borderColor: 各异,     // 标注边线颜色，优先于color\n              borderWidth: 2,         // 标注边线线宽，单位px，默认为1\n              label: {\n                  show: true,\n                  position: &#39;inside&#39;    // 可选为&#39;left&#39;|&#39;right&#39;|&#39;top&#39;|&#39;bottom&#39;\n                  // textStyle: null    // 默认使用全局文本样式，详见TEXTSTYLE\n              }\n          },\n          emphasis: {\n              // color: 各异\n              label: {\n                  show: true\n                  // position: &#39;inside&#39;    // &#39;left&#39;|&#39;right&#39;|&#39;top&#39;|&#39;bottom&#39;\n                  // textStyle: null     // 默认使用全局文本样式，详见TEXTSTYLE\n              }\n          }\n      }\n  },\n\n  markLine : {\n      // 标线起始和结束的symbol介绍类型，如果都一样，可以直接传string\n      symbol: [&#39;circle&#39;, &#39;arrow&#39;], \n      // 标线起始和结束的symbol大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2\n      symbolSize: [2, 4],\n      // 标线起始和结束的symbol旋转控制\n      //symbolRotate : null,\n      itemStyle: {\n          normal: {\n              // color: 各异,           // 标线主色，线色，symbol主色\n              // borderColor: 随color,       // 标线symbol边框颜色，优先于color\n              borderWidth: 2,          // 标线symbol边框线宽，单位px，默认为2\n              label: {\n                  show: false,\n                  // 可选为 &#39;start&#39;|&#39;end&#39;|&#39;left&#39;|&#39;right&#39;|&#39;top&#39;|&#39;bottom&#39;\n                  position: &#39;inside&#39;, \n                  textStyle: {         // 默认使用全局文本样式，详见TEXTSTYLE\n                      color: &#39;#333&#39;\n                  }\n              },\n              lineStyle: {\n                  // color: 随borderColor,    // 主色，线色，优先级高于borderColor和color\n                  // width: 随borderWidth,    // 优先于borderWidth\n                  type: &#39;solid&#39;,\n                  shadowColor : &#39;rgba(0,0,0,0)&#39;, //默认透明\n                  shadowBlur: 5,\n                  shadowOffsetX: 3,\n                  shadowOffsetY: 3\n              }\n          },\n          emphasis: {\n              // color: 各异\n              label: {\n                  show: false\n                  // position: &#39;inside&#39;   // &#39;left&#39;|&#39;right&#39;|&#39;top&#39;|&#39;bottom&#39;\n                  // textStyle: null    // 默认使用全局文本样式，详见TEXTSTYLE\n              },\n              lineStyle : {}\n          }\n      }\n  },\n\n  textStyle: {\n      decoration: &#39;none&#39;,\n      fontFamily: &#39;Arial, Verdana, sans-serif&#39;,\n      fontFamily2: &#39;微软雅黑&#39;,    // IE8- 字体模糊并且不支持不同字体混排，额外指定一份\n      fontSize: 12,\n      fontStyle: &#39;normal&#39;,\n      fontWeight: &#39;normal&#39;\n  },</code></pre><h3 id=\"15-默认标志图形类型列表\"><a href=\"#15-默认标志图形类型列表\" class=\"headerlink\" title=\"15.默认标志图形类型列表\"></a>15.默认标志图形类型列表</h3><pre><code>  symbolList : [\n    &#39;circle&#39;, &#39;rectangle&#39;, &#39;triangle&#39;, &#39;diamond&#39;,\n    &#39;emptyCircle&#39;, &#39;emptyRectangle&#39;, &#39;emptyTriangle&#39;, &#39;emptyDiamond&#39;\n  ],\n  loadingText : &#39;Loading...&#39;,</code></pre><h3 id=\"16-可计算特性配置，孤岛，提示颜色\"><a href=\"#16-可计算特性配置，孤岛，提示颜色\" class=\"headerlink\" title=\"16.可计算特性配置，孤岛，提示颜色\"></a>16.可计算特性配置，孤岛，提示颜色</h3><pre><code>  calculable: false,                       // 默认关闭可计算特性\n  calculableColor: &#39;rgba(255,165,0,0.6)&#39;,       // 拖拽提示边框颜色\n  calculableHolderColor: &#39;#ccc&#39;,               // 可计算占位提示颜色\n  nameConnector: &#39; &amp; &#39;,\n  valueConnector: &#39; : &#39;,\n  animation: true,\n  animationThreshold: 2500,           // 动画元素阀值，产生的图形原素超过2500不出动画\n  addDataAnimation: true,         // 动态数据接口是否开启动画效果\n  animationDuration: 2000,\n  animationEasing: &#39;ExponentialOut&#39;             //BounceOut</code></pre><h2 id=\"3-Echars官方案例\"><a href=\"#3-Echars官方案例\" class=\"headerlink\" title=\"3. Echars官方案例\"></a>3. Echars官方案例</h2><ul>\n<li><a href=\"https://www.echartsjs.com/examples/zh/index.html\" target=\"_blank\" rel=\"noopener\">Echars官方案例</a></li>\n</ul>\n<h2 id=\"4-Echars社区经典模板\"><a href=\"#4-Echars社区经典模板\" class=\"headerlink\" title=\"4. Echars社区经典模板\"></a>4. <a href=\"https://gallery.echartsjs.com/explore.html\" target=\"_blank\" rel=\"noopener\">Echars社区</a>经典模板</h2><ul>\n<li><p><a href=\"https://gallery.echartsjs.com/editor.html?c=xmCAi_XNuJ\" target=\"_blank\" rel=\"noopener\">自定义tooltip，实时获取最新geojson数据</a><br><img src=\"2.jpg\" alt></p>\n</li>\n<li><p><a href=\"https://gallery.echartsjs.com/editor.html?c=xPkPpAWqSt\" target=\"_blank\" rel=\"noopener\">中国地图自定义轮播</a><br><img src=\"1.jpg\" alt></p>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<!-- ## 5.Echars在Vue项目中的使用 -->\n\n\n\n\n\n\n\n"},{"title":"GIS基本使用","date":"2018-04-22T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 从0搭建自己的webpack开发环境\n---\n\n\n\n**1.什么是Webpack?**\n**webpack**是一个现代 **JavaScript** 应用程序的**静态模块打包器**(module bundler)，当 webpack 处理应用程序时，它会递归地构建一个**依赖关系图**(dependency graph)，其中包含应用程序需要的每个**模块**，然后将所有这些模块打包成一个或多个 **bundle**\n![](node.jpg)\n\n使用Webpack作为前端构建工具：\n\n· 代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等；\n· 文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等；\n· 代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载；\n· 模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件；\n· 自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器；\n· 代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过；\n· 自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。\n\n在**webpack**应用中有两个核心:\n\n模块转换器，用于把模块原内容按照需求转换成新内容，可以加载非 JS 模块；\n\n扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。\n\n**2.初始化项目**\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/GIS基本使用.md","raw":"---\ntitle: GIS基本使用\ndate: 2018-04-22 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n- 开发环境\ncategories:\n- 开发环境\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 从0搭建自己的webpack开发环境\n---\n\n\n\n**1.什么是Webpack?**\n**webpack**是一个现代 **JavaScript** 应用程序的**静态模块打包器**(module bundler)，当 webpack 处理应用程序时，它会递归地构建一个**依赖关系图**(dependency graph)，其中包含应用程序需要的每个**模块**，然后将所有这些模块打包成一个或多个 **bundle**\n![](node.jpg)\n\n使用Webpack作为前端构建工具：\n\n· 代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等；\n· 文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等；\n· 代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载；\n· 模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件；\n· 自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器；\n· 代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过；\n· 自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。\n\n在**webpack**应用中有两个核心:\n\n模块转换器，用于把模块原内容按照需求转换成新内容，可以加载非 JS 模块；\n\n扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。\n\n**2.初始化项目**\n\n\n\n\n\n\n\n\n\n\n\n","slug":"GIS基本使用","published":1,"updated":"2020-05-28T07:51:13.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckari24x5000a5sjoe9grxa4t","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"从0搭建自己的webpack开发环境\"><a href=\"#从0搭建自己的webpack开发环境\" class=\"headerlink\" title=\"从0搭建自己的webpack开发环境\"></a>从0搭建自己的webpack开发环境</h1><hr>\n<p><strong>1.什么是Webpack?</strong><br><strong>webpack</strong>是一个现代 <strong>JavaScript</strong> 应用程序的<strong>静态模块打包器</strong>(module bundler)，当 webpack 处理应用程序时，它会递归地构建一个<strong>依赖关系图</strong>(dependency graph)，其中包含应用程序需要的每个<strong>模块</strong>，然后将所有这些模块打包成一个或多个 <strong>bundle</strong><br><img src=\"node.jpg\" alt></p>\n<p>使用Webpack作为前端构建工具：</p>\n<p>· 代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等；<br>· 文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等；<br>· 代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载；<br>· 模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件；<br>· 自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器；<br>· 代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过；<br>· 自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。</p>\n<p>在<strong>webpack</strong>应用中有两个核心:</p>\n<p>模块转换器，用于把模块原内容按照需求转换成新内容，可以加载非 JS 模块；</p>\n<p>扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。</p>\n<p><strong>2.初始化项目</strong></p>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"从0搭建自己的webpack开发环境\"><a href=\"#从0搭建自己的webpack开发环境\" class=\"headerlink\" title=\"从0搭建自己的webpack开发环境\"></a>从0搭建自己的webpack开发环境</h1><hr>\n<p><strong>1.什么是Webpack?</strong><br><strong>webpack</strong>是一个现代 <strong>JavaScript</strong> 应用程序的<strong>静态模块打包器</strong>(module bundler)，当 webpack 处理应用程序时，它会递归地构建一个<strong>依赖关系图</strong>(dependency graph)，其中包含应用程序需要的每个<strong>模块</strong>，然后将所有这些模块打包成一个或多个 <strong>bundle</strong><br><img src=\"node.jpg\" alt></p>\n<p>使用Webpack作为前端构建工具：</p>\n<p>· 代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等；<br>· 文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等；<br>· 代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载；<br>· 模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件；<br>· 自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器；<br>· 代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过；<br>· 自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。</p>\n<p>在<strong>webpack</strong>应用中有两个核心:</p>\n<p>模块转换器，用于把模块原内容按照需求转换成新内容，可以加载非 JS 模块；</p>\n<p>扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。</p>\n<p><strong>2.初始化项目</strong></p>\n"},{"title":"React Native 搭建小白教程","date":"2019-07-13T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1347529350&auto=1&height=66\"></iframe>\n</div>\n\n前言：因为电脑是 windows 系统，为了开始 React-Native 的入坑之路，只能硬着头皮上了，搭建环境的路上走了很多的坑，现在我把我成功搭建的路子记录下来，希望帮助大家少走弯路，也让我以后再搭建的时候，有个记忆，现在正式开始......\n\n# windows 环境下搭建 React-Native 开发环境\n\n---\n\n# RN-搭建开发环境-官网\n\n- [RN-搭建开发环境-官网](https://reactnative.cn/docs/getting-started.html):https://reactnative.cn/docs/getting-started.html\n\n# 详细搭建过程\n\n## 第一步：安装 Node\n\n    Node  (>8.3)\n\n安装完 Node 后建议设置 npm 镜像以加速后面的过程（或使用科学上网工具）。\n\n    npm config set registry https://registry.npm.taobao.org --global\n    npm config set disturl https://npm.taobao.org/dist --global\n\n注意：不要使用 cnpm！cnpm 安装的模块路径比较奇怪，packager 不能正常识别！\n\n## 第二步： 安装 yarn\n\nYarn 是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。安装 yarn 需要用 npm\n\n    npm install -g yarn\n\n安装完 yarn 后同理也要设置镜像源：\n\n    yarn config set registry https://registry.npm.taobao.org --global\n    yarn config set disturl https://npm.taobao.org/dist --global\n\n安装完 yarn 之后就可以用 yarn 代替 npm 了，例如用 yarn 代替 npm install 命令，用 yarn add 代替 npm install.\n\n## 第三步: React Native 命令行工具（react-native-cli）\n\nReact Native 的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。\n\n     npm install -g react-native-cli\n\n## 第四步: Python2.x (不支持 3.x)\n\n[Python 的官网下载地址](https://www.python.org/downloads/):https://www.python.org/downloads/\n\n![](python.jpg)\n\n## 第五步: JDK (==1.8 , 不支持更高版本)\n\n[React Native 要求 JDK 的版本为 1.8，官网的下载地址](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html):https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n\n选择本系统合适的版本，即可，本人是 Windows x64 版本，即：\n\n![](jdk.jpg)\n\n安装好了之后，可以测试一下是否安装好 打开命令窗口终端（按住 windows+r ） 输入 java -version 回车 如果出现下图就安装成功了，如果不行，重启一下电脑再试\n![](2.jpg)\n\n## 第六步: 安装 Android 环境\n\n[安装 Android 环境，首先先安装 Android Studio，下载地址](http://www.android-studio.org/index.php/download);http://www.android-studio.org/index.php/download\n\n![](1.jpg)\n\n下载下来的是一个可安装程序，点击安装即可，在点击“Next”过程，有一步需要指定 Android SDK 的路径，如果之前电脑中已经存在 SDK，可以指定该路径，后续就可以不用下载 SDK；由于本地没有安装过 SDK 的场景，这里暂时可以指定一个后续将保存 SDK 的路径。\n\n点击“Finish”后，开始自动下载 SDK，此时根据网速的快慢，决定这个步骤的时间的长短，下载完成后，则会进行 Android Studio 的欢迎画面，如图\n\n![](3.jpg)\n\n### 配置环境变量（特别重要）\n\n- 鼠标右键点击计算机，选择属性之后再按下图操作\n  ![](5.jpg)\n\n然后在编辑系统变量的这个框里面的变量值中操作以下步骤\n\n1. 找到 Android SDK 的目录的路径复制添加到 path\n   ![](6.jpg)\n2. 找到 android sdk 中 platform-tools 文件的路径地址添加到 pah，记住一定要打分号哦，跟前一个路径区分开\n\n    例如我的路径就是 F:\\android-sdk_r24.4.1-windows\\android-sdk-windows\\platform-tools\n    ![](7.jpg)\n\n3. 找到`android sdk 中 tools`文件的路径地址添加到`pah` 最后点击确定 确定 确定 就完事了\n\n然后打开命令终端 `（windows + r）` 输入 adb，测试一下，只要没有报错，就成功了\n\n`我们再把java sdk配置了，按下图操作`\n\n![](8.jpg)\n\n我因为第一次搭建失败了，查了很久了，我添加了一个 Android sdk 的系统变量，第二次搭建就成功了，不知道是不是这个原因，最好添加一下吧，以防万一\n\n![](9.jpg)\n\nAndroid SDK 默认的应该是在 C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\n\n这个地方我也有一个疑问，为什么我的 android sdk 压缩包是解压在 F 盘里的，C 盘也会有一个 sdk，这个地方的配置`要用c盘的sdk`，记住了\n\n## 第七步: 安装一个模拟器 我选择的是夜神模拟器\n\n- 安装夜神模拟器，安装好之后，最好将分辨率调成`手机端`\n  [夜神官网](https://www.yeshen.com/):https://www.yeshen.com/\n\n## 第八步: 打开命令窗口，输入 react-native init firstdemo 创建项目名为`firstdemo`的文件夹\n\n之后在 firstdemo 项目目录中找到 android 目录，创建一个文件，如下图\n\n![](10.jpg)\n然后内容为：`sdk.dir=android sdk`目录路径，如下图，记住，一定是`双斜杠`，\n\n![](11.jpg)\n\n## 第九步: 连接模拟器，运行项目\n\n打开项目目录，按住 shift 键，鼠标右键点击，选择在此处打开命令窗口，输入 react-native start （启动项目服务进程），如下图\n\n![](12.jpg)\n\n接下来，刚刚的命令窗口别关闭了，重新打开一个命令窗口，连接夜神模拟器\n\n### 9.1 打开夜神模拟器\n\n### 9.2 重新打开一个命令窗口，执行命令 `adb connect 127.0.0.1:62001`以连接模拟器，（这个地方主义一下，端口号`62001`，是夜神模拟器默认的，如果你是其他的模拟器，记得查阅一下，默认端口号是多少）如下图：\n\n![](13.jpg)\n\n### 9.3 再执行命令 react-native run-android ,这里需要说明一下，第一次启动这个命令的话，他要下载一些依赖的东西，最好是要有 t z，不然会很慢，也可能会失败，这直接关系到最后能不能成功搭建环境，我这里是已经执行过一次这个命令了，如下图：\n\n![](14.jpg)\n![](15.jpg)\n\n成功之后，你会看到你的模拟器自动打开了一个 app，但是整个页面都是红色的，想报错一样，别慌张，还有最后一步\n\n![](16.jpg)\n![](17.jpg)\n\n输入电脑地址(`ipconfig => IPv4 地址`)+ 端口号`8081`:如图\n![](21.jpg)\n\n![](18.jpg)\n\n最后再运行命令 react-native run-android 模拟器会出现 app 界面，\n\n![](20.jpg)\n\n好了，恭喜你，环境搭建好了，开始你的 RN 踩坑之路吧，\n","source":"_posts/React Native 搭建小白教程.md","raw":"---\ntitle: React Native 搭建小白教程\ndate: 2019-7-13 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n  - 开发环境\ncategories:\n  - 开发环境\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1347529350&auto=1&height=66\"></iframe>\n</div>\n\n前言：因为电脑是 windows 系统，为了开始 React-Native 的入坑之路，只能硬着头皮上了，搭建环境的路上走了很多的坑，现在我把我成功搭建的路子记录下来，希望帮助大家少走弯路，也让我以后再搭建的时候，有个记忆，现在正式开始......\n\n# windows 环境下搭建 React-Native 开发环境\n\n---\n\n# RN-搭建开发环境-官网\n\n- [RN-搭建开发环境-官网](https://reactnative.cn/docs/getting-started.html):https://reactnative.cn/docs/getting-started.html\n\n# 详细搭建过程\n\n## 第一步：安装 Node\n\n    Node  (>8.3)\n\n安装完 Node 后建议设置 npm 镜像以加速后面的过程（或使用科学上网工具）。\n\n    npm config set registry https://registry.npm.taobao.org --global\n    npm config set disturl https://npm.taobao.org/dist --global\n\n注意：不要使用 cnpm！cnpm 安装的模块路径比较奇怪，packager 不能正常识别！\n\n## 第二步： 安装 yarn\n\nYarn 是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。安装 yarn 需要用 npm\n\n    npm install -g yarn\n\n安装完 yarn 后同理也要设置镜像源：\n\n    yarn config set registry https://registry.npm.taobao.org --global\n    yarn config set disturl https://npm.taobao.org/dist --global\n\n安装完 yarn 之后就可以用 yarn 代替 npm 了，例如用 yarn 代替 npm install 命令，用 yarn add 代替 npm install.\n\n## 第三步: React Native 命令行工具（react-native-cli）\n\nReact Native 的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。\n\n     npm install -g react-native-cli\n\n## 第四步: Python2.x (不支持 3.x)\n\n[Python 的官网下载地址](https://www.python.org/downloads/):https://www.python.org/downloads/\n\n![](python.jpg)\n\n## 第五步: JDK (==1.8 , 不支持更高版本)\n\n[React Native 要求 JDK 的版本为 1.8，官网的下载地址](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html):https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n\n选择本系统合适的版本，即可，本人是 Windows x64 版本，即：\n\n![](jdk.jpg)\n\n安装好了之后，可以测试一下是否安装好 打开命令窗口终端（按住 windows+r ） 输入 java -version 回车 如果出现下图就安装成功了，如果不行，重启一下电脑再试\n![](2.jpg)\n\n## 第六步: 安装 Android 环境\n\n[安装 Android 环境，首先先安装 Android Studio，下载地址](http://www.android-studio.org/index.php/download);http://www.android-studio.org/index.php/download\n\n![](1.jpg)\n\n下载下来的是一个可安装程序，点击安装即可，在点击“Next”过程，有一步需要指定 Android SDK 的路径，如果之前电脑中已经存在 SDK，可以指定该路径，后续就可以不用下载 SDK；由于本地没有安装过 SDK 的场景，这里暂时可以指定一个后续将保存 SDK 的路径。\n\n点击“Finish”后，开始自动下载 SDK，此时根据网速的快慢，决定这个步骤的时间的长短，下载完成后，则会进行 Android Studio 的欢迎画面，如图\n\n![](3.jpg)\n\n### 配置环境变量（特别重要）\n\n- 鼠标右键点击计算机，选择属性之后再按下图操作\n  ![](5.jpg)\n\n然后在编辑系统变量的这个框里面的变量值中操作以下步骤\n\n1. 找到 Android SDK 的目录的路径复制添加到 path\n   ![](6.jpg)\n2. 找到 android sdk 中 platform-tools 文件的路径地址添加到 pah，记住一定要打分号哦，跟前一个路径区分开\n\n    例如我的路径就是 F:\\android-sdk_r24.4.1-windows\\android-sdk-windows\\platform-tools\n    ![](7.jpg)\n\n3. 找到`android sdk 中 tools`文件的路径地址添加到`pah` 最后点击确定 确定 确定 就完事了\n\n然后打开命令终端 `（windows + r）` 输入 adb，测试一下，只要没有报错，就成功了\n\n`我们再把java sdk配置了，按下图操作`\n\n![](8.jpg)\n\n我因为第一次搭建失败了，查了很久了，我添加了一个 Android sdk 的系统变量，第二次搭建就成功了，不知道是不是这个原因，最好添加一下吧，以防万一\n\n![](9.jpg)\n\nAndroid SDK 默认的应该是在 C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\n\n这个地方我也有一个疑问，为什么我的 android sdk 压缩包是解压在 F 盘里的，C 盘也会有一个 sdk，这个地方的配置`要用c盘的sdk`，记住了\n\n## 第七步: 安装一个模拟器 我选择的是夜神模拟器\n\n- 安装夜神模拟器，安装好之后，最好将分辨率调成`手机端`\n  [夜神官网](https://www.yeshen.com/):https://www.yeshen.com/\n\n## 第八步: 打开命令窗口，输入 react-native init firstdemo 创建项目名为`firstdemo`的文件夹\n\n之后在 firstdemo 项目目录中找到 android 目录，创建一个文件，如下图\n\n![](10.jpg)\n然后内容为：`sdk.dir=android sdk`目录路径，如下图，记住，一定是`双斜杠`，\n\n![](11.jpg)\n\n## 第九步: 连接模拟器，运行项目\n\n打开项目目录，按住 shift 键，鼠标右键点击，选择在此处打开命令窗口，输入 react-native start （启动项目服务进程），如下图\n\n![](12.jpg)\n\n接下来，刚刚的命令窗口别关闭了，重新打开一个命令窗口，连接夜神模拟器\n\n### 9.1 打开夜神模拟器\n\n### 9.2 重新打开一个命令窗口，执行命令 `adb connect 127.0.0.1:62001`以连接模拟器，（这个地方主义一下，端口号`62001`，是夜神模拟器默认的，如果你是其他的模拟器，记得查阅一下，默认端口号是多少）如下图：\n\n![](13.jpg)\n\n### 9.3 再执行命令 react-native run-android ,这里需要说明一下，第一次启动这个命令的话，他要下载一些依赖的东西，最好是要有 t z，不然会很慢，也可能会失败，这直接关系到最后能不能成功搭建环境，我这里是已经执行过一次这个命令了，如下图：\n\n![](14.jpg)\n![](15.jpg)\n\n成功之后，你会看到你的模拟器自动打开了一个 app，但是整个页面都是红色的，想报错一样，别慌张，还有最后一步\n\n![](16.jpg)\n![](17.jpg)\n\n输入电脑地址(`ipconfig => IPv4 地址`)+ 端口号`8081`:如图\n![](21.jpg)\n\n![](18.jpg)\n\n最后再运行命令 react-native run-android 模拟器会出现 app 界面，\n\n![](20.jpg)\n\n好了，恭喜你，环境搭建好了，开始你的 RN 踩坑之路吧，\n","slug":"React Native 搭建小白教程","published":1,"updated":"2020-05-29T01:19:46.281Z","_id":"ckari24x9000c5sjo0if8leux","comments":1,"layout":"post","photos":[],"link":"","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=1347529350&auto=1&height=66\"></iframe>\n</div>\n\n<p>前言：因为电脑是 windows 系统，为了开始 React-Native 的入坑之路，只能硬着头皮上了，搭建环境的路上走了很多的坑，现在我把我成功搭建的路子记录下来，希望帮助大家少走弯路，也让我以后再搭建的时候，有个记忆，现在正式开始……</p>\n<h1 id=\"windows-环境下搭建-React-Native-开发环境\"><a href=\"#windows-环境下搭建-React-Native-开发环境\" class=\"headerlink\" title=\"windows 环境下搭建 React-Native 开发环境\"></a>windows 环境下搭建 React-Native 开发环境</h1><hr>\n<h1 id=\"RN-搭建开发环境-官网\"><a href=\"#RN-搭建开发环境-官网\" class=\"headerlink\" title=\"RN-搭建开发环境-官网\"></a>RN-搭建开发环境-官网</h1><ul>\n<li><a href=\"https://reactnative.cn/docs/getting-started.html\" target=\"_blank\" rel=\"noopener\">RN-搭建开发环境-官网</a>:<a href=\"https://reactnative.cn/docs/getting-started.html\" target=\"_blank\" rel=\"noopener\">https://reactnative.cn/docs/getting-started.html</a></li>\n</ul>\n<h1 id=\"详细搭建过程\"><a href=\"#详细搭建过程\" class=\"headerlink\" title=\"详细搭建过程\"></a>详细搭建过程</h1><h2 id=\"第一步：安装-Node\"><a href=\"#第一步：安装-Node\" class=\"headerlink\" title=\"第一步：安装 Node\"></a>第一步：安装 Node</h2><pre><code>Node  (&gt;8.3)</code></pre><p>安装完 Node 后建议设置 npm 镜像以加速后面的过程（或使用科学上网工具）。</p>\n<pre><code>npm config set registry https://registry.npm.taobao.org --global\nnpm config set disturl https://npm.taobao.org/dist --global</code></pre><p>注意：不要使用 cnpm！cnpm 安装的模块路径比较奇怪，packager 不能正常识别！</p>\n<h2 id=\"第二步：-安装-yarn\"><a href=\"#第二步：-安装-yarn\" class=\"headerlink\" title=\"第二步： 安装 yarn\"></a>第二步： 安装 yarn</h2><p>Yarn 是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。安装 yarn 需要用 npm</p>\n<pre><code>npm install -g yarn</code></pre><p>安装完 yarn 后同理也要设置镜像源：</p>\n<pre><code>yarn config set registry https://registry.npm.taobao.org --global\nyarn config set disturl https://npm.taobao.org/dist --global</code></pre><p>安装完 yarn 之后就可以用 yarn 代替 npm 了，例如用 yarn 代替 npm install 命令，用 yarn add 代替 npm install.</p>\n<h2 id=\"第三步-React-Native-命令行工具（react-native-cli）\"><a href=\"#第三步-React-Native-命令行工具（react-native-cli）\" class=\"headerlink\" title=\"第三步: React Native 命令行工具（react-native-cli）\"></a>第三步: React Native 命令行工具（react-native-cli）</h2><p>React Native 的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。</p>\n<pre><code> npm install -g react-native-cli</code></pre><h2 id=\"第四步-Python2-x-不支持-3-x\"><a href=\"#第四步-Python2-x-不支持-3-x\" class=\"headerlink\" title=\"第四步: Python2.x (不支持 3.x)\"></a>第四步: Python2.x (不支持 3.x)</h2><p><a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"noopener\">Python 的官网下载地址</a>:<a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"noopener\">https://www.python.org/downloads/</a></p>\n<p><img src=\"python.jpg\" alt></p>\n<h2 id=\"第五步-JDK-1-8-不支持更高版本\"><a href=\"#第五步-JDK-1-8-不支持更高版本\" class=\"headerlink\" title=\"第五步: JDK (==1.8 , 不支持更高版本)\"></a>第五步: JDK (==1.8 , 不支持更高版本)</h2><p><a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">React Native 要求 JDK 的版本为 1.8，官网的下载地址</a>:<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>\n<p>选择本系统合适的版本，即可，本人是 Windows x64 版本，即：</p>\n<p><img src=\"jdk.jpg\" alt></p>\n<p>安装好了之后，可以测试一下是否安装好 打开命令窗口终端（按住 windows+r ） 输入 java -version 回车 如果出现下图就安装成功了，如果不行，重启一下电脑再试<br><img src=\"2.jpg\" alt></p>\n<h2 id=\"第六步-安装-Android-环境\"><a href=\"#第六步-安装-Android-环境\" class=\"headerlink\" title=\"第六步: 安装 Android 环境\"></a>第六步: 安装 Android 环境</h2><p><a href=\"http://www.android-studio.org/index.php/download\" target=\"_blank\" rel=\"noopener\">安装 Android 环境，首先先安装 Android Studio，下载地址</a>;<a href=\"http://www.android-studio.org/index.php/download\" target=\"_blank\" rel=\"noopener\">http://www.android-studio.org/index.php/download</a></p>\n<p><img src=\"1.jpg\" alt></p>\n<p>下载下来的是一个可安装程序，点击安装即可，在点击“Next”过程，有一步需要指定 Android SDK 的路径，如果之前电脑中已经存在 SDK，可以指定该路径，后续就可以不用下载 SDK；由于本地没有安装过 SDK 的场景，这里暂时可以指定一个后续将保存 SDK 的路径。</p>\n<p>点击“Finish”后，开始自动下载 SDK，此时根据网速的快慢，决定这个步骤的时间的长短，下载完成后，则会进行 Android Studio 的欢迎画面，如图</p>\n<p><img src=\"3.jpg\" alt></p>\n<h3 id=\"配置环境变量（特别重要）\"><a href=\"#配置环境变量（特别重要）\" class=\"headerlink\" title=\"配置环境变量（特别重要）\"></a>配置环境变量（特别重要）</h3><ul>\n<li>鼠标右键点击计算机，选择属性之后再按下图操作<br><img src=\"5.jpg\" alt></li>\n</ul>\n<p>然后在编辑系统变量的这个框里面的变量值中操作以下步骤</p>\n<ol>\n<li><p>找到 Android SDK 的目录的路径复制添加到 path<br><img src=\"6.jpg\" alt></p>\n</li>\n<li><p>找到 android sdk 中 platform-tools 文件的路径地址添加到 pah，记住一定要打分号哦，跟前一个路径区分开</p>\n<p> 例如我的路径就是 F:\\android-sdk_r24.4.1-windows\\android-sdk-windows\\platform-tools<br> <img src=\"7.jpg\" alt></p>\n</li>\n<li><p>找到<code>android sdk 中 tools</code>文件的路径地址添加到<code>pah</code> 最后点击确定 确定 确定 就完事了</p>\n</li>\n</ol>\n<p>然后打开命令终端 <code>（windows + r）</code> 输入 adb，测试一下，只要没有报错，就成功了</p>\n<p><code>我们再把java sdk配置了，按下图操作</code></p>\n<p><img src=\"8.jpg\" alt></p>\n<p>我因为第一次搭建失败了，查了很久了，我添加了一个 Android sdk 的系统变量，第二次搭建就成功了，不知道是不是这个原因，最好添加一下吧，以防万一</p>\n<p><img src=\"9.jpg\" alt></p>\n<p>Android SDK 默认的应该是在 C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk</p>\n<p>这个地方我也有一个疑问，为什么我的 android sdk 压缩包是解压在 F 盘里的，C 盘也会有一个 sdk，这个地方的配置<code>要用c盘的sdk</code>，记住了</p>\n<h2 id=\"第七步-安装一个模拟器-我选择的是夜神模拟器\"><a href=\"#第七步-安装一个模拟器-我选择的是夜神模拟器\" class=\"headerlink\" title=\"第七步: 安装一个模拟器 我选择的是夜神模拟器\"></a>第七步: 安装一个模拟器 我选择的是夜神模拟器</h2><ul>\n<li>安装夜神模拟器，安装好之后，最好将分辨率调成<code>手机端</code><br><a href=\"https://www.yeshen.com/\" target=\"_blank\" rel=\"noopener\">夜神官网</a>:<a href=\"https://www.yeshen.com/\" target=\"_blank\" rel=\"noopener\">https://www.yeshen.com/</a></li>\n</ul>\n<h2 id=\"第八步-打开命令窗口，输入-react-native-init-firstdemo-创建项目名为firstdemo的文件夹\"><a href=\"#第八步-打开命令窗口，输入-react-native-init-firstdemo-创建项目名为firstdemo的文件夹\" class=\"headerlink\" title=\"第八步: 打开命令窗口，输入 react-native init firstdemo 创建项目名为firstdemo的文件夹\"></a>第八步: 打开命令窗口，输入 react-native init firstdemo 创建项目名为<code>firstdemo</code>的文件夹</h2><p>之后在 firstdemo 项目目录中找到 android 目录，创建一个文件，如下图</p>\n<p><img src=\"10.jpg\" alt><br>然后内容为：<code>sdk.dir=android sdk</code>目录路径，如下图，记住，一定是<code>双斜杠</code>，</p>\n<p><img src=\"11.jpg\" alt></p>\n<h2 id=\"第九步-连接模拟器，运行项目\"><a href=\"#第九步-连接模拟器，运行项目\" class=\"headerlink\" title=\"第九步: 连接模拟器，运行项目\"></a>第九步: 连接模拟器，运行项目</h2><p>打开项目目录，按住 shift 键，鼠标右键点击，选择在此处打开命令窗口，输入 react-native start （启动项目服务进程），如下图</p>\n<p><img src=\"12.jpg\" alt></p>\n<p>接下来，刚刚的命令窗口别关闭了，重新打开一个命令窗口，连接夜神模拟器</p>\n<h3 id=\"9-1-打开夜神模拟器\"><a href=\"#9-1-打开夜神模拟器\" class=\"headerlink\" title=\"9.1 打开夜神模拟器\"></a>9.1 打开夜神模拟器</h3><h3 id=\"9-2-重新打开一个命令窗口，执行命令-adb-connect-127-0-0-1-62001以连接模拟器，（这个地方主义一下，端口号62001，是夜神模拟器默认的，如果你是其他的模拟器，记得查阅一下，默认端口号是多少）如下图：\"><a href=\"#9-2-重新打开一个命令窗口，执行命令-adb-connect-127-0-0-1-62001以连接模拟器，（这个地方主义一下，端口号62001，是夜神模拟器默认的，如果你是其他的模拟器，记得查阅一下，默认端口号是多少）如下图：\" class=\"headerlink\" title=\"9.2 重新打开一个命令窗口，执行命令 adb connect 127.0.0.1:62001以连接模拟器，（这个地方主义一下，端口号62001，是夜神模拟器默认的，如果你是其他的模拟器，记得查阅一下，默认端口号是多少）如下图：\"></a>9.2 重新打开一个命令窗口，执行命令 <code>adb connect 127.0.0.1:62001</code>以连接模拟器，（这个地方主义一下，端口号<code>62001</code>，是夜神模拟器默认的，如果你是其他的模拟器，记得查阅一下，默认端口号是多少）如下图：</h3><p><img src=\"13.jpg\" alt></p>\n<h3 id=\"9-3-再执行命令-react-native-run-android-这里需要说明一下，第一次启动这个命令的话，他要下载一些依赖的东西，最好是要有-t-z，不然会很慢，也可能会失败，这直接关系到最后能不能成功搭建环境，我这里是已经执行过一次这个命令了，如下图：\"><a href=\"#9-3-再执行命令-react-native-run-android-这里需要说明一下，第一次启动这个命令的话，他要下载一些依赖的东西，最好是要有-t-z，不然会很慢，也可能会失败，这直接关系到最后能不能成功搭建环境，我这里是已经执行过一次这个命令了，如下图：\" class=\"headerlink\" title=\"9.3 再执行命令 react-native run-android ,这里需要说明一下，第一次启动这个命令的话，他要下载一些依赖的东西，最好是要有 t z，不然会很慢，也可能会失败，这直接关系到最后能不能成功搭建环境，我这里是已经执行过一次这个命令了，如下图：\"></a>9.3 再执行命令 react-native run-android ,这里需要说明一下，第一次启动这个命令的话，他要下载一些依赖的东西，最好是要有 t z，不然会很慢，也可能会失败，这直接关系到最后能不能成功搭建环境，我这里是已经执行过一次这个命令了，如下图：</h3><p><img src=\"14.jpg\" alt><br><img src=\"15.jpg\" alt></p>\n<p>成功之后，你会看到你的模拟器自动打开了一个 app，但是整个页面都是红色的，想报错一样，别慌张，还有最后一步</p>\n<p><img src=\"16.jpg\" alt><br><img src=\"17.jpg\" alt></p>\n<p>输入电脑地址(<code>ipconfig =&gt; IPv4 地址</code>)+ 端口号<code>8081</code>:如图<br><img src=\"21.jpg\" alt></p>\n<p><img src=\"18.jpg\" alt></p>\n<p>最后再运行命令 react-native run-android 模拟器会出现 app 界面，</p>\n<p><img src=\"20.jpg\" alt></p>\n<p>好了，恭喜你，环境搭建好了，开始你的 RN 踩坑之路吧，</p>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=1347529350&auto=1&height=66\"></iframe>\n</div>\n\n<p>前言：因为电脑是 windows 系统，为了开始 React-Native 的入坑之路，只能硬着头皮上了，搭建环境的路上走了很多的坑，现在我把我成功搭建的路子记录下来，希望帮助大家少走弯路，也让我以后再搭建的时候，有个记忆，现在正式开始……</p>\n<h1 id=\"windows-环境下搭建-React-Native-开发环境\"><a href=\"#windows-环境下搭建-React-Native-开发环境\" class=\"headerlink\" title=\"windows 环境下搭建 React-Native 开发环境\"></a>windows 环境下搭建 React-Native 开发环境</h1><hr>\n<h1 id=\"RN-搭建开发环境-官网\"><a href=\"#RN-搭建开发环境-官网\" class=\"headerlink\" title=\"RN-搭建开发环境-官网\"></a>RN-搭建开发环境-官网</h1><ul>\n<li><a href=\"https://reactnative.cn/docs/getting-started.html\" target=\"_blank\" rel=\"noopener\">RN-搭建开发环境-官网</a>:<a href=\"https://reactnative.cn/docs/getting-started.html\" target=\"_blank\" rel=\"noopener\">https://reactnative.cn/docs/getting-started.html</a></li>\n</ul>\n<h1 id=\"详细搭建过程\"><a href=\"#详细搭建过程\" class=\"headerlink\" title=\"详细搭建过程\"></a>详细搭建过程</h1><h2 id=\"第一步：安装-Node\"><a href=\"#第一步：安装-Node\" class=\"headerlink\" title=\"第一步：安装 Node\"></a>第一步：安装 Node</h2><pre><code>Node  (&gt;8.3)</code></pre><p>安装完 Node 后建议设置 npm 镜像以加速后面的过程（或使用科学上网工具）。</p>\n<pre><code>npm config set registry https://registry.npm.taobao.org --global\nnpm config set disturl https://npm.taobao.org/dist --global</code></pre><p>注意：不要使用 cnpm！cnpm 安装的模块路径比较奇怪，packager 不能正常识别！</p>\n<h2 id=\"第二步：-安装-yarn\"><a href=\"#第二步：-安装-yarn\" class=\"headerlink\" title=\"第二步： 安装 yarn\"></a>第二步： 安装 yarn</h2><p>Yarn 是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。安装 yarn 需要用 npm</p>\n<pre><code>npm install -g yarn</code></pre><p>安装完 yarn 后同理也要设置镜像源：</p>\n<pre><code>yarn config set registry https://registry.npm.taobao.org --global\nyarn config set disturl https://npm.taobao.org/dist --global</code></pre><p>安装完 yarn 之后就可以用 yarn 代替 npm 了，例如用 yarn 代替 npm install 命令，用 yarn add 代替 npm install.</p>\n<h2 id=\"第三步-React-Native-命令行工具（react-native-cli）\"><a href=\"#第三步-React-Native-命令行工具（react-native-cli）\" class=\"headerlink\" title=\"第三步: React Native 命令行工具（react-native-cli）\"></a>第三步: React Native 命令行工具（react-native-cli）</h2><p>React Native 的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。</p>\n<pre><code> npm install -g react-native-cli</code></pre><h2 id=\"第四步-Python2-x-不支持-3-x\"><a href=\"#第四步-Python2-x-不支持-3-x\" class=\"headerlink\" title=\"第四步: Python2.x (不支持 3.x)\"></a>第四步: Python2.x (不支持 3.x)</h2><p><a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"noopener\">Python 的官网下载地址</a>:<a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"noopener\">https://www.python.org/downloads/</a></p>\n<p><img src=\"python.jpg\" alt></p>\n<h2 id=\"第五步-JDK-1-8-不支持更高版本\"><a href=\"#第五步-JDK-1-8-不支持更高版本\" class=\"headerlink\" title=\"第五步: JDK (==1.8 , 不支持更高版本)\"></a>第五步: JDK (==1.8 , 不支持更高版本)</h2><p><a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">React Native 要求 JDK 的版本为 1.8，官网的下载地址</a>:<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>\n<p>选择本系统合适的版本，即可，本人是 Windows x64 版本，即：</p>\n<p><img src=\"jdk.jpg\" alt></p>\n<p>安装好了之后，可以测试一下是否安装好 打开命令窗口终端（按住 windows+r ） 输入 java -version 回车 如果出现下图就安装成功了，如果不行，重启一下电脑再试<br><img src=\"2.jpg\" alt></p>\n<h2 id=\"第六步-安装-Android-环境\"><a href=\"#第六步-安装-Android-环境\" class=\"headerlink\" title=\"第六步: 安装 Android 环境\"></a>第六步: 安装 Android 环境</h2><p><a href=\"http://www.android-studio.org/index.php/download\" target=\"_blank\" rel=\"noopener\">安装 Android 环境，首先先安装 Android Studio，下载地址</a>;<a href=\"http://www.android-studio.org/index.php/download\" target=\"_blank\" rel=\"noopener\">http://www.android-studio.org/index.php/download</a></p>\n<p><img src=\"1.jpg\" alt></p>\n<p>下载下来的是一个可安装程序，点击安装即可，在点击“Next”过程，有一步需要指定 Android SDK 的路径，如果之前电脑中已经存在 SDK，可以指定该路径，后续就可以不用下载 SDK；由于本地没有安装过 SDK 的场景，这里暂时可以指定一个后续将保存 SDK 的路径。</p>\n<p>点击“Finish”后，开始自动下载 SDK，此时根据网速的快慢，决定这个步骤的时间的长短，下载完成后，则会进行 Android Studio 的欢迎画面，如图</p>\n<p><img src=\"3.jpg\" alt></p>\n<h3 id=\"配置环境变量（特别重要）\"><a href=\"#配置环境变量（特别重要）\" class=\"headerlink\" title=\"配置环境变量（特别重要）\"></a>配置环境变量（特别重要）</h3><ul>\n<li>鼠标右键点击计算机，选择属性之后再按下图操作<br><img src=\"5.jpg\" alt></li>\n</ul>\n<p>然后在编辑系统变量的这个框里面的变量值中操作以下步骤</p>\n<ol>\n<li><p>找到 Android SDK 的目录的路径复制添加到 path<br><img src=\"6.jpg\" alt></p>\n</li>\n<li><p>找到 android sdk 中 platform-tools 文件的路径地址添加到 pah，记住一定要打分号哦，跟前一个路径区分开</p>\n<p> 例如我的路径就是 F:\\android-sdk_r24.4.1-windows\\android-sdk-windows\\platform-tools<br> <img src=\"7.jpg\" alt></p>\n</li>\n<li><p>找到<code>android sdk 中 tools</code>文件的路径地址添加到<code>pah</code> 最后点击确定 确定 确定 就完事了</p>\n</li>\n</ol>\n<p>然后打开命令终端 <code>（windows + r）</code> 输入 adb，测试一下，只要没有报错，就成功了</p>\n<p><code>我们再把java sdk配置了，按下图操作</code></p>\n<p><img src=\"8.jpg\" alt></p>\n<p>我因为第一次搭建失败了，查了很久了，我添加了一个 Android sdk 的系统变量，第二次搭建就成功了，不知道是不是这个原因，最好添加一下吧，以防万一</p>\n<p><img src=\"9.jpg\" alt></p>\n<p>Android SDK 默认的应该是在 C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk</p>\n<p>这个地方我也有一个疑问，为什么我的 android sdk 压缩包是解压在 F 盘里的，C 盘也会有一个 sdk，这个地方的配置<code>要用c盘的sdk</code>，记住了</p>\n<h2 id=\"第七步-安装一个模拟器-我选择的是夜神模拟器\"><a href=\"#第七步-安装一个模拟器-我选择的是夜神模拟器\" class=\"headerlink\" title=\"第七步: 安装一个模拟器 我选择的是夜神模拟器\"></a>第七步: 安装一个模拟器 我选择的是夜神模拟器</h2><ul>\n<li>安装夜神模拟器，安装好之后，最好将分辨率调成<code>手机端</code><br><a href=\"https://www.yeshen.com/\" target=\"_blank\" rel=\"noopener\">夜神官网</a>:<a href=\"https://www.yeshen.com/\" target=\"_blank\" rel=\"noopener\">https://www.yeshen.com/</a></li>\n</ul>\n<h2 id=\"第八步-打开命令窗口，输入-react-native-init-firstdemo-创建项目名为firstdemo的文件夹\"><a href=\"#第八步-打开命令窗口，输入-react-native-init-firstdemo-创建项目名为firstdemo的文件夹\" class=\"headerlink\" title=\"第八步: 打开命令窗口，输入 react-native init firstdemo 创建项目名为firstdemo的文件夹\"></a>第八步: 打开命令窗口，输入 react-native init firstdemo 创建项目名为<code>firstdemo</code>的文件夹</h2><p>之后在 firstdemo 项目目录中找到 android 目录，创建一个文件，如下图</p>\n<p><img src=\"10.jpg\" alt><br>然后内容为：<code>sdk.dir=android sdk</code>目录路径，如下图，记住，一定是<code>双斜杠</code>，</p>\n<p><img src=\"11.jpg\" alt></p>\n<h2 id=\"第九步-连接模拟器，运行项目\"><a href=\"#第九步-连接模拟器，运行项目\" class=\"headerlink\" title=\"第九步: 连接模拟器，运行项目\"></a>第九步: 连接模拟器，运行项目</h2><p>打开项目目录，按住 shift 键，鼠标右键点击，选择在此处打开命令窗口，输入 react-native start （启动项目服务进程），如下图</p>\n<p><img src=\"12.jpg\" alt></p>\n<p>接下来，刚刚的命令窗口别关闭了，重新打开一个命令窗口，连接夜神模拟器</p>\n<h3 id=\"9-1-打开夜神模拟器\"><a href=\"#9-1-打开夜神模拟器\" class=\"headerlink\" title=\"9.1 打开夜神模拟器\"></a>9.1 打开夜神模拟器</h3><h3 id=\"9-2-重新打开一个命令窗口，执行命令-adb-connect-127-0-0-1-62001以连接模拟器，（这个地方主义一下，端口号62001，是夜神模拟器默认的，如果你是其他的模拟器，记得查阅一下，默认端口号是多少）如下图：\"><a href=\"#9-2-重新打开一个命令窗口，执行命令-adb-connect-127-0-0-1-62001以连接模拟器，（这个地方主义一下，端口号62001，是夜神模拟器默认的，如果你是其他的模拟器，记得查阅一下，默认端口号是多少）如下图：\" class=\"headerlink\" title=\"9.2 重新打开一个命令窗口，执行命令 adb connect 127.0.0.1:62001以连接模拟器，（这个地方主义一下，端口号62001，是夜神模拟器默认的，如果你是其他的模拟器，记得查阅一下，默认端口号是多少）如下图：\"></a>9.2 重新打开一个命令窗口，执行命令 <code>adb connect 127.0.0.1:62001</code>以连接模拟器，（这个地方主义一下，端口号<code>62001</code>，是夜神模拟器默认的，如果你是其他的模拟器，记得查阅一下，默认端口号是多少）如下图：</h3><p><img src=\"13.jpg\" alt></p>\n<h3 id=\"9-3-再执行命令-react-native-run-android-这里需要说明一下，第一次启动这个命令的话，他要下载一些依赖的东西，最好是要有-t-z，不然会很慢，也可能会失败，这直接关系到最后能不能成功搭建环境，我这里是已经执行过一次这个命令了，如下图：\"><a href=\"#9-3-再执行命令-react-native-run-android-这里需要说明一下，第一次启动这个命令的话，他要下载一些依赖的东西，最好是要有-t-z，不然会很慢，也可能会失败，这直接关系到最后能不能成功搭建环境，我这里是已经执行过一次这个命令了，如下图：\" class=\"headerlink\" title=\"9.3 再执行命令 react-native run-android ,这里需要说明一下，第一次启动这个命令的话，他要下载一些依赖的东西，最好是要有 t z，不然会很慢，也可能会失败，这直接关系到最后能不能成功搭建环境，我这里是已经执行过一次这个命令了，如下图：\"></a>9.3 再执行命令 react-native run-android ,这里需要说明一下，第一次启动这个命令的话，他要下载一些依赖的东西，最好是要有 t z，不然会很慢，也可能会失败，这直接关系到最后能不能成功搭建环境，我这里是已经执行过一次这个命令了，如下图：</h3><p><img src=\"14.jpg\" alt><br><img src=\"15.jpg\" alt></p>\n<p>成功之后，你会看到你的模拟器自动打开了一个 app，但是整个页面都是红色的，想报错一样，别慌张，还有最后一步</p>\n<p><img src=\"16.jpg\" alt><br><img src=\"17.jpg\" alt></p>\n<p>输入电脑地址(<code>ipconfig =&gt; IPv4 地址</code>)+ 端口号<code>8081</code>:如图<br><img src=\"21.jpg\" alt></p>\n<p><img src=\"18.jpg\" alt></p>\n<p>最后再运行命令 react-native run-android 模拟器会出现 app 界面，</p>\n<p><img src=\"20.jpg\" alt></p>\n<p>好了，恭喜你，环境搭建好了，开始你的 RN 踩坑之路吧，</p>\n"},{"title":"React Native 搭建小白教程","date":"2019-08-06T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":false,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1347529350&auto=1&height=66\"></iframe>\n</div>\n\n前言：因为电脑是 windows 系统，为了开始 React-Native 的入坑之路，只能硬着头皮上了，搭建环境的路上走了很多的坑，现在我把我成功搭建的路子记录下来，希望帮助大家少走弯路，也让我以后再搭建的时候，有个记忆，现在正式开始......\n\n# windows 环境下搭建 React-Native 开发环境\n\n---\n\n# RN-搭建开发环境-官网\n\n- [RN-搭建开发环境-官网](https://reactnative.cn/docs/getting-started.html):https://reactnative.cn/docs/getting-started.html\n\n# 详细搭建过程\n\n## 第一步：安装 Node\n\n    Node  (>8.3)\n\n安装完 Node 后建议设置 npm 镜像以加速后面的过程（或使用科学上网工具）。\n\n    npm config set registry https://registry.npm.taobao.org --global\n    npm config set disturl https://npm.taobao.org/dist --global\n\n注意：不要使用 cnpm！cnpm 安装的模块路径比较奇怪，packager 不能正常识别！\n\n## 第二步： 安装 yarn\n\nYarn 是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。安装 yarn 需要用 npm\n\n    npm install -g yarn\n\n安装完 yarn 后同理也要设置镜像源：\n\n    yarn config set registry https://registry.npm.taobao.org --global\n    yarn config set disturl https://npm.taobao.org/dist --global\n\n安装完 yarn 之后就可以用 yarn 代替 npm 了，例如用 yarn 代替 npm install 命令，用 yarn add 代替 npm install.\n\n## 第三步: React Native 命令行工具（react-native-cli）\n\nReact Native 的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。\n\n     npm install -g react-native-cli\n\n## 第四步: Python2.x (不支持 3.x)\n\n[Python 的官网下载地址](https://www.python.org/downloads/):https://www.python.org/downloads/\n\n![](python.jpg)\n\n## 第五步: JDK (==1.8 , 不支持更高版本)\n\n[React Native 要求 JDK 的版本为 1.8，官网的下载地址](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html):https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n\n选择本系统合适的版本，即可，本人是 Windows x64 版本，即：\n\n![](jdk.jpg)\n\n安装好了之后，可以测试一下是否安装好 打开命令窗口终端（按住 windows+r ） 输入 java -version 回车 如果出现下图就安装成功了，如果不行，重启一下电脑再试\n![](2.jpg)\n\n## 第六步: 安装 Android 环境\n\n[安装 Android 环境，首先先安装 Android Studio，下载地址](http://www.android-studio.org/index.php/download);http://www.android-studio.org/index.php/download\n\n![](1.jpg)\n\n下载下来的是一个可安装程序，点击安装即可，在点击“Next”过程，有一步需要指定 Android SDK 的路径，如果之前电脑中已经存在 SDK，可以指定该路径，后续就可以不用下载 SDK；由于本地没有安装过 SDK 的场景，这里暂时可以指定一个后续将保存 SDK 的路径。\n\n点击“Finish”后，开始自动下载 SDK，此时根据网速的快慢，决定这个步骤的时间的长短，下载完成后，则会进行 Android Studio 的欢迎画面，如图\n\n![](3.jpg)\n\n### 配置环境变量（特别重要）\n\n- 鼠标右键点击计算机，选择属性之后再按下图操作\n  ![](5.jpg)\n\n然后在编辑系统变量的这个框里面的变量值中操作以下步骤\n\n1. 找到 Android SDK 的目录的路径复制添加到 path\n   ![](6.jpg)\n2. 找到 android sdk 中 platform-tools 文件的路径地址添加到 pah，记住一定要打分号哦，跟前一个路径区分开\n\n    例如我的路径就是 F:\\android-sdk_r24.4.1-windows\\android-sdk-windows\\platform-tools\n    ![](7.jpg)\n\n3. 找到`android sdk 中 tools`文件的路径地址添加到`pah` 最后点击确定 确定 确定 就完事了\n\n然后打开命令终端 `（windows + r）` 输入 adb，测试一下，只要没有报错，就成功了\n\n`我们再把java sdk配置了，按下图操作`\n\n![](8.jpg)\n\n我因为第一次搭建失败了，查了很久了，我添加了一个 Android sdk 的系统变量，第二次搭建就成功了，不知道是不是这个原因，最好添加一下吧，以防万一\n\n![](9.jpg)\n\nAndroid SDK 默认的应该是在 C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\n\n这个地方我也有一个疑问，为什么我的 android sdk 压缩包是解压在 F 盘里的，C 盘也会有一个 sdk，这个地方的配置`要用c盘的sdk`，记住了\n\n## 第七步: 安装一个模拟器 我选择的是夜神模拟器\n\n- 安装夜神模拟器，安装好之后，最好将分辨率调成`手机端`\n  [夜神官网](https://www.yeshen.com/):https://www.yeshen.com/\n\n## 第八步: 打开命令窗口，输入 react-native init firstdemo 创建项目名为`firstdemo`的文件夹\n\n之后在 firstdemo 项目目录中找到 android 目录，创建一个文件，如下图\n\n![](10.jpg)\n然后内容为：`sdk.dir=android sdk`目录路径，如下图，记住，一定是`双斜杠`，\n\n![](11.jpg)\n\n## 第九步: 连接模拟器，运行项目\n\n打开项目目录，按住 shift 键，鼠标右键点击，选择在此处打开命令窗口，输入 react-native start （启动项目服务进程），如下图\n\n![](12.jpg)\n\n接下来，刚刚的命令窗口别关闭了，重新打开一个命令窗口，连接夜神模拟器\n\n### 9.1 打开夜神模拟器\n\n### 9.2 重新打开一个命令窗口，执行命令 `adb connect 127.0.0.1:62001`以连接模拟器，（这个地方主义一下，端口号`62001`，是夜神模拟器默认的，如果你是其他的模拟器，记得查阅一下，默认端口号是多少）如下图：\n\n![](13.jpg)\n\n### 9.3 再执行命令 react-native run-android ,这里需要说明一下，第一次启动这个命令的话，他要下载一些依赖的东西，最好是要有 t z，不然会很慢，也可能会失败，这直接关系到最后能不能成功搭建环境，我这里是已经执行过一次这个命令了，如下图：\n\n![](14.jpg)\n![](15.jpg)\n\n成功之后，你会看到你的模拟器自动打开了一个 app，但是整个页面都是红色的，想报错一样，别慌张，还有最后一步\n\n![](16.jpg)\n![](17.jpg)\n\n输入电脑地址(`ipconfig => IPv4 地址`)+ 端口号`8081`:如图\n![](21.jpg)\n\n![](18.jpg)\n\n最后再运行命令 react-native run-android 模拟器会出现 app 界面，\n\n![](20.jpg)\n\n好了，恭喜你，环境搭建好了，开始你的 RN 踩坑之路吧，\n","source":"_posts/React Native 搭建教程.md","raw":"---\ntitle: React Native 搭建小白教程\ndate: 2019-8-06 12:32:09\ntop: false\ncover: false\npassword:\ntoc: false\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n  - 开发环境\ncategories:\n  - 开发环境\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1347529350&auto=1&height=66\"></iframe>\n</div>\n\n前言：因为电脑是 windows 系统，为了开始 React-Native 的入坑之路，只能硬着头皮上了，搭建环境的路上走了很多的坑，现在我把我成功搭建的路子记录下来，希望帮助大家少走弯路，也让我以后再搭建的时候，有个记忆，现在正式开始......\n\n# windows 环境下搭建 React-Native 开发环境\n\n---\n\n# RN-搭建开发环境-官网\n\n- [RN-搭建开发环境-官网](https://reactnative.cn/docs/getting-started.html):https://reactnative.cn/docs/getting-started.html\n\n# 详细搭建过程\n\n## 第一步：安装 Node\n\n    Node  (>8.3)\n\n安装完 Node 后建议设置 npm 镜像以加速后面的过程（或使用科学上网工具）。\n\n    npm config set registry https://registry.npm.taobao.org --global\n    npm config set disturl https://npm.taobao.org/dist --global\n\n注意：不要使用 cnpm！cnpm 安装的模块路径比较奇怪，packager 不能正常识别！\n\n## 第二步： 安装 yarn\n\nYarn 是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。安装 yarn 需要用 npm\n\n    npm install -g yarn\n\n安装完 yarn 后同理也要设置镜像源：\n\n    yarn config set registry https://registry.npm.taobao.org --global\n    yarn config set disturl https://npm.taobao.org/dist --global\n\n安装完 yarn 之后就可以用 yarn 代替 npm 了，例如用 yarn 代替 npm install 命令，用 yarn add 代替 npm install.\n\n## 第三步: React Native 命令行工具（react-native-cli）\n\nReact Native 的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。\n\n     npm install -g react-native-cli\n\n## 第四步: Python2.x (不支持 3.x)\n\n[Python 的官网下载地址](https://www.python.org/downloads/):https://www.python.org/downloads/\n\n![](python.jpg)\n\n## 第五步: JDK (==1.8 , 不支持更高版本)\n\n[React Native 要求 JDK 的版本为 1.8，官网的下载地址](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html):https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n\n选择本系统合适的版本，即可，本人是 Windows x64 版本，即：\n\n![](jdk.jpg)\n\n安装好了之后，可以测试一下是否安装好 打开命令窗口终端（按住 windows+r ） 输入 java -version 回车 如果出现下图就安装成功了，如果不行，重启一下电脑再试\n![](2.jpg)\n\n## 第六步: 安装 Android 环境\n\n[安装 Android 环境，首先先安装 Android Studio，下载地址](http://www.android-studio.org/index.php/download);http://www.android-studio.org/index.php/download\n\n![](1.jpg)\n\n下载下来的是一个可安装程序，点击安装即可，在点击“Next”过程，有一步需要指定 Android SDK 的路径，如果之前电脑中已经存在 SDK，可以指定该路径，后续就可以不用下载 SDK；由于本地没有安装过 SDK 的场景，这里暂时可以指定一个后续将保存 SDK 的路径。\n\n点击“Finish”后，开始自动下载 SDK，此时根据网速的快慢，决定这个步骤的时间的长短，下载完成后，则会进行 Android Studio 的欢迎画面，如图\n\n![](3.jpg)\n\n### 配置环境变量（特别重要）\n\n- 鼠标右键点击计算机，选择属性之后再按下图操作\n  ![](5.jpg)\n\n然后在编辑系统变量的这个框里面的变量值中操作以下步骤\n\n1. 找到 Android SDK 的目录的路径复制添加到 path\n   ![](6.jpg)\n2. 找到 android sdk 中 platform-tools 文件的路径地址添加到 pah，记住一定要打分号哦，跟前一个路径区分开\n\n    例如我的路径就是 F:\\android-sdk_r24.4.1-windows\\android-sdk-windows\\platform-tools\n    ![](7.jpg)\n\n3. 找到`android sdk 中 tools`文件的路径地址添加到`pah` 最后点击确定 确定 确定 就完事了\n\n然后打开命令终端 `（windows + r）` 输入 adb，测试一下，只要没有报错，就成功了\n\n`我们再把java sdk配置了，按下图操作`\n\n![](8.jpg)\n\n我因为第一次搭建失败了，查了很久了，我添加了一个 Android sdk 的系统变量，第二次搭建就成功了，不知道是不是这个原因，最好添加一下吧，以防万一\n\n![](9.jpg)\n\nAndroid SDK 默认的应该是在 C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\n\n这个地方我也有一个疑问，为什么我的 android sdk 压缩包是解压在 F 盘里的，C 盘也会有一个 sdk，这个地方的配置`要用c盘的sdk`，记住了\n\n## 第七步: 安装一个模拟器 我选择的是夜神模拟器\n\n- 安装夜神模拟器，安装好之后，最好将分辨率调成`手机端`\n  [夜神官网](https://www.yeshen.com/):https://www.yeshen.com/\n\n## 第八步: 打开命令窗口，输入 react-native init firstdemo 创建项目名为`firstdemo`的文件夹\n\n之后在 firstdemo 项目目录中找到 android 目录，创建一个文件，如下图\n\n![](10.jpg)\n然后内容为：`sdk.dir=android sdk`目录路径，如下图，记住，一定是`双斜杠`，\n\n![](11.jpg)\n\n## 第九步: 连接模拟器，运行项目\n\n打开项目目录，按住 shift 键，鼠标右键点击，选择在此处打开命令窗口，输入 react-native start （启动项目服务进程），如下图\n\n![](12.jpg)\n\n接下来，刚刚的命令窗口别关闭了，重新打开一个命令窗口，连接夜神模拟器\n\n### 9.1 打开夜神模拟器\n\n### 9.2 重新打开一个命令窗口，执行命令 `adb connect 127.0.0.1:62001`以连接模拟器，（这个地方主义一下，端口号`62001`，是夜神模拟器默认的，如果你是其他的模拟器，记得查阅一下，默认端口号是多少）如下图：\n\n![](13.jpg)\n\n### 9.3 再执行命令 react-native run-android ,这里需要说明一下，第一次启动这个命令的话，他要下载一些依赖的东西，最好是要有 t z，不然会很慢，也可能会失败，这直接关系到最后能不能成功搭建环境，我这里是已经执行过一次这个命令了，如下图：\n\n![](14.jpg)\n![](15.jpg)\n\n成功之后，你会看到你的模拟器自动打开了一个 app，但是整个页面都是红色的，想报错一样，别慌张，还有最后一步\n\n![](16.jpg)\n![](17.jpg)\n\n输入电脑地址(`ipconfig => IPv4 地址`)+ 端口号`8081`:如图\n![](21.jpg)\n\n![](18.jpg)\n\n最后再运行命令 react-native run-android 模拟器会出现 app 界面，\n\n![](20.jpg)\n\n好了，恭喜你，环境搭建好了，开始你的 RN 踩坑之路吧，\n","slug":"React Native 搭建教程","published":1,"updated":"2020-05-29T01:19:30.475Z","_id":"ckari24xf000h5sjohwy776tq","comments":1,"layout":"post","photos":[],"link":"","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=1347529350&auto=1&height=66\"></iframe>\n</div>\n\n<p>前言：因为电脑是 windows 系统，为了开始 React-Native 的入坑之路，只能硬着头皮上了，搭建环境的路上走了很多的坑，现在我把我成功搭建的路子记录下来，希望帮助大家少走弯路，也让我以后再搭建的时候，有个记忆，现在正式开始……</p>\n<h1 id=\"windows-环境下搭建-React-Native-开发环境\"><a href=\"#windows-环境下搭建-React-Native-开发环境\" class=\"headerlink\" title=\"windows 环境下搭建 React-Native 开发环境\"></a>windows 环境下搭建 React-Native 开发环境</h1><hr>\n<h1 id=\"RN-搭建开发环境-官网\"><a href=\"#RN-搭建开发环境-官网\" class=\"headerlink\" title=\"RN-搭建开发环境-官网\"></a>RN-搭建开发环境-官网</h1><ul>\n<li><a href=\"https://reactnative.cn/docs/getting-started.html\" target=\"_blank\" rel=\"noopener\">RN-搭建开发环境-官网</a>:<a href=\"https://reactnative.cn/docs/getting-started.html\" target=\"_blank\" rel=\"noopener\">https://reactnative.cn/docs/getting-started.html</a></li>\n</ul>\n<h1 id=\"详细搭建过程\"><a href=\"#详细搭建过程\" class=\"headerlink\" title=\"详细搭建过程\"></a>详细搭建过程</h1><h2 id=\"第一步：安装-Node\"><a href=\"#第一步：安装-Node\" class=\"headerlink\" title=\"第一步：安装 Node\"></a>第一步：安装 Node</h2><pre><code>Node  (&gt;8.3)</code></pre><p>安装完 Node 后建议设置 npm 镜像以加速后面的过程（或使用科学上网工具）。</p>\n<pre><code>npm config set registry https://registry.npm.taobao.org --global\nnpm config set disturl https://npm.taobao.org/dist --global</code></pre><p>注意：不要使用 cnpm！cnpm 安装的模块路径比较奇怪，packager 不能正常识别！</p>\n<h2 id=\"第二步：-安装-yarn\"><a href=\"#第二步：-安装-yarn\" class=\"headerlink\" title=\"第二步： 安装 yarn\"></a>第二步： 安装 yarn</h2><p>Yarn 是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。安装 yarn 需要用 npm</p>\n<pre><code>npm install -g yarn</code></pre><p>安装完 yarn 后同理也要设置镜像源：</p>\n<pre><code>yarn config set registry https://registry.npm.taobao.org --global\nyarn config set disturl https://npm.taobao.org/dist --global</code></pre><p>安装完 yarn 之后就可以用 yarn 代替 npm 了，例如用 yarn 代替 npm install 命令，用 yarn add 代替 npm install.</p>\n<h2 id=\"第三步-React-Native-命令行工具（react-native-cli）\"><a href=\"#第三步-React-Native-命令行工具（react-native-cli）\" class=\"headerlink\" title=\"第三步: React Native 命令行工具（react-native-cli）\"></a>第三步: React Native 命令行工具（react-native-cli）</h2><p>React Native 的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。</p>\n<pre><code> npm install -g react-native-cli</code></pre><h2 id=\"第四步-Python2-x-不支持-3-x\"><a href=\"#第四步-Python2-x-不支持-3-x\" class=\"headerlink\" title=\"第四步: Python2.x (不支持 3.x)\"></a>第四步: Python2.x (不支持 3.x)</h2><p><a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"noopener\">Python 的官网下载地址</a>:<a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"noopener\">https://www.python.org/downloads/</a></p>\n<p><img src=\"python.jpg\" alt></p>\n<h2 id=\"第五步-JDK-1-8-不支持更高版本\"><a href=\"#第五步-JDK-1-8-不支持更高版本\" class=\"headerlink\" title=\"第五步: JDK (==1.8 , 不支持更高版本)\"></a>第五步: JDK (==1.8 , 不支持更高版本)</h2><p><a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">React Native 要求 JDK 的版本为 1.8，官网的下载地址</a>:<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>\n<p>选择本系统合适的版本，即可，本人是 Windows x64 版本，即：</p>\n<p><img src=\"jdk.jpg\" alt></p>\n<p>安装好了之后，可以测试一下是否安装好 打开命令窗口终端（按住 windows+r ） 输入 java -version 回车 如果出现下图就安装成功了，如果不行，重启一下电脑再试<br><img src=\"2.jpg\" alt></p>\n<h2 id=\"第六步-安装-Android-环境\"><a href=\"#第六步-安装-Android-环境\" class=\"headerlink\" title=\"第六步: 安装 Android 环境\"></a>第六步: 安装 Android 环境</h2><p><a href=\"http://www.android-studio.org/index.php/download\" target=\"_blank\" rel=\"noopener\">安装 Android 环境，首先先安装 Android Studio，下载地址</a>;<a href=\"http://www.android-studio.org/index.php/download\" target=\"_blank\" rel=\"noopener\">http://www.android-studio.org/index.php/download</a></p>\n<p><img src=\"1.jpg\" alt></p>\n<p>下载下来的是一个可安装程序，点击安装即可，在点击“Next”过程，有一步需要指定 Android SDK 的路径，如果之前电脑中已经存在 SDK，可以指定该路径，后续就可以不用下载 SDK；由于本地没有安装过 SDK 的场景，这里暂时可以指定一个后续将保存 SDK 的路径。</p>\n<p>点击“Finish”后，开始自动下载 SDK，此时根据网速的快慢，决定这个步骤的时间的长短，下载完成后，则会进行 Android Studio 的欢迎画面，如图</p>\n<p><img src=\"3.jpg\" alt></p>\n<h3 id=\"配置环境变量（特别重要）\"><a href=\"#配置环境变量（特别重要）\" class=\"headerlink\" title=\"配置环境变量（特别重要）\"></a>配置环境变量（特别重要）</h3><ul>\n<li>鼠标右键点击计算机，选择属性之后再按下图操作<br><img src=\"5.jpg\" alt></li>\n</ul>\n<p>然后在编辑系统变量的这个框里面的变量值中操作以下步骤</p>\n<ol>\n<li><p>找到 Android SDK 的目录的路径复制添加到 path<br><img src=\"6.jpg\" alt></p>\n</li>\n<li><p>找到 android sdk 中 platform-tools 文件的路径地址添加到 pah，记住一定要打分号哦，跟前一个路径区分开</p>\n<p> 例如我的路径就是 F:\\android-sdk_r24.4.1-windows\\android-sdk-windows\\platform-tools<br> <img src=\"7.jpg\" alt></p>\n</li>\n<li><p>找到<code>android sdk 中 tools</code>文件的路径地址添加到<code>pah</code> 最后点击确定 确定 确定 就完事了</p>\n</li>\n</ol>\n<p>然后打开命令终端 <code>（windows + r）</code> 输入 adb，测试一下，只要没有报错，就成功了</p>\n<p><code>我们再把java sdk配置了，按下图操作</code></p>\n<p><img src=\"8.jpg\" alt></p>\n<p>我因为第一次搭建失败了，查了很久了，我添加了一个 Android sdk 的系统变量，第二次搭建就成功了，不知道是不是这个原因，最好添加一下吧，以防万一</p>\n<p><img src=\"9.jpg\" alt></p>\n<p>Android SDK 默认的应该是在 C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk</p>\n<p>这个地方我也有一个疑问，为什么我的 android sdk 压缩包是解压在 F 盘里的，C 盘也会有一个 sdk，这个地方的配置<code>要用c盘的sdk</code>，记住了</p>\n<h2 id=\"第七步-安装一个模拟器-我选择的是夜神模拟器\"><a href=\"#第七步-安装一个模拟器-我选择的是夜神模拟器\" class=\"headerlink\" title=\"第七步: 安装一个模拟器 我选择的是夜神模拟器\"></a>第七步: 安装一个模拟器 我选择的是夜神模拟器</h2><ul>\n<li>安装夜神模拟器，安装好之后，最好将分辨率调成<code>手机端</code><br><a href=\"https://www.yeshen.com/\" target=\"_blank\" rel=\"noopener\">夜神官网</a>:<a href=\"https://www.yeshen.com/\" target=\"_blank\" rel=\"noopener\">https://www.yeshen.com/</a></li>\n</ul>\n<h2 id=\"第八步-打开命令窗口，输入-react-native-init-firstdemo-创建项目名为firstdemo的文件夹\"><a href=\"#第八步-打开命令窗口，输入-react-native-init-firstdemo-创建项目名为firstdemo的文件夹\" class=\"headerlink\" title=\"第八步: 打开命令窗口，输入 react-native init firstdemo 创建项目名为firstdemo的文件夹\"></a>第八步: 打开命令窗口，输入 react-native init firstdemo 创建项目名为<code>firstdemo</code>的文件夹</h2><p>之后在 firstdemo 项目目录中找到 android 目录，创建一个文件，如下图</p>\n<p><img src=\"10.jpg\" alt><br>然后内容为：<code>sdk.dir=android sdk</code>目录路径，如下图，记住，一定是<code>双斜杠</code>，</p>\n<p><img src=\"11.jpg\" alt></p>\n<h2 id=\"第九步-连接模拟器，运行项目\"><a href=\"#第九步-连接模拟器，运行项目\" class=\"headerlink\" title=\"第九步: 连接模拟器，运行项目\"></a>第九步: 连接模拟器，运行项目</h2><p>打开项目目录，按住 shift 键，鼠标右键点击，选择在此处打开命令窗口，输入 react-native start （启动项目服务进程），如下图</p>\n<p><img src=\"12.jpg\" alt></p>\n<p>接下来，刚刚的命令窗口别关闭了，重新打开一个命令窗口，连接夜神模拟器</p>\n<h3 id=\"9-1-打开夜神模拟器\"><a href=\"#9-1-打开夜神模拟器\" class=\"headerlink\" title=\"9.1 打开夜神模拟器\"></a>9.1 打开夜神模拟器</h3><h3 id=\"9-2-重新打开一个命令窗口，执行命令-adb-connect-127-0-0-1-62001以连接模拟器，（这个地方主义一下，端口号62001，是夜神模拟器默认的，如果你是其他的模拟器，记得查阅一下，默认端口号是多少）如下图：\"><a href=\"#9-2-重新打开一个命令窗口，执行命令-adb-connect-127-0-0-1-62001以连接模拟器，（这个地方主义一下，端口号62001，是夜神模拟器默认的，如果你是其他的模拟器，记得查阅一下，默认端口号是多少）如下图：\" class=\"headerlink\" title=\"9.2 重新打开一个命令窗口，执行命令 adb connect 127.0.0.1:62001以连接模拟器，（这个地方主义一下，端口号62001，是夜神模拟器默认的，如果你是其他的模拟器，记得查阅一下，默认端口号是多少）如下图：\"></a>9.2 重新打开一个命令窗口，执行命令 <code>adb connect 127.0.0.1:62001</code>以连接模拟器，（这个地方主义一下，端口号<code>62001</code>，是夜神模拟器默认的，如果你是其他的模拟器，记得查阅一下，默认端口号是多少）如下图：</h3><p><img src=\"13.jpg\" alt></p>\n<h3 id=\"9-3-再执行命令-react-native-run-android-这里需要说明一下，第一次启动这个命令的话，他要下载一些依赖的东西，最好是要有-t-z，不然会很慢，也可能会失败，这直接关系到最后能不能成功搭建环境，我这里是已经执行过一次这个命令了，如下图：\"><a href=\"#9-3-再执行命令-react-native-run-android-这里需要说明一下，第一次启动这个命令的话，他要下载一些依赖的东西，最好是要有-t-z，不然会很慢，也可能会失败，这直接关系到最后能不能成功搭建环境，我这里是已经执行过一次这个命令了，如下图：\" class=\"headerlink\" title=\"9.3 再执行命令 react-native run-android ,这里需要说明一下，第一次启动这个命令的话，他要下载一些依赖的东西，最好是要有 t z，不然会很慢，也可能会失败，这直接关系到最后能不能成功搭建环境，我这里是已经执行过一次这个命令了，如下图：\"></a>9.3 再执行命令 react-native run-android ,这里需要说明一下，第一次启动这个命令的话，他要下载一些依赖的东西，最好是要有 t z，不然会很慢，也可能会失败，这直接关系到最后能不能成功搭建环境，我这里是已经执行过一次这个命令了，如下图：</h3><p><img src=\"14.jpg\" alt><br><img src=\"15.jpg\" alt></p>\n<p>成功之后，你会看到你的模拟器自动打开了一个 app，但是整个页面都是红色的，想报错一样，别慌张，还有最后一步</p>\n<p><img src=\"16.jpg\" alt><br><img src=\"17.jpg\" alt></p>\n<p>输入电脑地址(<code>ipconfig =&gt; IPv4 地址</code>)+ 端口号<code>8081</code>:如图<br><img src=\"21.jpg\" alt></p>\n<p><img src=\"18.jpg\" alt></p>\n<p>最后再运行命令 react-native run-android 模拟器会出现 app 界面，</p>\n<p><img src=\"20.jpg\" alt></p>\n<p>好了，恭喜你，环境搭建好了，开始你的 RN 踩坑之路吧，</p>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=1347529350&auto=1&height=66\"></iframe>\n</div>\n\n<p>前言：因为电脑是 windows 系统，为了开始 React-Native 的入坑之路，只能硬着头皮上了，搭建环境的路上走了很多的坑，现在我把我成功搭建的路子记录下来，希望帮助大家少走弯路，也让我以后再搭建的时候，有个记忆，现在正式开始……</p>\n<h1 id=\"windows-环境下搭建-React-Native-开发环境\"><a href=\"#windows-环境下搭建-React-Native-开发环境\" class=\"headerlink\" title=\"windows 环境下搭建 React-Native 开发环境\"></a>windows 环境下搭建 React-Native 开发环境</h1><hr>\n<h1 id=\"RN-搭建开发环境-官网\"><a href=\"#RN-搭建开发环境-官网\" class=\"headerlink\" title=\"RN-搭建开发环境-官网\"></a>RN-搭建开发环境-官网</h1><ul>\n<li><a href=\"https://reactnative.cn/docs/getting-started.html\" target=\"_blank\" rel=\"noopener\">RN-搭建开发环境-官网</a>:<a href=\"https://reactnative.cn/docs/getting-started.html\" target=\"_blank\" rel=\"noopener\">https://reactnative.cn/docs/getting-started.html</a></li>\n</ul>\n<h1 id=\"详细搭建过程\"><a href=\"#详细搭建过程\" class=\"headerlink\" title=\"详细搭建过程\"></a>详细搭建过程</h1><h2 id=\"第一步：安装-Node\"><a href=\"#第一步：安装-Node\" class=\"headerlink\" title=\"第一步：安装 Node\"></a>第一步：安装 Node</h2><pre><code>Node  (&gt;8.3)</code></pre><p>安装完 Node 后建议设置 npm 镜像以加速后面的过程（或使用科学上网工具）。</p>\n<pre><code>npm config set registry https://registry.npm.taobao.org --global\nnpm config set disturl https://npm.taobao.org/dist --global</code></pre><p>注意：不要使用 cnpm！cnpm 安装的模块路径比较奇怪，packager 不能正常识别！</p>\n<h2 id=\"第二步：-安装-yarn\"><a href=\"#第二步：-安装-yarn\" class=\"headerlink\" title=\"第二步： 安装 yarn\"></a>第二步： 安装 yarn</h2><p>Yarn 是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。安装 yarn 需要用 npm</p>\n<pre><code>npm install -g yarn</code></pre><p>安装完 yarn 后同理也要设置镜像源：</p>\n<pre><code>yarn config set registry https://registry.npm.taobao.org --global\nyarn config set disturl https://npm.taobao.org/dist --global</code></pre><p>安装完 yarn 之后就可以用 yarn 代替 npm 了，例如用 yarn 代替 npm install 命令，用 yarn add 代替 npm install.</p>\n<h2 id=\"第三步-React-Native-命令行工具（react-native-cli）\"><a href=\"#第三步-React-Native-命令行工具（react-native-cli）\" class=\"headerlink\" title=\"第三步: React Native 命令行工具（react-native-cli）\"></a>第三步: React Native 命令行工具（react-native-cli）</h2><p>React Native 的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。</p>\n<pre><code> npm install -g react-native-cli</code></pre><h2 id=\"第四步-Python2-x-不支持-3-x\"><a href=\"#第四步-Python2-x-不支持-3-x\" class=\"headerlink\" title=\"第四步: Python2.x (不支持 3.x)\"></a>第四步: Python2.x (不支持 3.x)</h2><p><a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"noopener\">Python 的官网下载地址</a>:<a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"noopener\">https://www.python.org/downloads/</a></p>\n<p><img src=\"python.jpg\" alt></p>\n<h2 id=\"第五步-JDK-1-8-不支持更高版本\"><a href=\"#第五步-JDK-1-8-不支持更高版本\" class=\"headerlink\" title=\"第五步: JDK (==1.8 , 不支持更高版本)\"></a>第五步: JDK (==1.8 , 不支持更高版本)</h2><p><a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">React Native 要求 JDK 的版本为 1.8，官网的下载地址</a>:<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>\n<p>选择本系统合适的版本，即可，本人是 Windows x64 版本，即：</p>\n<p><img src=\"jdk.jpg\" alt></p>\n<p>安装好了之后，可以测试一下是否安装好 打开命令窗口终端（按住 windows+r ） 输入 java -version 回车 如果出现下图就安装成功了，如果不行，重启一下电脑再试<br><img src=\"2.jpg\" alt></p>\n<h2 id=\"第六步-安装-Android-环境\"><a href=\"#第六步-安装-Android-环境\" class=\"headerlink\" title=\"第六步: 安装 Android 环境\"></a>第六步: 安装 Android 环境</h2><p><a href=\"http://www.android-studio.org/index.php/download\" target=\"_blank\" rel=\"noopener\">安装 Android 环境，首先先安装 Android Studio，下载地址</a>;<a href=\"http://www.android-studio.org/index.php/download\" target=\"_blank\" rel=\"noopener\">http://www.android-studio.org/index.php/download</a></p>\n<p><img src=\"1.jpg\" alt></p>\n<p>下载下来的是一个可安装程序，点击安装即可，在点击“Next”过程，有一步需要指定 Android SDK 的路径，如果之前电脑中已经存在 SDK，可以指定该路径，后续就可以不用下载 SDK；由于本地没有安装过 SDK 的场景，这里暂时可以指定一个后续将保存 SDK 的路径。</p>\n<p>点击“Finish”后，开始自动下载 SDK，此时根据网速的快慢，决定这个步骤的时间的长短，下载完成后，则会进行 Android Studio 的欢迎画面，如图</p>\n<p><img src=\"3.jpg\" alt></p>\n<h3 id=\"配置环境变量（特别重要）\"><a href=\"#配置环境变量（特别重要）\" class=\"headerlink\" title=\"配置环境变量（特别重要）\"></a>配置环境变量（特别重要）</h3><ul>\n<li>鼠标右键点击计算机，选择属性之后再按下图操作<br><img src=\"5.jpg\" alt></li>\n</ul>\n<p>然后在编辑系统变量的这个框里面的变量值中操作以下步骤</p>\n<ol>\n<li><p>找到 Android SDK 的目录的路径复制添加到 path<br><img src=\"6.jpg\" alt></p>\n</li>\n<li><p>找到 android sdk 中 platform-tools 文件的路径地址添加到 pah，记住一定要打分号哦，跟前一个路径区分开</p>\n<p> 例如我的路径就是 F:\\android-sdk_r24.4.1-windows\\android-sdk-windows\\platform-tools<br> <img src=\"7.jpg\" alt></p>\n</li>\n<li><p>找到<code>android sdk 中 tools</code>文件的路径地址添加到<code>pah</code> 最后点击确定 确定 确定 就完事了</p>\n</li>\n</ol>\n<p>然后打开命令终端 <code>（windows + r）</code> 输入 adb，测试一下，只要没有报错，就成功了</p>\n<p><code>我们再把java sdk配置了，按下图操作</code></p>\n<p><img src=\"8.jpg\" alt></p>\n<p>我因为第一次搭建失败了，查了很久了，我添加了一个 Android sdk 的系统变量，第二次搭建就成功了，不知道是不是这个原因，最好添加一下吧，以防万一</p>\n<p><img src=\"9.jpg\" alt></p>\n<p>Android SDK 默认的应该是在 C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk</p>\n<p>这个地方我也有一个疑问，为什么我的 android sdk 压缩包是解压在 F 盘里的，C 盘也会有一个 sdk，这个地方的配置<code>要用c盘的sdk</code>，记住了</p>\n<h2 id=\"第七步-安装一个模拟器-我选择的是夜神模拟器\"><a href=\"#第七步-安装一个模拟器-我选择的是夜神模拟器\" class=\"headerlink\" title=\"第七步: 安装一个模拟器 我选择的是夜神模拟器\"></a>第七步: 安装一个模拟器 我选择的是夜神模拟器</h2><ul>\n<li>安装夜神模拟器，安装好之后，最好将分辨率调成<code>手机端</code><br><a href=\"https://www.yeshen.com/\" target=\"_blank\" rel=\"noopener\">夜神官网</a>:<a href=\"https://www.yeshen.com/\" target=\"_blank\" rel=\"noopener\">https://www.yeshen.com/</a></li>\n</ul>\n<h2 id=\"第八步-打开命令窗口，输入-react-native-init-firstdemo-创建项目名为firstdemo的文件夹\"><a href=\"#第八步-打开命令窗口，输入-react-native-init-firstdemo-创建项目名为firstdemo的文件夹\" class=\"headerlink\" title=\"第八步: 打开命令窗口，输入 react-native init firstdemo 创建项目名为firstdemo的文件夹\"></a>第八步: 打开命令窗口，输入 react-native init firstdemo 创建项目名为<code>firstdemo</code>的文件夹</h2><p>之后在 firstdemo 项目目录中找到 android 目录，创建一个文件，如下图</p>\n<p><img src=\"10.jpg\" alt><br>然后内容为：<code>sdk.dir=android sdk</code>目录路径，如下图，记住，一定是<code>双斜杠</code>，</p>\n<p><img src=\"11.jpg\" alt></p>\n<h2 id=\"第九步-连接模拟器，运行项目\"><a href=\"#第九步-连接模拟器，运行项目\" class=\"headerlink\" title=\"第九步: 连接模拟器，运行项目\"></a>第九步: 连接模拟器，运行项目</h2><p>打开项目目录，按住 shift 键，鼠标右键点击，选择在此处打开命令窗口，输入 react-native start （启动项目服务进程），如下图</p>\n<p><img src=\"12.jpg\" alt></p>\n<p>接下来，刚刚的命令窗口别关闭了，重新打开一个命令窗口，连接夜神模拟器</p>\n<h3 id=\"9-1-打开夜神模拟器\"><a href=\"#9-1-打开夜神模拟器\" class=\"headerlink\" title=\"9.1 打开夜神模拟器\"></a>9.1 打开夜神模拟器</h3><h3 id=\"9-2-重新打开一个命令窗口，执行命令-adb-connect-127-0-0-1-62001以连接模拟器，（这个地方主义一下，端口号62001，是夜神模拟器默认的，如果你是其他的模拟器，记得查阅一下，默认端口号是多少）如下图：\"><a href=\"#9-2-重新打开一个命令窗口，执行命令-adb-connect-127-0-0-1-62001以连接模拟器，（这个地方主义一下，端口号62001，是夜神模拟器默认的，如果你是其他的模拟器，记得查阅一下，默认端口号是多少）如下图：\" class=\"headerlink\" title=\"9.2 重新打开一个命令窗口，执行命令 adb connect 127.0.0.1:62001以连接模拟器，（这个地方主义一下，端口号62001，是夜神模拟器默认的，如果你是其他的模拟器，记得查阅一下，默认端口号是多少）如下图：\"></a>9.2 重新打开一个命令窗口，执行命令 <code>adb connect 127.0.0.1:62001</code>以连接模拟器，（这个地方主义一下，端口号<code>62001</code>，是夜神模拟器默认的，如果你是其他的模拟器，记得查阅一下，默认端口号是多少）如下图：</h3><p><img src=\"13.jpg\" alt></p>\n<h3 id=\"9-3-再执行命令-react-native-run-android-这里需要说明一下，第一次启动这个命令的话，他要下载一些依赖的东西，最好是要有-t-z，不然会很慢，也可能会失败，这直接关系到最后能不能成功搭建环境，我这里是已经执行过一次这个命令了，如下图：\"><a href=\"#9-3-再执行命令-react-native-run-android-这里需要说明一下，第一次启动这个命令的话，他要下载一些依赖的东西，最好是要有-t-z，不然会很慢，也可能会失败，这直接关系到最后能不能成功搭建环境，我这里是已经执行过一次这个命令了，如下图：\" class=\"headerlink\" title=\"9.3 再执行命令 react-native run-android ,这里需要说明一下，第一次启动这个命令的话，他要下载一些依赖的东西，最好是要有 t z，不然会很慢，也可能会失败，这直接关系到最后能不能成功搭建环境，我这里是已经执行过一次这个命令了，如下图：\"></a>9.3 再执行命令 react-native run-android ,这里需要说明一下，第一次启动这个命令的话，他要下载一些依赖的东西，最好是要有 t z，不然会很慢，也可能会失败，这直接关系到最后能不能成功搭建环境，我这里是已经执行过一次这个命令了，如下图：</h3><p><img src=\"14.jpg\" alt><br><img src=\"15.jpg\" alt></p>\n<p>成功之后，你会看到你的模拟器自动打开了一个 app，但是整个页面都是红色的，想报错一样，别慌张，还有最后一步</p>\n<p><img src=\"16.jpg\" alt><br><img src=\"17.jpg\" alt></p>\n<p>输入电脑地址(<code>ipconfig =&gt; IPv4 地址</code>)+ 端口号<code>8081</code>:如图<br><img src=\"21.jpg\" alt></p>\n<p><img src=\"18.jpg\" alt></p>\n<p>最后再运行命令 react-native run-android 模拟器会出现 app 界面，</p>\n<p><img src=\"20.jpg\" alt></p>\n<p>好了，恭喜你，环境搭建好了，开始你的 RN 踩坑之路吧，</p>\n"},{"title":"React-Native入坑之路 (一)","date":"2019-08-22T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=525454434&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# React-Native 入坑之路(一)\n\n---\n\n## 1. React-navigation 使用\n\n ###  1.导入依赖库\n\n       npm install react-navigation --save\n\n  然后在 package.json 文件中就可以看到，依赖库已经导入完毕：\n\n       \"react-native-tab-navigator\": \"^0.3.4\",\n\n### 2. 配置Navigator\n\n+ 引入\n![](1.jpg)\n\n+ 使用\n[React-navigation使用攻略](https://www.jianshu.com/p/f39f020197ef)\n\n## 2. react-native-px2dp\n+ 安装 \n    npm install react-native-px2dp --save\n\n+ 使用[React native 分辨率适配(px,dp)](https://www.jianshu.com/p/7836523b4d20)\n      import px2dp from '../../util/px2dp'\n      'use strict';\n\n      import {Dimensions} from 'react-native'\n\n      const deviceH = Dimensions.get('window').height\n      const deviceW = Dimensions.get('window').width\n\n      const basePx = 750\n\n      export default function px2dp(px) {\n          return px *  deviceW / basePx\n      }\n\n## 3. Dimensions 获取当前屏幕的宽高\n\n    const { deviceWidth, deviceHeight } = Dimensions.get('window');\n\n## 4. AsyncStorage 本都存储\n[ReactNative之AsyncStorage本地存储](https://www.jianshu.com/p/abf4e19f245c):https://www.jianshu.com/p/abf4e19f245c\n\n## 5. StatusBar的使用详解\n[StatusBar的使用详解](https://www.jianshu.com/p/cff86e199c93):https://www.jianshu.com/p/cff86e199c93\n\n## 6. ViewPagerAndroid\n[官网](https://reactnative.cn/docs/next/viewpagerandroid.html)\n[React-Native ViewPagerAndroid使用](https://www.jianshu.com/p/699a3b7da848)\n\n## 7. React Native 高德地图组件的使用（react-native-amap3d）\n\n[高德地图组件的使用](https://www.jianshu.com/p/fe90fc6a0308):https://www.jianshu.com/p/fe90fc6a0308\n\n[高德地图组件react-native-amap3d](https://blog.csdn.net/IT_luntan/article/details/78982497)\n","source":"_posts/React-Native入坑之路.md","raw":"---\ntitle: React-Native入坑之路 (一)\ndate: 2019-8-22 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n  - RN\ncategories:\n  - RN\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=525454434&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# React-Native 入坑之路(一)\n\n---\n\n## 1. React-navigation 使用\n\n ###  1.导入依赖库\n\n       npm install react-navigation --save\n\n  然后在 package.json 文件中就可以看到，依赖库已经导入完毕：\n\n       \"react-native-tab-navigator\": \"^0.3.4\",\n\n### 2. 配置Navigator\n\n+ 引入\n![](1.jpg)\n\n+ 使用\n[React-navigation使用攻略](https://www.jianshu.com/p/f39f020197ef)\n\n## 2. react-native-px2dp\n+ 安装 \n    npm install react-native-px2dp --save\n\n+ 使用[React native 分辨率适配(px,dp)](https://www.jianshu.com/p/7836523b4d20)\n      import px2dp from '../../util/px2dp'\n      'use strict';\n\n      import {Dimensions} from 'react-native'\n\n      const deviceH = Dimensions.get('window').height\n      const deviceW = Dimensions.get('window').width\n\n      const basePx = 750\n\n      export default function px2dp(px) {\n          return px *  deviceW / basePx\n      }\n\n## 3. Dimensions 获取当前屏幕的宽高\n\n    const { deviceWidth, deviceHeight } = Dimensions.get('window');\n\n## 4. AsyncStorage 本都存储\n[ReactNative之AsyncStorage本地存储](https://www.jianshu.com/p/abf4e19f245c):https://www.jianshu.com/p/abf4e19f245c\n\n## 5. StatusBar的使用详解\n[StatusBar的使用详解](https://www.jianshu.com/p/cff86e199c93):https://www.jianshu.com/p/cff86e199c93\n\n## 6. ViewPagerAndroid\n[官网](https://reactnative.cn/docs/next/viewpagerandroid.html)\n[React-Native ViewPagerAndroid使用](https://www.jianshu.com/p/699a3b7da848)\n\n## 7. React Native 高德地图组件的使用（react-native-amap3d）\n\n[高德地图组件的使用](https://www.jianshu.com/p/fe90fc6a0308):https://www.jianshu.com/p/fe90fc6a0308\n\n[高德地图组件react-native-amap3d](https://blog.csdn.net/IT_luntan/article/details/78982497)\n","slug":"React-Native入坑之路","published":1,"updated":"2020-05-29T01:20:05.690Z","_id":"ckari24xj000i5sjor52wm7wa","comments":1,"layout":"post","photos":[],"link":"","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=525454434&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"React-Native-入坑之路-一\"><a href=\"#React-Native-入坑之路-一\" class=\"headerlink\" title=\"React-Native 入坑之路(一)\"></a>React-Native 入坑之路(一)</h1><hr>\n<h2 id=\"1-React-navigation-使用\"><a href=\"#1-React-navigation-使用\" class=\"headerlink\" title=\"1. React-navigation 使用\"></a>1. React-navigation 使用</h2><h3 id=\"1-导入依赖库\"><a href=\"#1-导入依赖库\" class=\"headerlink\" title=\"1.导入依赖库\"></a>1.导入依赖库</h3><pre><code>   npm install react-navigation --save</code></pre><p>  然后在 package.json 文件中就可以看到，依赖库已经导入完毕：</p>\n<pre><code>   &quot;react-native-tab-navigator&quot;: &quot;^0.3.4&quot;,</code></pre><h3 id=\"2-配置Navigator\"><a href=\"#2-配置Navigator\" class=\"headerlink\" title=\"2. 配置Navigator\"></a>2. 配置Navigator</h3><ul>\n<li><p>引入<br><img src=\"1.jpg\" alt></p>\n</li>\n<li><p>使用<br><a href=\"https://www.jianshu.com/p/f39f020197ef\" target=\"_blank\" rel=\"noopener\">React-navigation使用攻略</a></p>\n</li>\n</ul>\n<h2 id=\"2-react-native-px2dp\"><a href=\"#2-react-native-px2dp\" class=\"headerlink\" title=\"2. react-native-px2dp\"></a>2. react-native-px2dp</h2><ul>\n<li><p>安装<br>  npm install react-native-px2dp –save</p>\n</li>\n<li><p>使用<a href=\"https://www.jianshu.com/p/7836523b4d20\" target=\"_blank\" rel=\"noopener\">React native 分辨率适配(px,dp)</a></p>\n<pre><code>import px2dp from &#39;../../util/px2dp&#39;\n&#39;use strict&#39;;\n\nimport {Dimensions} from &#39;react-native&#39;\n\nconst deviceH = Dimensions.get(&#39;window&#39;).height\nconst deviceW = Dimensions.get(&#39;window&#39;).width\n\nconst basePx = 750\n\nexport default function px2dp(px) {\n    return px *  deviceW / basePx\n}</code></pre></li>\n</ul>\n<h2 id=\"3-Dimensions-获取当前屏幕的宽高\"><a href=\"#3-Dimensions-获取当前屏幕的宽高\" class=\"headerlink\" title=\"3. Dimensions 获取当前屏幕的宽高\"></a>3. Dimensions 获取当前屏幕的宽高</h2><pre><code>const { deviceWidth, deviceHeight } = Dimensions.get(&#39;window&#39;);</code></pre><h2 id=\"4-AsyncStorage-本都存储\"><a href=\"#4-AsyncStorage-本都存储\" class=\"headerlink\" title=\"4. AsyncStorage 本都存储\"></a>4. AsyncStorage 本都存储</h2><p><a href=\"https://www.jianshu.com/p/abf4e19f245c\" target=\"_blank\" rel=\"noopener\">ReactNative之AsyncStorage本地存储</a>:<a href=\"https://www.jianshu.com/p/abf4e19f245c\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/abf4e19f245c</a></p>\n<h2 id=\"5-StatusBar的使用详解\"><a href=\"#5-StatusBar的使用详解\" class=\"headerlink\" title=\"5. StatusBar的使用详解\"></a>5. StatusBar的使用详解</h2><p><a href=\"https://www.jianshu.com/p/cff86e199c93\" target=\"_blank\" rel=\"noopener\">StatusBar的使用详解</a>:<a href=\"https://www.jianshu.com/p/cff86e199c93\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/cff86e199c93</a></p>\n<h2 id=\"6-ViewPagerAndroid\"><a href=\"#6-ViewPagerAndroid\" class=\"headerlink\" title=\"6. ViewPagerAndroid\"></a>6. ViewPagerAndroid</h2><p><a href=\"https://reactnative.cn/docs/next/viewpagerandroid.html\" target=\"_blank\" rel=\"noopener\">官网</a><br><a href=\"https://www.jianshu.com/p/699a3b7da848\" target=\"_blank\" rel=\"noopener\">React-Native ViewPagerAndroid使用</a></p>\n<h2 id=\"7-React-Native-高德地图组件的使用（react-native-amap3d）\"><a href=\"#7-React-Native-高德地图组件的使用（react-native-amap3d）\" class=\"headerlink\" title=\"7. React Native 高德地图组件的使用（react-native-amap3d）\"></a>7. React Native 高德地图组件的使用（react-native-amap3d）</h2><p><a href=\"https://www.jianshu.com/p/fe90fc6a0308\" target=\"_blank\" rel=\"noopener\">高德地图组件的使用</a>:<a href=\"https://www.jianshu.com/p/fe90fc6a0308\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/fe90fc6a0308</a></p>\n<p><a href=\"https://blog.csdn.net/IT_luntan/article/details/78982497\" target=\"_blank\" rel=\"noopener\">高德地图组件react-native-amap3d</a></p>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=525454434&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"React-Native-入坑之路-一\"><a href=\"#React-Native-入坑之路-一\" class=\"headerlink\" title=\"React-Native 入坑之路(一)\"></a>React-Native 入坑之路(一)</h1><hr>\n<h2 id=\"1-React-navigation-使用\"><a href=\"#1-React-navigation-使用\" class=\"headerlink\" title=\"1. React-navigation 使用\"></a>1. React-navigation 使用</h2><h3 id=\"1-导入依赖库\"><a href=\"#1-导入依赖库\" class=\"headerlink\" title=\"1.导入依赖库\"></a>1.导入依赖库</h3><pre><code>   npm install react-navigation --save</code></pre><p>  然后在 package.json 文件中就可以看到，依赖库已经导入完毕：</p>\n<pre><code>   &quot;react-native-tab-navigator&quot;: &quot;^0.3.4&quot;,</code></pre><h3 id=\"2-配置Navigator\"><a href=\"#2-配置Navigator\" class=\"headerlink\" title=\"2. 配置Navigator\"></a>2. 配置Navigator</h3><ul>\n<li><p>引入<br><img src=\"1.jpg\" alt></p>\n</li>\n<li><p>使用<br><a href=\"https://www.jianshu.com/p/f39f020197ef\" target=\"_blank\" rel=\"noopener\">React-navigation使用攻略</a></p>\n</li>\n</ul>\n<h2 id=\"2-react-native-px2dp\"><a href=\"#2-react-native-px2dp\" class=\"headerlink\" title=\"2. react-native-px2dp\"></a>2. react-native-px2dp</h2><ul>\n<li><p>安装<br>  npm install react-native-px2dp –save</p>\n</li>\n<li><p>使用<a href=\"https://www.jianshu.com/p/7836523b4d20\" target=\"_blank\" rel=\"noopener\">React native 分辨率适配(px,dp)</a></p>\n<pre><code>import px2dp from &#39;../../util/px2dp&#39;\n&#39;use strict&#39;;\n\nimport {Dimensions} from &#39;react-native&#39;\n\nconst deviceH = Dimensions.get(&#39;window&#39;).height\nconst deviceW = Dimensions.get(&#39;window&#39;).width\n\nconst basePx = 750\n\nexport default function px2dp(px) {\n    return px *  deviceW / basePx\n}</code></pre></li>\n</ul>\n<h2 id=\"3-Dimensions-获取当前屏幕的宽高\"><a href=\"#3-Dimensions-获取当前屏幕的宽高\" class=\"headerlink\" title=\"3. Dimensions 获取当前屏幕的宽高\"></a>3. Dimensions 获取当前屏幕的宽高</h2><pre><code>const { deviceWidth, deviceHeight } = Dimensions.get(&#39;window&#39;);</code></pre><h2 id=\"4-AsyncStorage-本都存储\"><a href=\"#4-AsyncStorage-本都存储\" class=\"headerlink\" title=\"4. AsyncStorage 本都存储\"></a>4. AsyncStorage 本都存储</h2><p><a href=\"https://www.jianshu.com/p/abf4e19f245c\" target=\"_blank\" rel=\"noopener\">ReactNative之AsyncStorage本地存储</a>:<a href=\"https://www.jianshu.com/p/abf4e19f245c\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/abf4e19f245c</a></p>\n<h2 id=\"5-StatusBar的使用详解\"><a href=\"#5-StatusBar的使用详解\" class=\"headerlink\" title=\"5. StatusBar的使用详解\"></a>5. StatusBar的使用详解</h2><p><a href=\"https://www.jianshu.com/p/cff86e199c93\" target=\"_blank\" rel=\"noopener\">StatusBar的使用详解</a>:<a href=\"https://www.jianshu.com/p/cff86e199c93\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/cff86e199c93</a></p>\n<h2 id=\"6-ViewPagerAndroid\"><a href=\"#6-ViewPagerAndroid\" class=\"headerlink\" title=\"6. ViewPagerAndroid\"></a>6. ViewPagerAndroid</h2><p><a href=\"https://reactnative.cn/docs/next/viewpagerandroid.html\" target=\"_blank\" rel=\"noopener\">官网</a><br><a href=\"https://www.jianshu.com/p/699a3b7da848\" target=\"_blank\" rel=\"noopener\">React-Native ViewPagerAndroid使用</a></p>\n<h2 id=\"7-React-Native-高德地图组件的使用（react-native-amap3d）\"><a href=\"#7-React-Native-高德地图组件的使用（react-native-amap3d）\" class=\"headerlink\" title=\"7. React Native 高德地图组件的使用（react-native-amap3d）\"></a>7. React Native 高德地图组件的使用（react-native-amap3d）</h2><p><a href=\"https://www.jianshu.com/p/fe90fc6a0308\" target=\"_blank\" rel=\"noopener\">高德地图组件的使用</a>:<a href=\"https://www.jianshu.com/p/fe90fc6a0308\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/fe90fc6a0308</a></p>\n<p><a href=\"https://blog.csdn.net/IT_luntan/article/details/78982497\" target=\"_blank\" rel=\"noopener\">高德地图组件react-native-amap3d</a></p>\n"},{"title":"React小技巧汇总","date":"2019-11-06T05:00:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1347529350&auto=1&height=66\"></iframe>\n</div>\n\n自学 `React.js` 一段时间了，把使用过程遇到的小坑和小技巧记录下来，希望能够帮助到其他人。此文章是长篇大论你只有耐得住寂寞，禁得住诱惑才会有所成长......\n\n# React 小技巧汇总\n\n---\n\n## 一、工具篇\n\n### 1.显示 html\n\n      <div dangerouslySetInnerHTML={{ __html: LANG.auth_register_tips1 }}/>\n\n### 2.常用组件\n\n- `axios`(http 请求模块，可用于前端任何场景，很强大)=>[封装 axios](https://www.jianshu.com/p/79816fa9c54f)\n- `echarts-for-react`(可视化图表，别人基于 react 对 echarts 的封装，足够用了)=>[echarts-for-react](https://www.jianshu.com/p/f6c1c4618c22)\n- `recharts`(另一个基于 react 封装的图表)=>[官网](https://recharts.cosx.org/recharts)\n- `nprogress`(顶部加载条，蛮好用)\n- `react-draft-wysiwyg`(别人基于 react 的富文本封装，如果找到其他更好的可以替换)\n- `react-draggable`(拖拽模块，找了个简单版的)\n- `screenfull`(全屏插件)\n- `photoswipe`(图片弹层查看插件，不依赖 jQuery，还是蛮好用)\n- `animate.css`(css 动画库)\n- `redux Web` 应用是一个状态机，视图与状态是一一对应的.所有的状态，保存在一个对象里面\n- `redux-logger` 日志\n- `Reselect` 记忆组件\n- `redux-thunk` 为了解决异步 action 的问题\n- `redux-saga` 为了解决异步 action 的问题\n- `react-router-redux` 保持路由与应用状态(state)同步\n- `react-router-dom`路由基本组件 1).[在 React 中使用 react-router-dom 路由](https://www.jianshu.com/p/8954e9fb0c7e) 2).[react-router-dom 及组件生命周期](https://www.jianshu.com/p/19ef80d2e122)\n\n### 3.react-devtools 调试工具\n\n[工具地址](https://github.com/facebook/react-devtools):https://github.com/facebook/react-devtools\n\n或者 直接谷歌应用商店搜索`react-devtools`进行安装.\n\n## 二、组件通讯篇\n\n![](1.jpg)\n\n**需要组件之进行通信的几种情况**\n\n- redux 架构\n- 父组件向子组件 —— props\n- 子组件向父组件 —— props.funciton 接收参数\n- 利用事件机制\n\n### 1. 父组件向子组件通信\n\nReact 数据流动是单向的,父组件向子组件通信也是最常见的;父组件通过 props 向子组件传递需要的信息\n\n### 2. 子组件向父组件通信\n\n- 利用回调函数\n- 利用自定义事件机制\n\n**子组件改变父组件的 state**\n\n      // 一般改变state值的一种方式\n      const { data } = this.state;\n      this.setState({ data: {...data, key: 1 } });\n      // 另外一种可以通过callback的方式改变state的值\n      this.setState(({ data }) => ({ data: {...data, key: 1 } }));\n      // 还可以\n      this.setState((state, props) => {\n      return { counter: state.counter + props.step };\n      });\n\n### 3. 跨级组件通信\n\n- 层层组件传递 props\n  > 例如 A 组件和 B 组件之间要进行通信,先找到 A 和 B 公共的父组件,A 先向 C 组件通信,C 组件通过 props 和 B 组件通信,此时 C 组件起的就是中间件的作用\n- 使用 context\n  下面例子中的组件关系: ListItem 是 List 的子组件,List 是 app 的子组件\n\nListItem.js\n\n      import React, { Component } from 'react';\n      import PropTypes from 'prop-types';\n      class ListItem extends Component {\n      // 子组件声明自己要使用context\n      static contextTypes = {\n            color: PropTypes.string,\n      }\n      static propTypes = {\n            value: PropTypes.string,\n      }\n      render() {\n            const { value } = this.props;\n            return (\n                  <li style={{ background: this.context.color }}>\n                  <span>{value}</span>\n                  </li>\n            );\n      }\n      }\n      export default ListItem;\n\nList.js\n\n      import ListItem from './ListItem';\n      class List extends Component {\n      // 父组件声明自己支持context\n      static childContextTypes = {\n            color: PropTypes.string,\n      }\n      static propTypes = {\n            list: PropTypes.array,\n      }\n      // 提供一个函数,用来返回相应的context对象\n      getChildContext() {\n            return {\n                  color: 'red',\n            };\n      }\n      render() {\n            const { list } = this.props;\n            return (\n                  <div>\n                  <ul>\n                        {\n                              list.map((entry, index) =>\n                              <ListItem key={`list-${index}`} value={entry.text} />,\n                        )\n                        }\n                  </ul>\n                  </div>\n            );\n      }\n      }\n      export default List;\n\nApp.js\n\n      import React, { Component } from 'react';\n      import List from './components/List';\n      const list = [\n      {\n            text: '题目一',\n      },\n      {\n            text: '题目二',\n      },\n      ];\n      export default class App extends Component {\n      render() {\n            return (\n                  <div>\n                  <List\n                        list={list}\n                  />\n                  </div>\n            );\n      }\n      }\n\n### 4. 没有嵌套关系的组件通信\n\n<!-- + 使用自定义事件机制\n\n>在componentDidMount事件中,如果组件挂载完成,再订阅事件;在组件卸载的时候,在componentWillUnmount事件中取消事件的订阅;以常用的发布/订阅模式举例,借用Node.js Events模块的浏览器版实现 -->\n\n- 组件间通信之 onRef 方法\n\n> 组件间通信除了 props 外还有 onRef 方法，不过 React 官方文档建议不要过度依赖 ref。本文使用 onRef 语境为在表单录入时提取公共组件，在提交时分别获取表单信息。\n\n下面 demo 中点击父组件按钮可以获取子组件全部信息，包括状态和方法，可以看下 demo 中控制台打印。\n\n      // 父组件\n      class Parent extends React.Component {\n      testRef=(ref)=>{\n      this.child = ref\n      console.log(ref) // -> 获取整个Child元素\n      }\n      handleClick=()=>{\n      alert(this.child.state.info) // -> 通过this.child可以拿到child所有状态和方法\n      }\n      render() {\n      return <div>\n            <Child onRef={this.testRef} />\n            <button onClick={this.handleClick}>父组件按钮</button>\n      </div>\n      }\n      }\n      // 子组件\n      class Child extends React.Component {\n      constructor(props) {\n      super(props)\n      this.state = {\n            info:'快点击子组件按钮哈哈哈'\n      }\n      }\n      componentDidMount(){\n      this.props.onRef(this)\n      console.log(this) // ->将child传递给this.props.onRef()方法\n      }\n      handleChildClick=()=>{\n      this.setState({info:'通过父组件按钮获取到子组件信息啦啦啦'})\n      }\n      render(){\n      return <button onClick={this.handleChildClick}>子组件按钮</button>\n      }\n      }\n\n`原理`：当在子组件中调用 onRef 函数时，正在调用从父组件传递的函数。this.props.onRef（this）这里的参数指向子组件本身，父组件接收该引用作为第一个参数：onRef = {ref =>（this.child = ref）}然后它使用 this.child 保存引用。之后，可以在父组件内访问整个子组件实例，并且可以调用子组件函数。\n\n## 三、路由篇\n\n> 使用 React 构建的单页面应用，要想实现页面间的跳转，首先想到的就是使用路由。在 React 中，常用的有两个包可以实现这个需求，那就是 react-router 和 react-router-dom。本文主要针对 react-router-dom 进行说明。\n\n### 1、React Router 中有三类组件:\n\n- router 组件（BrowserRouter，HashRouter）\n- route matching 组件（Route，Switch）\n- navigation 组件（Link）\n\n> 基于 React Router 的 web 应用，根组件应该是一个 router 组件（BrowserRouter，HashRouter）。 项目中，react-router-dom 提供了和两种路由。两种路由都会创建一个 history 对象。如果我们的应用有服务器响应 web 的请求，我们通常使用<BrowserRouter>组件; 如果使用静态文件服务器，则我们应该使用<HashRouter>组件\n\n### 2、HashRouter 和 BrowserRouter\n\n其实就是路由的 hash 和 history 两种模式（要是不了解这两种模式之间的区别那就需要去恶补下啦）\n\n并且这两个组件是路由的容器，`必须在最外层`--->内部是 `Route`\n\n      // hash模式\n      ReactDom.render(\n      <HashRouter>\n            <Route path=\"/\" component={Home}/>\n      </HashRouter>\n      )\n      // history模式\n      ReactDom.render(\n      <BrowserRouter>\n            <Route path=\"/\" component={Home}/>\n      </BrowserRouter>\n      )\n\n**下面说说 HashRouter 和 BrowserRouter 上的参数**\n\n- basename 路由的基础链接，用来部署到非根目录下，比如你需要将项目部署到 www.xxxx.com/web 下，则设置 basename=\"/web\"\n- getUserConfirmation 用来拦截 Prompt 组件，并且决定是否跳转\n- forceRefresh 用来设置是否强制浏览器整体刷新，默认值为 false\n- keLength 用来设置 location.key 的长度，默认是 6，可以自定义\n\n### 3、Route\n\nRoute 是路由的一个原材料，它是控制路径对应显示的组件\n\nRoute 的参数:\n\n- path 跳转的路径\n- component 对应路径显示的组件\n- render 可以自己写 render 函数返回具体的 dom，而不需要去设置 component\n- location 传递 route 对象，和当前的 route 对象对比，如果匹配则跳转\n- exact 匹配规则，true 的时候则精确匹配。\n\n### 4、Router\n\n低级路由，适用于任何路由组件，主要和 redux 深度集成，使用必须配合 history 对象\n\n使用 Router 路由的目的是和状态管理库如 redux 中的 history 同步对接\n\n      <Router history={history}>\n      ...\n      </Router>\n\n### 5、Link 和 NavLink\n\n两者都是跳转路由，NavLink 的参数更多些\n**Link 的 api**\n\n- to 有两种写法，表示跳转到哪个路由\n- 字符串写法\n\n    <Link to=\"/a\"/>\n\n- 对象写法\n\n      <Link to={{\n      pathname: '/courses',\n      search: '?sort=name',\n      hash: '#the-hash',\n      state: { fromDashboard: true }\n      }}/>\n\n- replace 就是将 push 改成 replace\n- innerRef 访问 Link 标签的 dom\n\n**NavLink 的 api**\n\n- Link 的所有 api\n- activeClassName 路由激活的时候设置的类名\n- activeStyle 路由激活设置的样式\n- exact 参考 Route，符合这个条件才会激活 active 类\n- strict 参考 Route，符合这个条件才会激活 active 类\n- isActive 接收一个回调函数，active 状态变化的时候回触发，返回 false 则中断跳转\n\n      const oddEvent = (match, location) => {\n      console.log(match,location)\n      if (!match) {\n      return false\n      }\n      console.log(match.id)\n      return true\n      }\n      <NavLink isActive={oddEvent} to=\"/a/123\">组件一</NavLink>\n\n* location 接收一个 location 对象，当 url 满足这个对象的条件才会跳转\n\n      <NavLink to=\"/a/123\" location={{ key:\"mb5wu3\", pathname:\"/a/123\" }}/>\n\n### 6、Redirect\n\nRedirect 重定向很简单，我们直接看代码即可\n\n      // 基本的重定向\n      <Redirect to=\"/somewhere/else\" />\n      // 对象形式\n      <Redirect\n      to={{\n      pathname: \"/login\",\n      search: \"?utm=your+face\",\n      state: { referrer: currentLocation }\n      }}\n      />\n      // 采用push生成新的记录\n      <Redirect push to=\"/somewhere/else\" />\n      // 配合Switch组件使用，form表示重定向之前的路径，如果匹配则重定向，不匹配则不重定向\n      <Switch>\n      <Redirect from='/old-path' to='/new-path'/>\n      <Route path='/new-path' component={Place}/>\n      </Switch>\n\n### 7、Switch\n\n路由切换，只会匹配第一个路由，可以想象成 tab 栏\n\nSwitch 内部只能包含 Route、Redirect、Router\n\n      <Switch>\n      <Route exact path=\"/\" component={Home}/>\n      <Route path=\"/about\" component={About}/>\n      <Route path=\"/:user\" component={User}/>\n      <Route component={NoMatch}/>\n      </Switch>\n\n### 8、withRouter\n\n当一个非路由组件也想访问到当前路由的 match,location,history 对象，那么 withRouter 将是一个非常好的选择，可以理解为将一个组件包裹成路由组件\n\n      import { withRouter } from 'react-router-dom'\n      const MyComponent = (props) => {\n      const { match, location, history } = this.props\n      return (\n            <div>{props.location.pathname}</div>\n      )\n      }\n      const FirstTest = withRouter(MyComponent);\n\n### 9、history 对象\n\n用过 vue 的都知道，vue-router 有组件形式的导航，也有编程式导航，那 react-router 怎么使用 api 来控制前进后退和刷新呢？这就需要我们来说明下`history`对象的作用了其实在每个路由组件中我们可以使用`this.props.history`获取到`history`对象，也可以使用 withRouter 包裹组件获取，在 history 中封装了 push，replace，go 等方法，具体内容如下\n\n      History {\n      length: number;\n      action: Action;\n      location: Location;\n      push(path: Path, state?: LocationState): void; // 调用push前进到一个地址,可以接受一个state对象，就是自定义的路由数据\n      push(location: LocationDescriptorObject): void; // 接受一个location的描述对象\n      replace(path: Path, state?: LocationState): void; // 用页面替换当前的路径，不可再goBack\n      replace(location: LocationDescriptorObject): void; // 同上\n      go(n: number): void; // 往前走多少也页面\n      goBack(): void; // 返回一个页面\n      goForward(): void; // 前进一个页面\n      block(prompt?: boolean | string | TransitionPromptHook): UnregisterCallback;\n      listen(listener: LocationListener): UnregisterCallback;\n      createHref(location: LocationDescriptorObject): Href;\n      }\n\n这样我们想使用 api 来操作前进后退就可以调用 history 中的方法啦\n\n其次也可通过暗转 history 库来实现，具体案例如下\n\n      import { BrowserRouter } from 'react-router-dom';\n      const history = require('history').createBrowserHistory();\n      /**\n      * forceRefresh: bool\n      * 作用：当浏览器不支持 HTML5 的 history API 时强制刷新页面。\n      */\n      const supportsHistory = 'pushState' in window.history;\n      <BrowserRouter\n            history={history}\n            basename=\"/\"\n            forceRefresh={!supportsHistory}\n            >\n            {/* 路由入口 */}\n            ......\n      </BrowserRouter>\n\n### 10、 React-router 页面跳转的三种方式\n\n[React-router 页面跳转的三种方式](https://blog.csdn.net/Vue2018/article/details/100564775):https://blog.csdn.net/Vue2018/article/details/100564775\n\n## 四、性能篇\n\n### 1、react 组件的性能优化（渲染角度优化）\n\n#### 1、react 性能查看工具\n\n> 再讲性能优化之前，我们需要先来了解一下如何查看 react 加载组件时所耗费的时间的工具，在 react 16 版本之前我们可以使用 React Perf 来查看。react16 版本之前，我们可以使用 react-addons-perf 工具来查看，而在最新的 16 版本，我们只需要在 url 后加上?react_pref。\n\n首先来了解一下[react-addons-perf](https://reactjs.org/docs/perf.html)\n\n`react-addons-perf`这是 `React` 官方推出的一个性能工具包，可以打印出组件渲染的时间、次数、浪费时间等。\n\n简单说几个 api，具体用法可参考[官网](https://reactjs.org/docs/perf.html)：\n\n- Perf.start() 开始记录\n- Perf.stop() 结束记录\n- Perf.printInclusive() 查看所有设计到的组件 render\n- Perf.printWasted() 查看不需要的浪费组件 render\n\n大家可以在 chorme 中先安装 React Perf 扩展，然后在入口文件或者 redux 的 store.js 中加入相应的代码即可：\n![](2.jpg)\n\n再来了解一下，在最新的 React16 版本中，在`url`后加上`?react_pref`，就可以在 chrome 浏览器的`performance`，我们可以查看`User Timeing`来查看组件的加载时间。点击 record 开始记录，注意记录时长不要超过 20s，否则可能导致 chrome 挂起。\n\n![](3.jpg)\n大图\n![](4.jpg)\n\n#### 2、单个 react 组件性能优化\n\n- 1、render 里面尽量减少新建变量和 bind 函数，传递参数是尽量减少传递参数的数量。\n\n> 首先我们先思考一个问题，比如我要实现一个点击按钮使相应的 num 增加 1，我们有哪一些方法。\n> 大家应该都能想到，无非就是三种，如下图：\n\n![](5.jpg)\n\n- 第一种是在`构造函数`中绑定 this，\n- 第二种是在 render()函数里面绑定 this，\n- 第三种就是使用箭头函数，都能实现上述方法；\n  但是哪一种方法的性能最好，是我们要考虑的问题。应该大家都知道答案：\n  `第一种的性能最好`。因为第一种，构造函数每一次渲染的时候`只会执行一遍`；\n  而第二种方法，在每次 render()的时候都会重新执行一遍函数；\n  第三种方法的话，每一次 render()的时候，都会生成一个新的箭头函数，即使两个箭头函数的内容是一样的。\n\n- 2、定制 shouldComponentUpdate 函数\n\n> shouldComponentUpdate 是决定 react 组件什么时候能够不重新渲染的函数，但是这个函数默认的实现方式就是简单的返回一个 true。也就是说，默认每次更新的时候都要调用所用的生命周期函数，包括 render 函数，重新渲染。\n> 我们来看一下下面的一个例子\n\n![](6.jpg)\n\n我们写两个组件，App 和 Demo 组件，并写两个方法，一个改变 App 中的 num 的值，一个是改变 title，我们在 Demo 的 render 中打印 render 函数。我们可以看到以下的效果：\n\n![](7.jpg)\n\n我们可以清晰的看到虽然 demo 组件里的 title 值没有改变，但是还是 render 了。\n\n为了解决这个问题，我们可以对 demo 组件进行如下的修改：\n\n![](8.jpg)\n\n只有当 demo 的 title 值发生改变的时候，我们才去 render，我们可以看一下效果：\n\n![](9.jpg)\n\n以上只是一个特别简单的一个对于 shouldComponentUpdate 的定制。在最新的 react 中，react 给我们提供了 React.PureComponent，官方也在早期提供了名为 react-addons-pure-render-mixin 插件来重新实现 shouldComponentUpdate 生命周期方法。\n![](10.jpg)\n\n通过上述的方法的效果也是和我们定制 shouldComponentUpdate 的效果是一致的。但是我们要注意的是，这里的 PureRender 是浅比较的，因为深比较的场景是相当昂贵的。所以我们要注意我们在 1.1 中说到的一些注意点：不要直接为 props 设置对象或者数组、不要将方法直接绑定在元素上，因为其实函数也是对象\n\n### 2、redux 性能优化：reselect（数据获取时优化 待研究）\n\n[react-redux 性能优化之 reselect](https://www.jianshu.com/p/1fcef4c892ba?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation)\n\n### 3-1、分隔代码\n\n#### 1、动态加载\n\nES6 标准引入了 import 以方便我们静态加载模块。形式如：\n\n      import xxx from xxx.\n\n\n尽管 import 对于我们加载模块很有帮助，但是静态加载模块的方式一定程度上限制了我们来实现异步模块加载。不过，目前动态加载模块的 import()语法已处于提案阶段，并且 webpack 已将他引入并使用。import()提供了基于 Promise 的 API，因此，import()的返回值是一个完成状态或拒绝状态的 Promise 对象。形式如：\n\n      import(/* webpackChunkName: 'module'*/ \"module\")\n      .then(() => {\n            //todo\n      })\n      .catch(_ => console.log('It is an error'))\n\nwebpack 在编译时，识别到动态加载的 import 语法，则 webpack 会为当前动态加载的模块创建一个单独的 bundle。如果你使用的是官方的 Create-react-app 脚手架或 React 的服务端渲染框架 Next.js，那么可以直接使用动态 import 语法。如果你的脚手架是你自己配置的 webpack，那么你需要按照官方指南来设置，请移步[1]。\n\n#### 2、动态加载 React 组件\n\n当前最为流行的一种方法是使用 React-loadable [2]库提供的懒加载 React 组件。它利用 import()语法，使用 Promise 语法加载 React 组件。同时，React-loadable 支持 React 的服务端渲染。 通常，我们以如下方式实现组件：\n\n      import LazyComponet from 'LazyComponent';\n      export default function DemoComponent() {\n      return (\n            <div>\n                  <p>demo component</p>\n                  <AComponent />\n            </div>\n      )\n      }\n\n在上面的例子中，假设 LazyComponet 在 DemoComponent 渲染时我们并不展示。但是因为我们使用 import 语法将 LazyComponet 导入，所以在编译时会将 LazyComponet 的代码与 DemoComponent 的代码打包到同一个 bundle 里面。 但是，这并不是我们想要的。所以我们可以通过使用 React-loadable 来懒加载 LazyComponet ，同时将 LazyComponet 的代码单独打包到一个 bundle 里面。我们可以看一下官网提供的例子：\n\n      import Loadable from 'react-loadable';\n      import Loading from './my-loading-component';\n      const LoadableComponent = Loadable({\n      loader: () => import('./my-component'),\n      loading: Loading,\n      });\n      export default class App extends React.Component {\n      render() {\n      return <LoadableComponent/>;\n      }\n      }\n\n从例子中我们可以看到，react-loadable 使用动态 import()方法，并将导入的组件分配给 loader 属性。同时，react-loadable 提供了一个 loading 属性，以设置在加载组件时将展示的组件。\n\n#### 3、高阶组件（HOC）\n\n高阶函数，可以传入函数作为参数的函数，如 map,sort,reduce。高阶组件包装了另一个组件的组件。\n\n属性代理 （Props Proxy）\n反向继承 （Inheritance Inversion）\n\n#### 4、无状态组件\n\n使用无状态组件，只从父组件接收 props，可以提高组件的渲染性能\n\n      const HelloWorld = (props) => <div>{props.name}</div>ReactDOM.render(<HelloWorld name=\"HelloWorld\" />,App)\n\n#### 5、componentWillReceiveProps 中取 props 的值\n\n注意应该取 nextProps,而不是 this.props\n\n#### 6、bind 绑定函数\n\n利用 bind 绑定函数，是默认有 event 这个参数的，只是这个参数在给定参数之后\n\n      handleClockClick (id, e) {\n            console.log(id,e)\n            }\n      <button onClick={this.handleClockClick.bind(this, 2)}>Clock</button>\n\n#### 7、ES6 类中，函数 this 不默认指向 对象\n\n- this.getDomNode 已经在低版本被移除了，现在设置 ref=xxx，然后使用 this.refs.xxx 访问 DOM 元素\n- `ref` 可以赋值两种类型，一种是字符串，一种是函数, 字符串只能用在类组件，DOM 元素使用函数，纯函数组件不能使用 ref。旧版本 DOM 元素虽然可以使用 ref，但是 React 已不推荐。\n\n      ref=\"test\" // this.refs.test 访问ref={test => this.test = test} // this.test 访问\n\n#### 8、当只写属性名时，默认值为 true\n\n      <MyComponent isStock/>// isStock 默认为 true\n\n#### 9、在 IE11 以下使用 React16\n\nReact16 依赖集合类型 Map 和 Set，在未提供原生支持的浏览器，需要使用一个 polyfill,例如 core-js 和 babel-polyfill\n使用 core-js 支持\n\n      import 'core-js/es6/map';import 'core-js/es6/set';\n      import React from 'react';\n      import ReactDOM from 'react-dom';\n      ReactDOM.render(<h1>Hello, world!</h1>,document.getElementById('root'));\n\n### 3-2、分隔代码\n\n#### 1、componentDidMount 请求服务器数据\n\n在 componentDidMount 请求服务器数据并利用 setState 时应注意，在组件卸载 componentWillUnmount 应该把去求去掉\n\n#### 2、利用 es6 rest 参数（形式为...变量名）传递可变数量的 props\n\n      // 定义子组件\n      const Demo = ({ prop1, prop2, ...restProps }) => (\n      <div>{ restProps.text}</div>\n      )\n      // 父组件使用Demo\n      <Demo prop1={xxx} prop2={xxx} text={xxx}/>\n\n#### 3、setState 的其他用法\n\n      // 一般改变state值的一种方式\n      const { data } = this.state;\n      this.setState({ data: {...data, key: 1 } });\n      // 另外一种可以通过callback的方式改变state的值\n      this.setState(({ data }) => ({ data: {...data, key: 1 } }));\n      // 还可以\n      this.setState((state, props) => {\n      return { counter: state.counter + props.step };\n      });\n\n#### 4、React 性能优化\n\n// React 性能优化有很多种方式，\n// 那常见的一种就是在生命周期函数 shouldComponentUpdate 里面判断\n// 某些值或属性来控制组件是否重新再次渲染。\n// 判断一般的字符串，数字或者基础的对象，数组都还是比较好处理\n// 那嵌套的对象或者数组就比较麻烦了，对于这种\n// 推荐使用 lodash(或者其他的类似库)的 isEqual 对嵌套数组或对象进行判断\nshouldComponentUpdate(nextProps, nextState) {\nif (\\_.isEqual(nextState.columns, this.state.columns)) return false;\nreturn true;\n}\n\n#### 5、React 进阶提高 - 技巧篇（28 个视频）链接\n\n介绍 React 的一些进阶知识点，一些开发上的实践技巧，一些工具库等。\n\n[视频更新地址：](www.qiuzhi99.com/)www.qiuzhi99.com/\n\n\n## 五、学习资料\n\n[翻译后的官方文档，学技术一定要多看几遍文档](doc.react-china.org): doc.react-china.org\n[react官网](https://www.reactjscn.com/):https://www.reactjscn.com/","source":"_posts/React总结.md","raw":"---\ntitle: React小技巧汇总\ndate: 2019-11-06 13:00:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n  - React\ncategories:\n  - React\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1347529350&auto=1&height=66\"></iframe>\n</div>\n\n自学 `React.js` 一段时间了，把使用过程遇到的小坑和小技巧记录下来，希望能够帮助到其他人。此文章是长篇大论你只有耐得住寂寞，禁得住诱惑才会有所成长......\n\n# React 小技巧汇总\n\n---\n\n## 一、工具篇\n\n### 1.显示 html\n\n      <div dangerouslySetInnerHTML={{ __html: LANG.auth_register_tips1 }}/>\n\n### 2.常用组件\n\n- `axios`(http 请求模块，可用于前端任何场景，很强大)=>[封装 axios](https://www.jianshu.com/p/79816fa9c54f)\n- `echarts-for-react`(可视化图表，别人基于 react 对 echarts 的封装，足够用了)=>[echarts-for-react](https://www.jianshu.com/p/f6c1c4618c22)\n- `recharts`(另一个基于 react 封装的图表)=>[官网](https://recharts.cosx.org/recharts)\n- `nprogress`(顶部加载条，蛮好用)\n- `react-draft-wysiwyg`(别人基于 react 的富文本封装，如果找到其他更好的可以替换)\n- `react-draggable`(拖拽模块，找了个简单版的)\n- `screenfull`(全屏插件)\n- `photoswipe`(图片弹层查看插件，不依赖 jQuery，还是蛮好用)\n- `animate.css`(css 动画库)\n- `redux Web` 应用是一个状态机，视图与状态是一一对应的.所有的状态，保存在一个对象里面\n- `redux-logger` 日志\n- `Reselect` 记忆组件\n- `redux-thunk` 为了解决异步 action 的问题\n- `redux-saga` 为了解决异步 action 的问题\n- `react-router-redux` 保持路由与应用状态(state)同步\n- `react-router-dom`路由基本组件 1).[在 React 中使用 react-router-dom 路由](https://www.jianshu.com/p/8954e9fb0c7e) 2).[react-router-dom 及组件生命周期](https://www.jianshu.com/p/19ef80d2e122)\n\n### 3.react-devtools 调试工具\n\n[工具地址](https://github.com/facebook/react-devtools):https://github.com/facebook/react-devtools\n\n或者 直接谷歌应用商店搜索`react-devtools`进行安装.\n\n## 二、组件通讯篇\n\n![](1.jpg)\n\n**需要组件之进行通信的几种情况**\n\n- redux 架构\n- 父组件向子组件 —— props\n- 子组件向父组件 —— props.funciton 接收参数\n- 利用事件机制\n\n### 1. 父组件向子组件通信\n\nReact 数据流动是单向的,父组件向子组件通信也是最常见的;父组件通过 props 向子组件传递需要的信息\n\n### 2. 子组件向父组件通信\n\n- 利用回调函数\n- 利用自定义事件机制\n\n**子组件改变父组件的 state**\n\n      // 一般改变state值的一种方式\n      const { data } = this.state;\n      this.setState({ data: {...data, key: 1 } });\n      // 另外一种可以通过callback的方式改变state的值\n      this.setState(({ data }) => ({ data: {...data, key: 1 } }));\n      // 还可以\n      this.setState((state, props) => {\n      return { counter: state.counter + props.step };\n      });\n\n### 3. 跨级组件通信\n\n- 层层组件传递 props\n  > 例如 A 组件和 B 组件之间要进行通信,先找到 A 和 B 公共的父组件,A 先向 C 组件通信,C 组件通过 props 和 B 组件通信,此时 C 组件起的就是中间件的作用\n- 使用 context\n  下面例子中的组件关系: ListItem 是 List 的子组件,List 是 app 的子组件\n\nListItem.js\n\n      import React, { Component } from 'react';\n      import PropTypes from 'prop-types';\n      class ListItem extends Component {\n      // 子组件声明自己要使用context\n      static contextTypes = {\n            color: PropTypes.string,\n      }\n      static propTypes = {\n            value: PropTypes.string,\n      }\n      render() {\n            const { value } = this.props;\n            return (\n                  <li style={{ background: this.context.color }}>\n                  <span>{value}</span>\n                  </li>\n            );\n      }\n      }\n      export default ListItem;\n\nList.js\n\n      import ListItem from './ListItem';\n      class List extends Component {\n      // 父组件声明自己支持context\n      static childContextTypes = {\n            color: PropTypes.string,\n      }\n      static propTypes = {\n            list: PropTypes.array,\n      }\n      // 提供一个函数,用来返回相应的context对象\n      getChildContext() {\n            return {\n                  color: 'red',\n            };\n      }\n      render() {\n            const { list } = this.props;\n            return (\n                  <div>\n                  <ul>\n                        {\n                              list.map((entry, index) =>\n                              <ListItem key={`list-${index}`} value={entry.text} />,\n                        )\n                        }\n                  </ul>\n                  </div>\n            );\n      }\n      }\n      export default List;\n\nApp.js\n\n      import React, { Component } from 'react';\n      import List from './components/List';\n      const list = [\n      {\n            text: '题目一',\n      },\n      {\n            text: '题目二',\n      },\n      ];\n      export default class App extends Component {\n      render() {\n            return (\n                  <div>\n                  <List\n                        list={list}\n                  />\n                  </div>\n            );\n      }\n      }\n\n### 4. 没有嵌套关系的组件通信\n\n<!-- + 使用自定义事件机制\n\n>在componentDidMount事件中,如果组件挂载完成,再订阅事件;在组件卸载的时候,在componentWillUnmount事件中取消事件的订阅;以常用的发布/订阅模式举例,借用Node.js Events模块的浏览器版实现 -->\n\n- 组件间通信之 onRef 方法\n\n> 组件间通信除了 props 外还有 onRef 方法，不过 React 官方文档建议不要过度依赖 ref。本文使用 onRef 语境为在表单录入时提取公共组件，在提交时分别获取表单信息。\n\n下面 demo 中点击父组件按钮可以获取子组件全部信息，包括状态和方法，可以看下 demo 中控制台打印。\n\n      // 父组件\n      class Parent extends React.Component {\n      testRef=(ref)=>{\n      this.child = ref\n      console.log(ref) // -> 获取整个Child元素\n      }\n      handleClick=()=>{\n      alert(this.child.state.info) // -> 通过this.child可以拿到child所有状态和方法\n      }\n      render() {\n      return <div>\n            <Child onRef={this.testRef} />\n            <button onClick={this.handleClick}>父组件按钮</button>\n      </div>\n      }\n      }\n      // 子组件\n      class Child extends React.Component {\n      constructor(props) {\n      super(props)\n      this.state = {\n            info:'快点击子组件按钮哈哈哈'\n      }\n      }\n      componentDidMount(){\n      this.props.onRef(this)\n      console.log(this) // ->将child传递给this.props.onRef()方法\n      }\n      handleChildClick=()=>{\n      this.setState({info:'通过父组件按钮获取到子组件信息啦啦啦'})\n      }\n      render(){\n      return <button onClick={this.handleChildClick}>子组件按钮</button>\n      }\n      }\n\n`原理`：当在子组件中调用 onRef 函数时，正在调用从父组件传递的函数。this.props.onRef（this）这里的参数指向子组件本身，父组件接收该引用作为第一个参数：onRef = {ref =>（this.child = ref）}然后它使用 this.child 保存引用。之后，可以在父组件内访问整个子组件实例，并且可以调用子组件函数。\n\n## 三、路由篇\n\n> 使用 React 构建的单页面应用，要想实现页面间的跳转，首先想到的就是使用路由。在 React 中，常用的有两个包可以实现这个需求，那就是 react-router 和 react-router-dom。本文主要针对 react-router-dom 进行说明。\n\n### 1、React Router 中有三类组件:\n\n- router 组件（BrowserRouter，HashRouter）\n- route matching 组件（Route，Switch）\n- navigation 组件（Link）\n\n> 基于 React Router 的 web 应用，根组件应该是一个 router 组件（BrowserRouter，HashRouter）。 项目中，react-router-dom 提供了和两种路由。两种路由都会创建一个 history 对象。如果我们的应用有服务器响应 web 的请求，我们通常使用<BrowserRouter>组件; 如果使用静态文件服务器，则我们应该使用<HashRouter>组件\n\n### 2、HashRouter 和 BrowserRouter\n\n其实就是路由的 hash 和 history 两种模式（要是不了解这两种模式之间的区别那就需要去恶补下啦）\n\n并且这两个组件是路由的容器，`必须在最外层`--->内部是 `Route`\n\n      // hash模式\n      ReactDom.render(\n      <HashRouter>\n            <Route path=\"/\" component={Home}/>\n      </HashRouter>\n      )\n      // history模式\n      ReactDom.render(\n      <BrowserRouter>\n            <Route path=\"/\" component={Home}/>\n      </BrowserRouter>\n      )\n\n**下面说说 HashRouter 和 BrowserRouter 上的参数**\n\n- basename 路由的基础链接，用来部署到非根目录下，比如你需要将项目部署到 www.xxxx.com/web 下，则设置 basename=\"/web\"\n- getUserConfirmation 用来拦截 Prompt 组件，并且决定是否跳转\n- forceRefresh 用来设置是否强制浏览器整体刷新，默认值为 false\n- keLength 用来设置 location.key 的长度，默认是 6，可以自定义\n\n### 3、Route\n\nRoute 是路由的一个原材料，它是控制路径对应显示的组件\n\nRoute 的参数:\n\n- path 跳转的路径\n- component 对应路径显示的组件\n- render 可以自己写 render 函数返回具体的 dom，而不需要去设置 component\n- location 传递 route 对象，和当前的 route 对象对比，如果匹配则跳转\n- exact 匹配规则，true 的时候则精确匹配。\n\n### 4、Router\n\n低级路由，适用于任何路由组件，主要和 redux 深度集成，使用必须配合 history 对象\n\n使用 Router 路由的目的是和状态管理库如 redux 中的 history 同步对接\n\n      <Router history={history}>\n      ...\n      </Router>\n\n### 5、Link 和 NavLink\n\n两者都是跳转路由，NavLink 的参数更多些\n**Link 的 api**\n\n- to 有两种写法，表示跳转到哪个路由\n- 字符串写法\n\n    <Link to=\"/a\"/>\n\n- 对象写法\n\n      <Link to={{\n      pathname: '/courses',\n      search: '?sort=name',\n      hash: '#the-hash',\n      state: { fromDashboard: true }\n      }}/>\n\n- replace 就是将 push 改成 replace\n- innerRef 访问 Link 标签的 dom\n\n**NavLink 的 api**\n\n- Link 的所有 api\n- activeClassName 路由激活的时候设置的类名\n- activeStyle 路由激活设置的样式\n- exact 参考 Route，符合这个条件才会激活 active 类\n- strict 参考 Route，符合这个条件才会激活 active 类\n- isActive 接收一个回调函数，active 状态变化的时候回触发，返回 false 则中断跳转\n\n      const oddEvent = (match, location) => {\n      console.log(match,location)\n      if (!match) {\n      return false\n      }\n      console.log(match.id)\n      return true\n      }\n      <NavLink isActive={oddEvent} to=\"/a/123\">组件一</NavLink>\n\n* location 接收一个 location 对象，当 url 满足这个对象的条件才会跳转\n\n      <NavLink to=\"/a/123\" location={{ key:\"mb5wu3\", pathname:\"/a/123\" }}/>\n\n### 6、Redirect\n\nRedirect 重定向很简单，我们直接看代码即可\n\n      // 基本的重定向\n      <Redirect to=\"/somewhere/else\" />\n      // 对象形式\n      <Redirect\n      to={{\n      pathname: \"/login\",\n      search: \"?utm=your+face\",\n      state: { referrer: currentLocation }\n      }}\n      />\n      // 采用push生成新的记录\n      <Redirect push to=\"/somewhere/else\" />\n      // 配合Switch组件使用，form表示重定向之前的路径，如果匹配则重定向，不匹配则不重定向\n      <Switch>\n      <Redirect from='/old-path' to='/new-path'/>\n      <Route path='/new-path' component={Place}/>\n      </Switch>\n\n### 7、Switch\n\n路由切换，只会匹配第一个路由，可以想象成 tab 栏\n\nSwitch 内部只能包含 Route、Redirect、Router\n\n      <Switch>\n      <Route exact path=\"/\" component={Home}/>\n      <Route path=\"/about\" component={About}/>\n      <Route path=\"/:user\" component={User}/>\n      <Route component={NoMatch}/>\n      </Switch>\n\n### 8、withRouter\n\n当一个非路由组件也想访问到当前路由的 match,location,history 对象，那么 withRouter 将是一个非常好的选择，可以理解为将一个组件包裹成路由组件\n\n      import { withRouter } from 'react-router-dom'\n      const MyComponent = (props) => {\n      const { match, location, history } = this.props\n      return (\n            <div>{props.location.pathname}</div>\n      )\n      }\n      const FirstTest = withRouter(MyComponent);\n\n### 9、history 对象\n\n用过 vue 的都知道，vue-router 有组件形式的导航，也有编程式导航，那 react-router 怎么使用 api 来控制前进后退和刷新呢？这就需要我们来说明下`history`对象的作用了其实在每个路由组件中我们可以使用`this.props.history`获取到`history`对象，也可以使用 withRouter 包裹组件获取，在 history 中封装了 push，replace，go 等方法，具体内容如下\n\n      History {\n      length: number;\n      action: Action;\n      location: Location;\n      push(path: Path, state?: LocationState): void; // 调用push前进到一个地址,可以接受一个state对象，就是自定义的路由数据\n      push(location: LocationDescriptorObject): void; // 接受一个location的描述对象\n      replace(path: Path, state?: LocationState): void; // 用页面替换当前的路径，不可再goBack\n      replace(location: LocationDescriptorObject): void; // 同上\n      go(n: number): void; // 往前走多少也页面\n      goBack(): void; // 返回一个页面\n      goForward(): void; // 前进一个页面\n      block(prompt?: boolean | string | TransitionPromptHook): UnregisterCallback;\n      listen(listener: LocationListener): UnregisterCallback;\n      createHref(location: LocationDescriptorObject): Href;\n      }\n\n这样我们想使用 api 来操作前进后退就可以调用 history 中的方法啦\n\n其次也可通过暗转 history 库来实现，具体案例如下\n\n      import { BrowserRouter } from 'react-router-dom';\n      const history = require('history').createBrowserHistory();\n      /**\n      * forceRefresh: bool\n      * 作用：当浏览器不支持 HTML5 的 history API 时强制刷新页面。\n      */\n      const supportsHistory = 'pushState' in window.history;\n      <BrowserRouter\n            history={history}\n            basename=\"/\"\n            forceRefresh={!supportsHistory}\n            >\n            {/* 路由入口 */}\n            ......\n      </BrowserRouter>\n\n### 10、 React-router 页面跳转的三种方式\n\n[React-router 页面跳转的三种方式](https://blog.csdn.net/Vue2018/article/details/100564775):https://blog.csdn.net/Vue2018/article/details/100564775\n\n## 四、性能篇\n\n### 1、react 组件的性能优化（渲染角度优化）\n\n#### 1、react 性能查看工具\n\n> 再讲性能优化之前，我们需要先来了解一下如何查看 react 加载组件时所耗费的时间的工具，在 react 16 版本之前我们可以使用 React Perf 来查看。react16 版本之前，我们可以使用 react-addons-perf 工具来查看，而在最新的 16 版本，我们只需要在 url 后加上?react_pref。\n\n首先来了解一下[react-addons-perf](https://reactjs.org/docs/perf.html)\n\n`react-addons-perf`这是 `React` 官方推出的一个性能工具包，可以打印出组件渲染的时间、次数、浪费时间等。\n\n简单说几个 api，具体用法可参考[官网](https://reactjs.org/docs/perf.html)：\n\n- Perf.start() 开始记录\n- Perf.stop() 结束记录\n- Perf.printInclusive() 查看所有设计到的组件 render\n- Perf.printWasted() 查看不需要的浪费组件 render\n\n大家可以在 chorme 中先安装 React Perf 扩展，然后在入口文件或者 redux 的 store.js 中加入相应的代码即可：\n![](2.jpg)\n\n再来了解一下，在最新的 React16 版本中，在`url`后加上`?react_pref`，就可以在 chrome 浏览器的`performance`，我们可以查看`User Timeing`来查看组件的加载时间。点击 record 开始记录，注意记录时长不要超过 20s，否则可能导致 chrome 挂起。\n\n![](3.jpg)\n大图\n![](4.jpg)\n\n#### 2、单个 react 组件性能优化\n\n- 1、render 里面尽量减少新建变量和 bind 函数，传递参数是尽量减少传递参数的数量。\n\n> 首先我们先思考一个问题，比如我要实现一个点击按钮使相应的 num 增加 1，我们有哪一些方法。\n> 大家应该都能想到，无非就是三种，如下图：\n\n![](5.jpg)\n\n- 第一种是在`构造函数`中绑定 this，\n- 第二种是在 render()函数里面绑定 this，\n- 第三种就是使用箭头函数，都能实现上述方法；\n  但是哪一种方法的性能最好，是我们要考虑的问题。应该大家都知道答案：\n  `第一种的性能最好`。因为第一种，构造函数每一次渲染的时候`只会执行一遍`；\n  而第二种方法，在每次 render()的时候都会重新执行一遍函数；\n  第三种方法的话，每一次 render()的时候，都会生成一个新的箭头函数，即使两个箭头函数的内容是一样的。\n\n- 2、定制 shouldComponentUpdate 函数\n\n> shouldComponentUpdate 是决定 react 组件什么时候能够不重新渲染的函数，但是这个函数默认的实现方式就是简单的返回一个 true。也就是说，默认每次更新的时候都要调用所用的生命周期函数，包括 render 函数，重新渲染。\n> 我们来看一下下面的一个例子\n\n![](6.jpg)\n\n我们写两个组件，App 和 Demo 组件，并写两个方法，一个改变 App 中的 num 的值，一个是改变 title，我们在 Demo 的 render 中打印 render 函数。我们可以看到以下的效果：\n\n![](7.jpg)\n\n我们可以清晰的看到虽然 demo 组件里的 title 值没有改变，但是还是 render 了。\n\n为了解决这个问题，我们可以对 demo 组件进行如下的修改：\n\n![](8.jpg)\n\n只有当 demo 的 title 值发生改变的时候，我们才去 render，我们可以看一下效果：\n\n![](9.jpg)\n\n以上只是一个特别简单的一个对于 shouldComponentUpdate 的定制。在最新的 react 中，react 给我们提供了 React.PureComponent，官方也在早期提供了名为 react-addons-pure-render-mixin 插件来重新实现 shouldComponentUpdate 生命周期方法。\n![](10.jpg)\n\n通过上述的方法的效果也是和我们定制 shouldComponentUpdate 的效果是一致的。但是我们要注意的是，这里的 PureRender 是浅比较的，因为深比较的场景是相当昂贵的。所以我们要注意我们在 1.1 中说到的一些注意点：不要直接为 props 设置对象或者数组、不要将方法直接绑定在元素上，因为其实函数也是对象\n\n### 2、redux 性能优化：reselect（数据获取时优化 待研究）\n\n[react-redux 性能优化之 reselect](https://www.jianshu.com/p/1fcef4c892ba?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation)\n\n### 3-1、分隔代码\n\n#### 1、动态加载\n\nES6 标准引入了 import 以方便我们静态加载模块。形式如：\n\n      import xxx from xxx.\n\n\n尽管 import 对于我们加载模块很有帮助，但是静态加载模块的方式一定程度上限制了我们来实现异步模块加载。不过，目前动态加载模块的 import()语法已处于提案阶段，并且 webpack 已将他引入并使用。import()提供了基于 Promise 的 API，因此，import()的返回值是一个完成状态或拒绝状态的 Promise 对象。形式如：\n\n      import(/* webpackChunkName: 'module'*/ \"module\")\n      .then(() => {\n            //todo\n      })\n      .catch(_ => console.log('It is an error'))\n\nwebpack 在编译时，识别到动态加载的 import 语法，则 webpack 会为当前动态加载的模块创建一个单独的 bundle。如果你使用的是官方的 Create-react-app 脚手架或 React 的服务端渲染框架 Next.js，那么可以直接使用动态 import 语法。如果你的脚手架是你自己配置的 webpack，那么你需要按照官方指南来设置，请移步[1]。\n\n#### 2、动态加载 React 组件\n\n当前最为流行的一种方法是使用 React-loadable [2]库提供的懒加载 React 组件。它利用 import()语法，使用 Promise 语法加载 React 组件。同时，React-loadable 支持 React 的服务端渲染。 通常，我们以如下方式实现组件：\n\n      import LazyComponet from 'LazyComponent';\n      export default function DemoComponent() {\n      return (\n            <div>\n                  <p>demo component</p>\n                  <AComponent />\n            </div>\n      )\n      }\n\n在上面的例子中，假设 LazyComponet 在 DemoComponent 渲染时我们并不展示。但是因为我们使用 import 语法将 LazyComponet 导入，所以在编译时会将 LazyComponet 的代码与 DemoComponent 的代码打包到同一个 bundle 里面。 但是，这并不是我们想要的。所以我们可以通过使用 React-loadable 来懒加载 LazyComponet ，同时将 LazyComponet 的代码单独打包到一个 bundle 里面。我们可以看一下官网提供的例子：\n\n      import Loadable from 'react-loadable';\n      import Loading from './my-loading-component';\n      const LoadableComponent = Loadable({\n      loader: () => import('./my-component'),\n      loading: Loading,\n      });\n      export default class App extends React.Component {\n      render() {\n      return <LoadableComponent/>;\n      }\n      }\n\n从例子中我们可以看到，react-loadable 使用动态 import()方法，并将导入的组件分配给 loader 属性。同时，react-loadable 提供了一个 loading 属性，以设置在加载组件时将展示的组件。\n\n#### 3、高阶组件（HOC）\n\n高阶函数，可以传入函数作为参数的函数，如 map,sort,reduce。高阶组件包装了另一个组件的组件。\n\n属性代理 （Props Proxy）\n反向继承 （Inheritance Inversion）\n\n#### 4、无状态组件\n\n使用无状态组件，只从父组件接收 props，可以提高组件的渲染性能\n\n      const HelloWorld = (props) => <div>{props.name}</div>ReactDOM.render(<HelloWorld name=\"HelloWorld\" />,App)\n\n#### 5、componentWillReceiveProps 中取 props 的值\n\n注意应该取 nextProps,而不是 this.props\n\n#### 6、bind 绑定函数\n\n利用 bind 绑定函数，是默认有 event 这个参数的，只是这个参数在给定参数之后\n\n      handleClockClick (id, e) {\n            console.log(id,e)\n            }\n      <button onClick={this.handleClockClick.bind(this, 2)}>Clock</button>\n\n#### 7、ES6 类中，函数 this 不默认指向 对象\n\n- this.getDomNode 已经在低版本被移除了，现在设置 ref=xxx，然后使用 this.refs.xxx 访问 DOM 元素\n- `ref` 可以赋值两种类型，一种是字符串，一种是函数, 字符串只能用在类组件，DOM 元素使用函数，纯函数组件不能使用 ref。旧版本 DOM 元素虽然可以使用 ref，但是 React 已不推荐。\n\n      ref=\"test\" // this.refs.test 访问ref={test => this.test = test} // this.test 访问\n\n#### 8、当只写属性名时，默认值为 true\n\n      <MyComponent isStock/>// isStock 默认为 true\n\n#### 9、在 IE11 以下使用 React16\n\nReact16 依赖集合类型 Map 和 Set，在未提供原生支持的浏览器，需要使用一个 polyfill,例如 core-js 和 babel-polyfill\n使用 core-js 支持\n\n      import 'core-js/es6/map';import 'core-js/es6/set';\n      import React from 'react';\n      import ReactDOM from 'react-dom';\n      ReactDOM.render(<h1>Hello, world!</h1>,document.getElementById('root'));\n\n### 3-2、分隔代码\n\n#### 1、componentDidMount 请求服务器数据\n\n在 componentDidMount 请求服务器数据并利用 setState 时应注意，在组件卸载 componentWillUnmount 应该把去求去掉\n\n#### 2、利用 es6 rest 参数（形式为...变量名）传递可变数量的 props\n\n      // 定义子组件\n      const Demo = ({ prop1, prop2, ...restProps }) => (\n      <div>{ restProps.text}</div>\n      )\n      // 父组件使用Demo\n      <Demo prop1={xxx} prop2={xxx} text={xxx}/>\n\n#### 3、setState 的其他用法\n\n      // 一般改变state值的一种方式\n      const { data } = this.state;\n      this.setState({ data: {...data, key: 1 } });\n      // 另外一种可以通过callback的方式改变state的值\n      this.setState(({ data }) => ({ data: {...data, key: 1 } }));\n      // 还可以\n      this.setState((state, props) => {\n      return { counter: state.counter + props.step };\n      });\n\n#### 4、React 性能优化\n\n// React 性能优化有很多种方式，\n// 那常见的一种就是在生命周期函数 shouldComponentUpdate 里面判断\n// 某些值或属性来控制组件是否重新再次渲染。\n// 判断一般的字符串，数字或者基础的对象，数组都还是比较好处理\n// 那嵌套的对象或者数组就比较麻烦了，对于这种\n// 推荐使用 lodash(或者其他的类似库)的 isEqual 对嵌套数组或对象进行判断\nshouldComponentUpdate(nextProps, nextState) {\nif (\\_.isEqual(nextState.columns, this.state.columns)) return false;\nreturn true;\n}\n\n#### 5、React 进阶提高 - 技巧篇（28 个视频）链接\n\n介绍 React 的一些进阶知识点，一些开发上的实践技巧，一些工具库等。\n\n[视频更新地址：](www.qiuzhi99.com/)www.qiuzhi99.com/\n\n\n## 五、学习资料\n\n[翻译后的官方文档，学技术一定要多看几遍文档](doc.react-china.org): doc.react-china.org\n[react官网](https://www.reactjscn.com/):https://www.reactjscn.com/","slug":"React总结","published":1,"updated":"2020-05-28T07:51:13.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckari24xo000m5sjozcgcftam","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=1347529350&auto=1&height=66\"></iframe>\n</div>\n\n<p>自学 <code>React.js</code> 一段时间了，把使用过程遇到的小坑和小技巧记录下来，希望能够帮助到其他人。此文章是长篇大论你只有耐得住寂寞，禁得住诱惑才会有所成长……</p>\n<h1 id=\"React-小技巧汇总\"><a href=\"#React-小技巧汇总\" class=\"headerlink\" title=\"React 小技巧汇总\"></a>React 小技巧汇总</h1><hr>\n<h2 id=\"一、工具篇\"><a href=\"#一、工具篇\" class=\"headerlink\" title=\"一、工具篇\"></a>一、工具篇</h2><h3 id=\"1-显示-html\"><a href=\"#1-显示-html\" class=\"headerlink\" title=\"1.显示 html\"></a>1.显示 html</h3><pre><code>  &lt;div dangerouslySetInnerHTML={{ __html: LANG.auth_register_tips1 }}/&gt;</code></pre><h3 id=\"2-常用组件\"><a href=\"#2-常用组件\" class=\"headerlink\" title=\"2.常用组件\"></a>2.常用组件</h3><ul>\n<li><code>axios</code>(http 请求模块，可用于前端任何场景，很强大)=&gt;<a href=\"https://www.jianshu.com/p/79816fa9c54f\" target=\"_blank\" rel=\"noopener\">封装 axios</a></li>\n<li><code>echarts-for-react</code>(可视化图表，别人基于 react 对 echarts 的封装，足够用了)=&gt;<a href=\"https://www.jianshu.com/p/f6c1c4618c22\" target=\"_blank\" rel=\"noopener\">echarts-for-react</a></li>\n<li><code>recharts</code>(另一个基于 react 封装的图表)=&gt;<a href=\"https://recharts.cosx.org/recharts\" target=\"_blank\" rel=\"noopener\">官网</a></li>\n<li><code>nprogress</code>(顶部加载条，蛮好用)</li>\n<li><code>react-draft-wysiwyg</code>(别人基于 react 的富文本封装，如果找到其他更好的可以替换)</li>\n<li><code>react-draggable</code>(拖拽模块，找了个简单版的)</li>\n<li><code>screenfull</code>(全屏插件)</li>\n<li><code>photoswipe</code>(图片弹层查看插件，不依赖 jQuery，还是蛮好用)</li>\n<li><code>animate.css</code>(css 动画库)</li>\n<li><code>redux Web</code> 应用是一个状态机，视图与状态是一一对应的.所有的状态，保存在一个对象里面</li>\n<li><code>redux-logger</code> 日志</li>\n<li><code>Reselect</code> 记忆组件</li>\n<li><code>redux-thunk</code> 为了解决异步 action 的问题</li>\n<li><code>redux-saga</code> 为了解决异步 action 的问题</li>\n<li><code>react-router-redux</code> 保持路由与应用状态(state)同步</li>\n<li><code>react-router-dom</code>路由基本组件 1).<a href=\"https://www.jianshu.com/p/8954e9fb0c7e\" target=\"_blank\" rel=\"noopener\">在 React 中使用 react-router-dom 路由</a> 2).<a href=\"https://www.jianshu.com/p/19ef80d2e122\" target=\"_blank\" rel=\"noopener\">react-router-dom 及组件生命周期</a></li>\n</ul>\n<h3 id=\"3-react-devtools-调试工具\"><a href=\"#3-react-devtools-调试工具\" class=\"headerlink\" title=\"3.react-devtools 调试工具\"></a>3.react-devtools 调试工具</h3><p><a href=\"https://github.com/facebook/react-devtools\" target=\"_blank\" rel=\"noopener\">工具地址</a>:<a href=\"https://github.com/facebook/react-devtools\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/react-devtools</a></p>\n<p>或者 直接谷歌应用商店搜索<code>react-devtools</code>进行安装.</p>\n<h2 id=\"二、组件通讯篇\"><a href=\"#二、组件通讯篇\" class=\"headerlink\" title=\"二、组件通讯篇\"></a>二、组件通讯篇</h2><p><img src=\"1.jpg\" alt></p>\n<p><strong>需要组件之进行通信的几种情况</strong></p>\n<ul>\n<li>redux 架构</li>\n<li>父组件向子组件 —— props</li>\n<li>子组件向父组件 —— props.funciton 接收参数</li>\n<li>利用事件机制</li>\n</ul>\n<h3 id=\"1-父组件向子组件通信\"><a href=\"#1-父组件向子组件通信\" class=\"headerlink\" title=\"1. 父组件向子组件通信\"></a>1. 父组件向子组件通信</h3><p>React 数据流动是单向的,父组件向子组件通信也是最常见的;父组件通过 props 向子组件传递需要的信息</p>\n<h3 id=\"2-子组件向父组件通信\"><a href=\"#2-子组件向父组件通信\" class=\"headerlink\" title=\"2. 子组件向父组件通信\"></a>2. 子组件向父组件通信</h3><ul>\n<li>利用回调函数</li>\n<li>利用自定义事件机制</li>\n</ul>\n<p><strong>子组件改变父组件的 state</strong></p>\n<pre><code>  // 一般改变state值的一种方式\n  const { data } = this.state;\n  this.setState({ data: {...data, key: 1 } });\n  // 另外一种可以通过callback的方式改变state的值\n  this.setState(({ data }) =&gt; ({ data: {...data, key: 1 } }));\n  // 还可以\n  this.setState((state, props) =&gt; {\n  return { counter: state.counter + props.step };\n  });</code></pre><h3 id=\"3-跨级组件通信\"><a href=\"#3-跨级组件通信\" class=\"headerlink\" title=\"3. 跨级组件通信\"></a>3. 跨级组件通信</h3><ul>\n<li>层层组件传递 props<blockquote>\n<p>例如 A 组件和 B 组件之间要进行通信,先找到 A 和 B 公共的父组件,A 先向 C 组件通信,C 组件通过 props 和 B 组件通信,此时 C 组件起的就是中间件的作用</p>\n</blockquote>\n</li>\n<li>使用 context<br>下面例子中的组件关系: ListItem 是 List 的子组件,List 是 app 的子组件</li>\n</ul>\n<p>ListItem.js</p>\n<pre><code>  import React, { Component } from &#39;react&#39;;\n  import PropTypes from &#39;prop-types&#39;;\n  class ListItem extends Component {\n  // 子组件声明自己要使用context\n  static contextTypes = {\n        color: PropTypes.string,\n  }\n  static propTypes = {\n        value: PropTypes.string,\n  }\n  render() {\n        const { value } = this.props;\n        return (\n              &lt;li style={{ background: this.context.color }}&gt;\n              &lt;span&gt;{value}&lt;/span&gt;\n              &lt;/li&gt;\n        );\n  }\n  }\n  export default ListItem;</code></pre><p>List.js</p>\n<pre><code>  import ListItem from &#39;./ListItem&#39;;\n  class List extends Component {\n  // 父组件声明自己支持context\n  static childContextTypes = {\n        color: PropTypes.string,\n  }\n  static propTypes = {\n        list: PropTypes.array,\n  }\n  // 提供一个函数,用来返回相应的context对象\n  getChildContext() {\n        return {\n              color: &#39;red&#39;,\n        };\n  }\n  render() {\n        const { list } = this.props;\n        return (\n              &lt;div&gt;\n              &lt;ul&gt;\n                    {\n                          list.map((entry, index) =&gt;\n                          &lt;ListItem key={`list-${index}`} value={entry.text} /&gt;,\n                    )\n                    }\n              &lt;/ul&gt;\n              &lt;/div&gt;\n        );\n  }\n  }\n  export default List;</code></pre><p>App.js</p>\n<pre><code>  import React, { Component } from &#39;react&#39;;\n  import List from &#39;./components/List&#39;;\n  const list = [\n  {\n        text: &#39;题目一&#39;,\n  },\n  {\n        text: &#39;题目二&#39;,\n  },\n  ];\n  export default class App extends Component {\n  render() {\n        return (\n              &lt;div&gt;\n              &lt;List\n                    list={list}\n              /&gt;\n              &lt;/div&gt;\n        );\n  }\n  }</code></pre><h3 id=\"4-没有嵌套关系的组件通信\"><a href=\"#4-没有嵌套关系的组件通信\" class=\"headerlink\" title=\"4. 没有嵌套关系的组件通信\"></a>4. 没有嵌套关系的组件通信</h3><!-- + 使用自定义事件机制\n\n>在componentDidMount事件中,如果组件挂载完成,再订阅事件;在组件卸载的时候,在componentWillUnmount事件中取消事件的订阅;以常用的发布/订阅模式举例,借用Node.js Events模块的浏览器版实现 -->\n\n<ul>\n<li>组件间通信之 onRef 方法</li>\n</ul>\n<blockquote>\n<p>组件间通信除了 props 外还有 onRef 方法，不过 React 官方文档建议不要过度依赖 ref。本文使用 onRef 语境为在表单录入时提取公共组件，在提交时分别获取表单信息。</p>\n</blockquote>\n<p>下面 demo 中点击父组件按钮可以获取子组件全部信息，包括状态和方法，可以看下 demo 中控制台打印。</p>\n<pre><code>  // 父组件\n  class Parent extends React.Component {\n  testRef=(ref)=&gt;{\n  this.child = ref\n  console.log(ref) // -&gt; 获取整个Child元素\n  }\n  handleClick=()=&gt;{\n  alert(this.child.state.info) // -&gt; 通过this.child可以拿到child所有状态和方法\n  }\n  render() {\n  return &lt;div&gt;\n        &lt;Child onRef={this.testRef} /&gt;\n        &lt;button onClick={this.handleClick}&gt;父组件按钮&lt;/button&gt;\n  &lt;/div&gt;\n  }\n  }\n  // 子组件\n  class Child extends React.Component {\n  constructor(props) {\n  super(props)\n  this.state = {\n        info:&#39;快点击子组件按钮哈哈哈&#39;\n  }\n  }\n  componentDidMount(){\n  this.props.onRef(this)\n  console.log(this) // -&gt;将child传递给this.props.onRef()方法\n  }\n  handleChildClick=()=&gt;{\n  this.setState({info:&#39;通过父组件按钮获取到子组件信息啦啦啦&#39;})\n  }\n  render(){\n  return &lt;button onClick={this.handleChildClick}&gt;子组件按钮&lt;/button&gt;\n  }\n  }</code></pre><p><code>原理</code>：当在子组件中调用 onRef 函数时，正在调用从父组件传递的函数。this.props.onRef（this）这里的参数指向子组件本身，父组件接收该引用作为第一个参数：onRef = {ref =&gt;（this.child = ref）}然后它使用 this.child 保存引用。之后，可以在父组件内访问整个子组件实例，并且可以调用子组件函数。</p>\n<h2 id=\"三、路由篇\"><a href=\"#三、路由篇\" class=\"headerlink\" title=\"三、路由篇\"></a>三、路由篇</h2><blockquote>\n<p>使用 React 构建的单页面应用，要想实现页面间的跳转，首先想到的就是使用路由。在 React 中，常用的有两个包可以实现这个需求，那就是 react-router 和 react-router-dom。本文主要针对 react-router-dom 进行说明。</p>\n</blockquote>\n<h3 id=\"1、React-Router-中有三类组件\"><a href=\"#1、React-Router-中有三类组件\" class=\"headerlink\" title=\"1、React Router 中有三类组件:\"></a>1、React Router 中有三类组件:</h3><ul>\n<li>router 组件（BrowserRouter，HashRouter）</li>\n<li>route matching 组件（Route，Switch）</li>\n<li>navigation 组件（Link）</li>\n</ul>\n<blockquote>\n<p>基于 React Router 的 web 应用，根组件应该是一个 router 组件（BrowserRouter，HashRouter）。 项目中，react-router-dom 提供了和两种路由。两种路由都会创建一个 history 对象。如果我们的应用有服务器响应 web 的请求，我们通常使用<browserrouter>组件; 如果使用静态文件服务器，则我们应该使用<hashrouter>组件</hashrouter></browserrouter></p>\n</blockquote>\n<h3 id=\"2、HashRouter-和-BrowserRouter\"><a href=\"#2、HashRouter-和-BrowserRouter\" class=\"headerlink\" title=\"2、HashRouter 和 BrowserRouter\"></a>2、HashRouter 和 BrowserRouter</h3><p>其实就是路由的 hash 和 history 两种模式（要是不了解这两种模式之间的区别那就需要去恶补下啦）</p>\n<p>并且这两个组件是路由的容器，<code>必须在最外层</code>—&gt;内部是 <code>Route</code></p>\n<pre><code>  // hash模式\n  ReactDom.render(\n  &lt;HashRouter&gt;\n        &lt;Route path=&quot;/&quot; component={Home}/&gt;\n  &lt;/HashRouter&gt;\n  )\n  // history模式\n  ReactDom.render(\n  &lt;BrowserRouter&gt;\n        &lt;Route path=&quot;/&quot; component={Home}/&gt;\n  &lt;/BrowserRouter&gt;\n  )</code></pre><p><strong>下面说说 HashRouter 和 BrowserRouter 上的参数</strong></p>\n<ul>\n<li>basename 路由的基础链接，用来部署到非根目录下，比如你需要将项目部署到 <a href=\"http://www.xxxx.com/web\" target=\"_blank\" rel=\"noopener\">www.xxxx.com/web</a> 下，则设置 basename=”/web”</li>\n<li>getUserConfirmation 用来拦截 Prompt 组件，并且决定是否跳转</li>\n<li>forceRefresh 用来设置是否强制浏览器整体刷新，默认值为 false</li>\n<li>keLength 用来设置 location.key 的长度，默认是 6，可以自定义</li>\n</ul>\n<h3 id=\"3、Route\"><a href=\"#3、Route\" class=\"headerlink\" title=\"3、Route\"></a>3、Route</h3><p>Route 是路由的一个原材料，它是控制路径对应显示的组件</p>\n<p>Route 的参数:</p>\n<ul>\n<li>path 跳转的路径</li>\n<li>component 对应路径显示的组件</li>\n<li>render 可以自己写 render 函数返回具体的 dom，而不需要去设置 component</li>\n<li>location 传递 route 对象，和当前的 route 对象对比，如果匹配则跳转</li>\n<li>exact 匹配规则，true 的时候则精确匹配。</li>\n</ul>\n<h3 id=\"4、Router\"><a href=\"#4、Router\" class=\"headerlink\" title=\"4、Router\"></a>4、Router</h3><p>低级路由，适用于任何路由组件，主要和 redux 深度集成，使用必须配合 history 对象</p>\n<p>使用 Router 路由的目的是和状态管理库如 redux 中的 history 同步对接</p>\n<pre><code>  &lt;Router history={history}&gt;\n  ...\n  &lt;/Router&gt;</code></pre><h3 id=\"5、Link-和-NavLink\"><a href=\"#5、Link-和-NavLink\" class=\"headerlink\" title=\"5、Link 和 NavLink\"></a>5、Link 和 NavLink</h3><p>两者都是跳转路由，NavLink 的参数更多些<br><strong>Link 的 api</strong></p>\n<ul>\n<li><p>to 有两种写法，表示跳转到哪个路由</p>\n</li>\n<li><p>字符串写法</p>\n  <link to=\"/a\">\n</li>\n<li><p>对象写法</p>\n<pre><code>&lt;Link to={{\n      pathname: '/courses',\n      search: '?sort=name',\n      hash: '#the-hash',\n      state: { fromDashboard: true }\n      }}/&gt;</code></pre></li>\n<li><p>replace 就是将 push 改成 replace</p>\n</li>\n<li><p>innerRef 访问 Link 标签的 dom</p>\n</li>\n</ul>\n<p><strong>NavLink 的 api</strong></p>\n<ul>\n<li><p>Link 的所有 api</p>\n</li>\n<li><p>activeClassName 路由激活的时候设置的类名</p>\n</li>\n<li><p>activeStyle 路由激活设置的样式</p>\n</li>\n<li><p>exact 参考 Route，符合这个条件才会激活 active 类</p>\n</li>\n<li><p>strict 参考 Route，符合这个条件才会激活 active 类</p>\n</li>\n<li><p>isActive 接收一个回调函数，active 状态变化的时候回触发，返回 false 则中断跳转</p>\n<pre><code>const oddEvent = (match, location) =&gt; {\nconsole.log(match,location)\nif (!match) {\nreturn false\n}\nconsole.log(match.id)\nreturn true\n}\n&lt;NavLink isActive={oddEvent} to=&quot;/a/123&quot;&gt;组件一&lt;/NavLink&gt;</code></pre></li>\n</ul>\n<ul>\n<li><p>location 接收一个 location 对象，当 url 满足这个对象的条件才会跳转</p>\n<pre><code>&lt;NavLink to=&quot;/a/123&quot; location={{ key:\"mb5wu3\", pathname:\"/a/123\" }}/&gt;</code></pre></li>\n</ul>\n<h3 id=\"6、Redirect\"><a href=\"#6、Redirect\" class=\"headerlink\" title=\"6、Redirect\"></a>6、Redirect</h3><p>Redirect 重定向很简单，我们直接看代码即可</p>\n<pre><code>  // 基本的重定向\n  &lt;Redirect to=&quot;/somewhere/else&quot; /&gt;\n  // 对象形式\n  &lt;Redirect\n  to={{\n      pathname: \"/login\",\n      search: \"?utm=your+face\",\n      state: { referrer: currentLocation }\n      }}\n  /&gt;\n  // 采用push生成新的记录\n  &lt;Redirect push to=&quot;/somewhere/else&quot; /&gt;\n  // 配合Switch组件使用，form表示重定向之前的路径，如果匹配则重定向，不匹配则不重定向\n  &lt;Switch&gt;\n  &lt;Redirect from=&#39;/old-path&#39; to=&#39;/new-path&#39;/&gt;\n  &lt;Route path=&#39;/new-path&#39; component={Place}/&gt;\n  &lt;/Switch&gt;</code></pre><h3 id=\"7、Switch\"><a href=\"#7、Switch\" class=\"headerlink\" title=\"7、Switch\"></a>7、Switch</h3><p>路由切换，只会匹配第一个路由，可以想象成 tab 栏</p>\n<p>Switch 内部只能包含 Route、Redirect、Router</p>\n<pre><code>  &lt;Switch&gt;\n  &lt;Route exact path=&quot;/&quot; component={Home}/&gt;\n  &lt;Route path=&quot;/about&quot; component={About}/&gt;\n  &lt;Route path=&quot;/:user&quot; component={User}/&gt;\n  &lt;Route component={NoMatch}/&gt;\n  &lt;/Switch&gt;</code></pre><h3 id=\"8、withRouter\"><a href=\"#8、withRouter\" class=\"headerlink\" title=\"8、withRouter\"></a>8、withRouter</h3><p>当一个非路由组件也想访问到当前路由的 match,location,history 对象，那么 withRouter 将是一个非常好的选择，可以理解为将一个组件包裹成路由组件</p>\n<pre><code>  import { withRouter } from &#39;react-router-dom&#39;\n  const MyComponent = (props) =&gt; {\n  const { match, location, history } = this.props\n  return (\n        &lt;div&gt;{props.location.pathname}&lt;/div&gt;\n  )\n  }\n  const FirstTest = withRouter(MyComponent);</code></pre><h3 id=\"9、history-对象\"><a href=\"#9、history-对象\" class=\"headerlink\" title=\"9、history 对象\"></a>9、history 对象</h3><p>用过 vue 的都知道，vue-router 有组件形式的导航，也有编程式导航，那 react-router 怎么使用 api 来控制前进后退和刷新呢？这就需要我们来说明下<code>history</code>对象的作用了其实在每个路由组件中我们可以使用<code>this.props.history</code>获取到<code>history</code>对象，也可以使用 withRouter 包裹组件获取，在 history 中封装了 push，replace，go 等方法，具体内容如下</p>\n<pre><code>  History {\n  length: number;\n  action: Action;\n  location: Location;\n  push(path: Path, state?: LocationState): void; // 调用push前进到一个地址,可以接受一个state对象，就是自定义的路由数据\n  push(location: LocationDescriptorObject): void; // 接受一个location的描述对象\n  replace(path: Path, state?: LocationState): void; // 用页面替换当前的路径，不可再goBack\n  replace(location: LocationDescriptorObject): void; // 同上\n  go(n: number): void; // 往前走多少也页面\n  goBack(): void; // 返回一个页面\n  goForward(): void; // 前进一个页面\n  block(prompt?: boolean | string | TransitionPromptHook): UnregisterCallback;\n  listen(listener: LocationListener): UnregisterCallback;\n  createHref(location: LocationDescriptorObject): Href;\n  }</code></pre><p>这样我们想使用 api 来操作前进后退就可以调用 history 中的方法啦</p>\n<p>其次也可通过暗转 history 库来实现，具体案例如下</p>\n<pre><code>  import { BrowserRouter } from &#39;react-router-dom&#39;;\n  const history = require(&#39;history&#39;).createBrowserHistory();\n  /**\n  * forceRefresh: bool\n  * 作用：当浏览器不支持 HTML5 的 history API 时强制刷新页面。\n  */\n  const supportsHistory = &#39;pushState&#39; in window.history;\n  &lt;BrowserRouter\n        history={history}\n        basename=&quot;/&quot;\n        forceRefresh={!supportsHistory}\n        &gt;\n        {/* 路由入口 */}\n        ......\n  &lt;/BrowserRouter&gt;</code></pre><h3 id=\"10、-React-router-页面跳转的三种方式\"><a href=\"#10、-React-router-页面跳转的三种方式\" class=\"headerlink\" title=\"10、 React-router 页面跳转的三种方式\"></a>10、 React-router 页面跳转的三种方式</h3><p><a href=\"https://blog.csdn.net/Vue2018/article/details/100564775\" target=\"_blank\" rel=\"noopener\">React-router 页面跳转的三种方式</a>:<a href=\"https://blog.csdn.net/Vue2018/article/details/100564775\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Vue2018/article/details/100564775</a></p>\n<h2 id=\"四、性能篇\"><a href=\"#四、性能篇\" class=\"headerlink\" title=\"四、性能篇\"></a>四、性能篇</h2><h3 id=\"1、react-组件的性能优化（渲染角度优化）\"><a href=\"#1、react-组件的性能优化（渲染角度优化）\" class=\"headerlink\" title=\"1、react 组件的性能优化（渲染角度优化）\"></a>1、react 组件的性能优化（渲染角度优化）</h3><h4 id=\"1、react-性能查看工具\"><a href=\"#1、react-性能查看工具\" class=\"headerlink\" title=\"1、react 性能查看工具\"></a>1、react 性能查看工具</h4><blockquote>\n<p>再讲性能优化之前，我们需要先来了解一下如何查看 react 加载组件时所耗费的时间的工具，在 react 16 版本之前我们可以使用 React Perf 来查看。react16 版本之前，我们可以使用 react-addons-perf 工具来查看，而在最新的 16 版本，我们只需要在 url 后加上?react_pref。</p>\n</blockquote>\n<p>首先来了解一下<a href=\"https://reactjs.org/docs/perf.html\" target=\"_blank\" rel=\"noopener\">react-addons-perf</a></p>\n<p><code>react-addons-perf</code>这是 <code>React</code> 官方推出的一个性能工具包，可以打印出组件渲染的时间、次数、浪费时间等。</p>\n<p>简单说几个 api，具体用法可参考<a href=\"https://reactjs.org/docs/perf.html\" target=\"_blank\" rel=\"noopener\">官网</a>：</p>\n<ul>\n<li>Perf.start() 开始记录</li>\n<li>Perf.stop() 结束记录</li>\n<li>Perf.printInclusive() 查看所有设计到的组件 render</li>\n<li>Perf.printWasted() 查看不需要的浪费组件 render</li>\n</ul>\n<p>大家可以在 chorme 中先安装 React Perf 扩展，然后在入口文件或者 redux 的 store.js 中加入相应的代码即可：<br><img src=\"2.jpg\" alt></p>\n<p>再来了解一下，在最新的 React16 版本中，在<code>url</code>后加上<code>?react_pref</code>，就可以在 chrome 浏览器的<code>performance</code>，我们可以查看<code>User Timeing</code>来查看组件的加载时间。点击 record 开始记录，注意记录时长不要超过 20s，否则可能导致 chrome 挂起。</p>\n<p><img src=\"3.jpg\" alt><br>大图<br><img src=\"4.jpg\" alt></p>\n<h4 id=\"2、单个-react-组件性能优化\"><a href=\"#2、单个-react-组件性能优化\" class=\"headerlink\" title=\"2、单个 react 组件性能优化\"></a>2、单个 react 组件性能优化</h4><ul>\n<li>1、render 里面尽量减少新建变量和 bind 函数，传递参数是尽量减少传递参数的数量。</li>\n</ul>\n<blockquote>\n<p>首先我们先思考一个问题，比如我要实现一个点击按钮使相应的 num 增加 1，我们有哪一些方法。<br>大家应该都能想到，无非就是三种，如下图：</p>\n</blockquote>\n<p><img src=\"5.jpg\" alt></p>\n<ul>\n<li><p>第一种是在<code>构造函数</code>中绑定 this，</p>\n</li>\n<li><p>第二种是在 render()函数里面绑定 this，</p>\n</li>\n<li><p>第三种就是使用箭头函数，都能实现上述方法；<br>但是哪一种方法的性能最好，是我们要考虑的问题。应该大家都知道答案：<br><code>第一种的性能最好</code>。因为第一种，构造函数每一次渲染的时候<code>只会执行一遍</code>；<br>而第二种方法，在每次 render()的时候都会重新执行一遍函数；<br>第三种方法的话，每一次 render()的时候，都会生成一个新的箭头函数，即使两个箭头函数的内容是一样的。</p>\n</li>\n<li><p>2、定制 shouldComponentUpdate 函数</p>\n</li>\n</ul>\n<blockquote>\n<p>shouldComponentUpdate 是决定 react 组件什么时候能够不重新渲染的函数，但是这个函数默认的实现方式就是简单的返回一个 true。也就是说，默认每次更新的时候都要调用所用的生命周期函数，包括 render 函数，重新渲染。<br>我们来看一下下面的一个例子</p>\n</blockquote>\n<p><img src=\"6.jpg\" alt></p>\n<p>我们写两个组件，App 和 Demo 组件，并写两个方法，一个改变 App 中的 num 的值，一个是改变 title，我们在 Demo 的 render 中打印 render 函数。我们可以看到以下的效果：</p>\n<p><img src=\"7.jpg\" alt></p>\n<p>我们可以清晰的看到虽然 demo 组件里的 title 值没有改变，但是还是 render 了。</p>\n<p>为了解决这个问题，我们可以对 demo 组件进行如下的修改：</p>\n<p><img src=\"8.jpg\" alt></p>\n<p>只有当 demo 的 title 值发生改变的时候，我们才去 render，我们可以看一下效果：</p>\n<p><img src=\"9.jpg\" alt></p>\n<p>以上只是一个特别简单的一个对于 shouldComponentUpdate 的定制。在最新的 react 中，react 给我们提供了 React.PureComponent，官方也在早期提供了名为 react-addons-pure-render-mixin 插件来重新实现 shouldComponentUpdate 生命周期方法。<br><img src=\"10.jpg\" alt></p>\n<p>通过上述的方法的效果也是和我们定制 shouldComponentUpdate 的效果是一致的。但是我们要注意的是，这里的 PureRender 是浅比较的，因为深比较的场景是相当昂贵的。所以我们要注意我们在 1.1 中说到的一些注意点：不要直接为 props 设置对象或者数组、不要将方法直接绑定在元素上，因为其实函数也是对象</p>\n<h3 id=\"2、redux-性能优化：reselect（数据获取时优化-待研究）\"><a href=\"#2、redux-性能优化：reselect（数据获取时优化-待研究）\" class=\"headerlink\" title=\"2、redux 性能优化：reselect（数据获取时优化 待研究）\"></a>2、redux 性能优化：reselect（数据获取时优化 待研究）</h3><p><a href=\"https://www.jianshu.com/p/1fcef4c892ba?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation\" target=\"_blank\" rel=\"noopener\">react-redux 性能优化之 reselect</a></p>\n<h3 id=\"3-1、分隔代码\"><a href=\"#3-1、分隔代码\" class=\"headerlink\" title=\"3-1、分隔代码\"></a>3-1、分隔代码</h3><h4 id=\"1、动态加载\"><a href=\"#1、动态加载\" class=\"headerlink\" title=\"1、动态加载\"></a>1、动态加载</h4><p>ES6 标准引入了 import 以方便我们静态加载模块。形式如：</p>\n<pre><code>  import xxx from xxx.</code></pre><p>尽管 import 对于我们加载模块很有帮助，但是静态加载模块的方式一定程度上限制了我们来实现异步模块加载。不过，目前动态加载模块的 import()语法已处于提案阶段，并且 webpack 已将他引入并使用。import()提供了基于 Promise 的 API，因此，import()的返回值是一个完成状态或拒绝状态的 Promise 对象。形式如：</p>\n<pre><code>  import(/* webpackChunkName: &#39;module&#39;*/ &quot;module&quot;)\n  .then(() =&gt; {\n        //todo\n  })\n  .catch(_ =&gt; console.log(&#39;It is an error&#39;))</code></pre><p>webpack 在编译时，识别到动态加载的 import 语法，则 webpack 会为当前动态加载的模块创建一个单独的 bundle。如果你使用的是官方的 Create-react-app 脚手架或 React 的服务端渲染框架 Next.js，那么可以直接使用动态 import 语法。如果你的脚手架是你自己配置的 webpack，那么你需要按照官方指南来设置，请移步[1]。</p>\n<h4 id=\"2、动态加载-React-组件\"><a href=\"#2、动态加载-React-组件\" class=\"headerlink\" title=\"2、动态加载 React 组件\"></a>2、动态加载 React 组件</h4><p>当前最为流行的一种方法是使用 React-loadable [2]库提供的懒加载 React 组件。它利用 import()语法，使用 Promise 语法加载 React 组件。同时，React-loadable 支持 React 的服务端渲染。 通常，我们以如下方式实现组件：</p>\n<pre><code>  import LazyComponet from &#39;LazyComponent&#39;;\n  export default function DemoComponent() {\n  return (\n        &lt;div&gt;\n              &lt;p&gt;demo component&lt;/p&gt;\n              &lt;AComponent /&gt;\n        &lt;/div&gt;\n  )\n  }</code></pre><p>在上面的例子中，假设 LazyComponet 在 DemoComponent 渲染时我们并不展示。但是因为我们使用 import 语法将 LazyComponet 导入，所以在编译时会将 LazyComponet 的代码与 DemoComponent 的代码打包到同一个 bundle 里面。 但是，这并不是我们想要的。所以我们可以通过使用 React-loadable 来懒加载 LazyComponet ，同时将 LazyComponet 的代码单独打包到一个 bundle 里面。我们可以看一下官网提供的例子：</p>\n<pre><code>  import Loadable from &#39;react-loadable&#39;;\n  import Loading from &#39;./my-loading-component&#39;;\n  const LoadableComponent = Loadable({\n  loader: () =&gt; import(&#39;./my-component&#39;),\n  loading: Loading,\n  });\n  export default class App extends React.Component {\n  render() {\n  return &lt;LoadableComponent/&gt;;\n  }\n  }</code></pre><p>从例子中我们可以看到，react-loadable 使用动态 import()方法，并将导入的组件分配给 loader 属性。同时，react-loadable 提供了一个 loading 属性，以设置在加载组件时将展示的组件。</p>\n<h4 id=\"3、高阶组件（HOC）\"><a href=\"#3、高阶组件（HOC）\" class=\"headerlink\" title=\"3、高阶组件（HOC）\"></a>3、高阶组件（HOC）</h4><p>高阶函数，可以传入函数作为参数的函数，如 map,sort,reduce。高阶组件包装了另一个组件的组件。</p>\n<p>属性代理 （Props Proxy）<br>反向继承 （Inheritance Inversion）</p>\n<h4 id=\"4、无状态组件\"><a href=\"#4、无状态组件\" class=\"headerlink\" title=\"4、无状态组件\"></a>4、无状态组件</h4><p>使用无状态组件，只从父组件接收 props，可以提高组件的渲染性能</p>\n<pre><code>  const HelloWorld = (props) =&gt; &lt;div&gt;{props.name}&lt;/div&gt;ReactDOM.render(&lt;HelloWorld name=&quot;HelloWorld&quot; /&gt;,App)</code></pre><h4 id=\"5、componentWillReceiveProps-中取-props-的值\"><a href=\"#5、componentWillReceiveProps-中取-props-的值\" class=\"headerlink\" title=\"5、componentWillReceiveProps 中取 props 的值\"></a>5、componentWillReceiveProps 中取 props 的值</h4><p>注意应该取 nextProps,而不是 this.props</p>\n<h4 id=\"6、bind-绑定函数\"><a href=\"#6、bind-绑定函数\" class=\"headerlink\" title=\"6、bind 绑定函数\"></a>6、bind 绑定函数</h4><p>利用 bind 绑定函数，是默认有 event 这个参数的，只是这个参数在给定参数之后</p>\n<pre><code>  handleClockClick (id, e) {\n        console.log(id,e)\n        }\n  &lt;button onClick={this.handleClockClick.bind(this, 2)}&gt;Clock&lt;/button&gt;</code></pre><h4 id=\"7、ES6-类中，函数-this-不默认指向-对象\"><a href=\"#7、ES6-类中，函数-this-不默认指向-对象\" class=\"headerlink\" title=\"7、ES6 类中，函数 this 不默认指向 对象\"></a>7、ES6 类中，函数 this 不默认指向 对象</h4><ul>\n<li><p>this.getDomNode 已经在低版本被移除了，现在设置 ref=xxx，然后使用 this.refs.xxx 访问 DOM 元素</p>\n</li>\n<li><p><code>ref</code> 可以赋值两种类型，一种是字符串，一种是函数, 字符串只能用在类组件，DOM 元素使用函数，纯函数组件不能使用 ref。旧版本 DOM 元素虽然可以使用 ref，但是 React 已不推荐。</p>\n<pre><code>ref=&quot;test&quot; // this.refs.test 访问ref={test =&gt; this.test = test} // this.test 访问</code></pre></li>\n</ul>\n<h4 id=\"8、当只写属性名时，默认值为-true\"><a href=\"#8、当只写属性名时，默认值为-true\" class=\"headerlink\" title=\"8、当只写属性名时，默认值为 true\"></a>8、当只写属性名时，默认值为 true</h4><pre><code>  &lt;MyComponent isStock/&gt;// isStock 默认为 true</code></pre><h4 id=\"9、在-IE11-以下使用-React16\"><a href=\"#9、在-IE11-以下使用-React16\" class=\"headerlink\" title=\"9、在 IE11 以下使用 React16\"></a>9、在 IE11 以下使用 React16</h4><p>React16 依赖集合类型 Map 和 Set，在未提供原生支持的浏览器，需要使用一个 polyfill,例如 core-js 和 babel-polyfill<br>使用 core-js 支持</p>\n<pre><code>  import &#39;core-js/es6/map&#39;;import &#39;core-js/es6/set&#39;;\n  import React from &#39;react&#39;;\n  import ReactDOM from &#39;react-dom&#39;;\n  ReactDOM.render(&lt;h1&gt;Hello, world!&lt;/h1&gt;,document.getElementById(&#39;root&#39;));</code></pre><h3 id=\"3-2、分隔代码\"><a href=\"#3-2、分隔代码\" class=\"headerlink\" title=\"3-2、分隔代码\"></a>3-2、分隔代码</h3><h4 id=\"1、componentDidMount-请求服务器数据\"><a href=\"#1、componentDidMount-请求服务器数据\" class=\"headerlink\" title=\"1、componentDidMount 请求服务器数据\"></a>1、componentDidMount 请求服务器数据</h4><p>在 componentDidMount 请求服务器数据并利用 setState 时应注意，在组件卸载 componentWillUnmount 应该把去求去掉</p>\n<h4 id=\"2、利用-es6-rest-参数（形式为…变量名）传递可变数量的-props\"><a href=\"#2、利用-es6-rest-参数（形式为…变量名）传递可变数量的-props\" class=\"headerlink\" title=\"2、利用 es6 rest 参数（形式为…变量名）传递可变数量的 props\"></a>2、利用 es6 rest 参数（形式为…变量名）传递可变数量的 props</h4><pre><code>  // 定义子组件\n  const Demo = ({ prop1, prop2, ...restProps }) =&gt; (\n  &lt;div&gt;{ restProps.text}&lt;/div&gt;\n  )\n  // 父组件使用Demo\n  &lt;Demo prop1={xxx} prop2={xxx} text={xxx}/&gt;</code></pre><h4 id=\"3、setState-的其他用法\"><a href=\"#3、setState-的其他用法\" class=\"headerlink\" title=\"3、setState 的其他用法\"></a>3、setState 的其他用法</h4><pre><code>  // 一般改变state值的一种方式\n  const { data } = this.state;\n  this.setState({ data: {...data, key: 1 } });\n  // 另外一种可以通过callback的方式改变state的值\n  this.setState(({ data }) =&gt; ({ data: {...data, key: 1 } }));\n  // 还可以\n  this.setState((state, props) =&gt; {\n  return { counter: state.counter + props.step };\n  });</code></pre><h4 id=\"4、React-性能优化\"><a href=\"#4、React-性能优化\" class=\"headerlink\" title=\"4、React 性能优化\"></a>4、React 性能优化</h4><p>// React 性能优化有很多种方式，<br>// 那常见的一种就是在生命周期函数 shouldComponentUpdate 里面判断<br>// 某些值或属性来控制组件是否重新再次渲染。<br>// 判断一般的字符串，数字或者基础的对象，数组都还是比较好处理<br>// 那嵌套的对象或者数组就比较麻烦了，对于这种<br>// 推荐使用 lodash(或者其他的类似库)的 isEqual 对嵌套数组或对象进行判断<br>shouldComponentUpdate(nextProps, nextState) {<br>if (_.isEqual(nextState.columns, this.state.columns)) return false;<br>return true;<br>}</p>\n<h4 id=\"5、React-进阶提高-技巧篇（28-个视频）链接\"><a href=\"#5、React-进阶提高-技巧篇（28-个视频）链接\" class=\"headerlink\" title=\"5、React 进阶提高 - 技巧篇（28 个视频）链接\"></a>5、React 进阶提高 - 技巧篇（28 个视频）链接</h4><p>介绍 React 的一些进阶知识点，一些开发上的实践技巧，一些工具库等。</p>\n<p><a href=\"www.qiuzhi99.com/\">视频更新地址：</a><a href=\"http://www.qiuzhi99.com/\" target=\"_blank\" rel=\"noopener\">www.qiuzhi99.com/</a></p>\n<h2 id=\"五、学习资料\"><a href=\"#五、学习资料\" class=\"headerlink\" title=\"五、学习资料\"></a>五、学习资料</h2><p><a href=\"doc.react-china.org\">翻译后的官方文档，学技术一定要多看几遍文档</a>: doc.react-china.org<br><a href=\"https://www.reactjscn.com/\" target=\"_blank\" rel=\"noopener\">react官网</a>:<a href=\"https://www.reactjscn.com/\" target=\"_blank\" rel=\"noopener\">https://www.reactjscn.com/</a></p>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=1347529350&auto=1&height=66\"></iframe>\n</div>\n\n<p>自学 <code>React.js</code> 一段时间了，把使用过程遇到的小坑和小技巧记录下来，希望能够帮助到其他人。此文章是长篇大论你只有耐得住寂寞，禁得住诱惑才会有所成长……</p>\n<h1 id=\"React-小技巧汇总\"><a href=\"#React-小技巧汇总\" class=\"headerlink\" title=\"React 小技巧汇总\"></a>React 小技巧汇总</h1><hr>\n<h2 id=\"一、工具篇\"><a href=\"#一、工具篇\" class=\"headerlink\" title=\"一、工具篇\"></a>一、工具篇</h2><h3 id=\"1-显示-html\"><a href=\"#1-显示-html\" class=\"headerlink\" title=\"1.显示 html\"></a>1.显示 html</h3><pre><code>  &lt;div dangerouslySetInnerHTML={{ __html: LANG.auth_register_tips1 }}/&gt;</code></pre><h3 id=\"2-常用组件\"><a href=\"#2-常用组件\" class=\"headerlink\" title=\"2.常用组件\"></a>2.常用组件</h3><ul>\n<li><code>axios</code>(http 请求模块，可用于前端任何场景，很强大)=&gt;<a href=\"https://www.jianshu.com/p/79816fa9c54f\" target=\"_blank\" rel=\"noopener\">封装 axios</a></li>\n<li><code>echarts-for-react</code>(可视化图表，别人基于 react 对 echarts 的封装，足够用了)=&gt;<a href=\"https://www.jianshu.com/p/f6c1c4618c22\" target=\"_blank\" rel=\"noopener\">echarts-for-react</a></li>\n<li><code>recharts</code>(另一个基于 react 封装的图表)=&gt;<a href=\"https://recharts.cosx.org/recharts\" target=\"_blank\" rel=\"noopener\">官网</a></li>\n<li><code>nprogress</code>(顶部加载条，蛮好用)</li>\n<li><code>react-draft-wysiwyg</code>(别人基于 react 的富文本封装，如果找到其他更好的可以替换)</li>\n<li><code>react-draggable</code>(拖拽模块，找了个简单版的)</li>\n<li><code>screenfull</code>(全屏插件)</li>\n<li><code>photoswipe</code>(图片弹层查看插件，不依赖 jQuery，还是蛮好用)</li>\n<li><code>animate.css</code>(css 动画库)</li>\n<li><code>redux Web</code> 应用是一个状态机，视图与状态是一一对应的.所有的状态，保存在一个对象里面</li>\n<li><code>redux-logger</code> 日志</li>\n<li><code>Reselect</code> 记忆组件</li>\n<li><code>redux-thunk</code> 为了解决异步 action 的问题</li>\n<li><code>redux-saga</code> 为了解决异步 action 的问题</li>\n<li><code>react-router-redux</code> 保持路由与应用状态(state)同步</li>\n<li><code>react-router-dom</code>路由基本组件 1).<a href=\"https://www.jianshu.com/p/8954e9fb0c7e\" target=\"_blank\" rel=\"noopener\">在 React 中使用 react-router-dom 路由</a> 2).<a href=\"https://www.jianshu.com/p/19ef80d2e122\" target=\"_blank\" rel=\"noopener\">react-router-dom 及组件生命周期</a></li>\n</ul>\n<h3 id=\"3-react-devtools-调试工具\"><a href=\"#3-react-devtools-调试工具\" class=\"headerlink\" title=\"3.react-devtools 调试工具\"></a>3.react-devtools 调试工具</h3><p><a href=\"https://github.com/facebook/react-devtools\" target=\"_blank\" rel=\"noopener\">工具地址</a>:<a href=\"https://github.com/facebook/react-devtools\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/react-devtools</a></p>\n<p>或者 直接谷歌应用商店搜索<code>react-devtools</code>进行安装.</p>\n<h2 id=\"二、组件通讯篇\"><a href=\"#二、组件通讯篇\" class=\"headerlink\" title=\"二、组件通讯篇\"></a>二、组件通讯篇</h2><p><img src=\"1.jpg\" alt></p>\n<p><strong>需要组件之进行通信的几种情况</strong></p>\n<ul>\n<li>redux 架构</li>\n<li>父组件向子组件 —— props</li>\n<li>子组件向父组件 —— props.funciton 接收参数</li>\n<li>利用事件机制</li>\n</ul>\n<h3 id=\"1-父组件向子组件通信\"><a href=\"#1-父组件向子组件通信\" class=\"headerlink\" title=\"1. 父组件向子组件通信\"></a>1. 父组件向子组件通信</h3><p>React 数据流动是单向的,父组件向子组件通信也是最常见的;父组件通过 props 向子组件传递需要的信息</p>\n<h3 id=\"2-子组件向父组件通信\"><a href=\"#2-子组件向父组件通信\" class=\"headerlink\" title=\"2. 子组件向父组件通信\"></a>2. 子组件向父组件通信</h3><ul>\n<li>利用回调函数</li>\n<li>利用自定义事件机制</li>\n</ul>\n<p><strong>子组件改变父组件的 state</strong></p>\n<pre><code>  // 一般改变state值的一种方式\n  const { data } = this.state;\n  this.setState({ data: {...data, key: 1 } });\n  // 另外一种可以通过callback的方式改变state的值\n  this.setState(({ data }) =&gt; ({ data: {...data, key: 1 } }));\n  // 还可以\n  this.setState((state, props) =&gt; {\n  return { counter: state.counter + props.step };\n  });</code></pre><h3 id=\"3-跨级组件通信\"><a href=\"#3-跨级组件通信\" class=\"headerlink\" title=\"3. 跨级组件通信\"></a>3. 跨级组件通信</h3><ul>\n<li>层层组件传递 props<blockquote>\n<p>例如 A 组件和 B 组件之间要进行通信,先找到 A 和 B 公共的父组件,A 先向 C 组件通信,C 组件通过 props 和 B 组件通信,此时 C 组件起的就是中间件的作用</p>\n</blockquote>\n</li>\n<li>使用 context<br>下面例子中的组件关系: ListItem 是 List 的子组件,List 是 app 的子组件</li>\n</ul>\n<p>ListItem.js</p>\n<pre><code>  import React, { Component } from &#39;react&#39;;\n  import PropTypes from &#39;prop-types&#39;;\n  class ListItem extends Component {\n  // 子组件声明自己要使用context\n  static contextTypes = {\n        color: PropTypes.string,\n  }\n  static propTypes = {\n        value: PropTypes.string,\n  }\n  render() {\n        const { value } = this.props;\n        return (\n              &lt;li style={{ background: this.context.color }}&gt;\n              &lt;span&gt;{value}&lt;/span&gt;\n              &lt;/li&gt;\n        );\n  }\n  }\n  export default ListItem;</code></pre><p>List.js</p>\n<pre><code>  import ListItem from &#39;./ListItem&#39;;\n  class List extends Component {\n  // 父组件声明自己支持context\n  static childContextTypes = {\n        color: PropTypes.string,\n  }\n  static propTypes = {\n        list: PropTypes.array,\n  }\n  // 提供一个函数,用来返回相应的context对象\n  getChildContext() {\n        return {\n              color: &#39;red&#39;,\n        };\n  }\n  render() {\n        const { list } = this.props;\n        return (\n              &lt;div&gt;\n              &lt;ul&gt;\n                    {\n                          list.map((entry, index) =&gt;\n                          &lt;ListItem key={`list-${index}`} value={entry.text} /&gt;,\n                    )\n                    }\n              &lt;/ul&gt;\n              &lt;/div&gt;\n        );\n  }\n  }\n  export default List;</code></pre><p>App.js</p>\n<pre><code>  import React, { Component } from &#39;react&#39;;\n  import List from &#39;./components/List&#39;;\n  const list = [\n  {\n        text: &#39;题目一&#39;,\n  },\n  {\n        text: &#39;题目二&#39;,\n  },\n  ];\n  export default class App extends Component {\n  render() {\n        return (\n              &lt;div&gt;\n              &lt;List\n                    list={list}\n              /&gt;\n              &lt;/div&gt;\n        );\n  }\n  }</code></pre><h3 id=\"4-没有嵌套关系的组件通信\"><a href=\"#4-没有嵌套关系的组件通信\" class=\"headerlink\" title=\"4. 没有嵌套关系的组件通信\"></a>4. 没有嵌套关系的组件通信</h3><!-- + 使用自定义事件机制\n\n>在componentDidMount事件中,如果组件挂载完成,再订阅事件;在组件卸载的时候,在componentWillUnmount事件中取消事件的订阅;以常用的发布/订阅模式举例,借用Node.js Events模块的浏览器版实现 -->\n\n<ul>\n<li>组件间通信之 onRef 方法</li>\n</ul>\n<blockquote>\n<p>组件间通信除了 props 外还有 onRef 方法，不过 React 官方文档建议不要过度依赖 ref。本文使用 onRef 语境为在表单录入时提取公共组件，在提交时分别获取表单信息。</p>\n</blockquote>\n<p>下面 demo 中点击父组件按钮可以获取子组件全部信息，包括状态和方法，可以看下 demo 中控制台打印。</p>\n<pre><code>  // 父组件\n  class Parent extends React.Component {\n  testRef=(ref)=&gt;{\n  this.child = ref\n  console.log(ref) // -&gt; 获取整个Child元素\n  }\n  handleClick=()=&gt;{\n  alert(this.child.state.info) // -&gt; 通过this.child可以拿到child所有状态和方法\n  }\n  render() {\n  return &lt;div&gt;\n        &lt;Child onRef={this.testRef} /&gt;\n        &lt;button onClick={this.handleClick}&gt;父组件按钮&lt;/button&gt;\n  &lt;/div&gt;\n  }\n  }\n  // 子组件\n  class Child extends React.Component {\n  constructor(props) {\n  super(props)\n  this.state = {\n        info:&#39;快点击子组件按钮哈哈哈&#39;\n  }\n  }\n  componentDidMount(){\n  this.props.onRef(this)\n  console.log(this) // -&gt;将child传递给this.props.onRef()方法\n  }\n  handleChildClick=()=&gt;{\n  this.setState({info:&#39;通过父组件按钮获取到子组件信息啦啦啦&#39;})\n  }\n  render(){\n  return &lt;button onClick={this.handleChildClick}&gt;子组件按钮&lt;/button&gt;\n  }\n  }</code></pre><p><code>原理</code>：当在子组件中调用 onRef 函数时，正在调用从父组件传递的函数。this.props.onRef（this）这里的参数指向子组件本身，父组件接收该引用作为第一个参数：onRef = {ref =&gt;（this.child = ref）}然后它使用 this.child 保存引用。之后，可以在父组件内访问整个子组件实例，并且可以调用子组件函数。</p>\n<h2 id=\"三、路由篇\"><a href=\"#三、路由篇\" class=\"headerlink\" title=\"三、路由篇\"></a>三、路由篇</h2><blockquote>\n<p>使用 React 构建的单页面应用，要想实现页面间的跳转，首先想到的就是使用路由。在 React 中，常用的有两个包可以实现这个需求，那就是 react-router 和 react-router-dom。本文主要针对 react-router-dom 进行说明。</p>\n</blockquote>\n<h3 id=\"1、React-Router-中有三类组件\"><a href=\"#1、React-Router-中有三类组件\" class=\"headerlink\" title=\"1、React Router 中有三类组件:\"></a>1、React Router 中有三类组件:</h3><ul>\n<li>router 组件（BrowserRouter，HashRouter）</li>\n<li>route matching 组件（Route，Switch）</li>\n<li>navigation 组件（Link）</li>\n</ul>\n<blockquote>\n<p>基于 React Router 的 web 应用，根组件应该是一个 router 组件（BrowserRouter，HashRouter）。 项目中，react-router-dom 提供了和两种路由。两种路由都会创建一个 history 对象。如果我们的应用有服务器响应 web 的请求，我们通常使用<browserrouter>组件; 如果使用静态文件服务器，则我们应该使用<hashrouter>组件</hashrouter></browserrouter></p>\n</blockquote>\n<h3 id=\"2、HashRouter-和-BrowserRouter\"><a href=\"#2、HashRouter-和-BrowserRouter\" class=\"headerlink\" title=\"2、HashRouter 和 BrowserRouter\"></a>2、HashRouter 和 BrowserRouter</h3><p>其实就是路由的 hash 和 history 两种模式（要是不了解这两种模式之间的区别那就需要去恶补下啦）</p>\n<p>并且这两个组件是路由的容器，<code>必须在最外层</code>—&gt;内部是 <code>Route</code></p>\n<pre><code>  // hash模式\n  ReactDom.render(\n  &lt;HashRouter&gt;\n        &lt;Route path=&quot;/&quot; component={Home}/&gt;\n  &lt;/HashRouter&gt;\n  )\n  // history模式\n  ReactDom.render(\n  &lt;BrowserRouter&gt;\n        &lt;Route path=&quot;/&quot; component={Home}/&gt;\n  &lt;/BrowserRouter&gt;\n  )</code></pre><p><strong>下面说说 HashRouter 和 BrowserRouter 上的参数</strong></p>\n<ul>\n<li>basename 路由的基础链接，用来部署到非根目录下，比如你需要将项目部署到 <a href=\"http://www.xxxx.com/web\" target=\"_blank\" rel=\"noopener\">www.xxxx.com/web</a> 下，则设置 basename=”/web”</li>\n<li>getUserConfirmation 用来拦截 Prompt 组件，并且决定是否跳转</li>\n<li>forceRefresh 用来设置是否强制浏览器整体刷新，默认值为 false</li>\n<li>keLength 用来设置 location.key 的长度，默认是 6，可以自定义</li>\n</ul>\n<h3 id=\"3、Route\"><a href=\"#3、Route\" class=\"headerlink\" title=\"3、Route\"></a>3、Route</h3><p>Route 是路由的一个原材料，它是控制路径对应显示的组件</p>\n<p>Route 的参数:</p>\n<ul>\n<li>path 跳转的路径</li>\n<li>component 对应路径显示的组件</li>\n<li>render 可以自己写 render 函数返回具体的 dom，而不需要去设置 component</li>\n<li>location 传递 route 对象，和当前的 route 对象对比，如果匹配则跳转</li>\n<li>exact 匹配规则，true 的时候则精确匹配。</li>\n</ul>\n<h3 id=\"4、Router\"><a href=\"#4、Router\" class=\"headerlink\" title=\"4、Router\"></a>4、Router</h3><p>低级路由，适用于任何路由组件，主要和 redux 深度集成，使用必须配合 history 对象</p>\n<p>使用 Router 路由的目的是和状态管理库如 redux 中的 history 同步对接</p>\n<pre><code>  &lt;Router history={history}&gt;\n  ...\n  &lt;/Router&gt;</code></pre><h3 id=\"5、Link-和-NavLink\"><a href=\"#5、Link-和-NavLink\" class=\"headerlink\" title=\"5、Link 和 NavLink\"></a>5、Link 和 NavLink</h3><p>两者都是跳转路由，NavLink 的参数更多些<br><strong>Link 的 api</strong></p>\n<ul>\n<li><p>to 有两种写法，表示跳转到哪个路由</p>\n</li>\n<li><p>字符串写法</p>\n  <link to=\"/a\">\n</li>\n<li><p>对象写法</p>\n<pre><code>&lt;Link to={{\n      pathname: '/courses',\n      search: '?sort=name',\n      hash: '#the-hash',\n      state: { fromDashboard: true }\n      }}/&gt;</code></pre></li>\n<li><p>replace 就是将 push 改成 replace</p>\n</li>\n<li><p>innerRef 访问 Link 标签的 dom</p>\n</li>\n</ul>\n<p><strong>NavLink 的 api</strong></p>\n<ul>\n<li><p>Link 的所有 api</p>\n</li>\n<li><p>activeClassName 路由激活的时候设置的类名</p>\n</li>\n<li><p>activeStyle 路由激活设置的样式</p>\n</li>\n<li><p>exact 参考 Route，符合这个条件才会激活 active 类</p>\n</li>\n<li><p>strict 参考 Route，符合这个条件才会激活 active 类</p>\n</li>\n<li><p>isActive 接收一个回调函数，active 状态变化的时候回触发，返回 false 则中断跳转</p>\n<pre><code>const oddEvent = (match, location) =&gt; {\nconsole.log(match,location)\nif (!match) {\nreturn false\n}\nconsole.log(match.id)\nreturn true\n}\n&lt;NavLink isActive={oddEvent} to=&quot;/a/123&quot;&gt;组件一&lt;/NavLink&gt;</code></pre></li>\n</ul>\n<ul>\n<li><p>location 接收一个 location 对象，当 url 满足这个对象的条件才会跳转</p>\n<pre><code>&lt;NavLink to=&quot;/a/123&quot; location={{ key:\"mb5wu3\", pathname:\"/a/123\" }}/&gt;</code></pre></li>\n</ul>\n<h3 id=\"6、Redirect\"><a href=\"#6、Redirect\" class=\"headerlink\" title=\"6、Redirect\"></a>6、Redirect</h3><p>Redirect 重定向很简单，我们直接看代码即可</p>\n<pre><code>  // 基本的重定向\n  &lt;Redirect to=&quot;/somewhere/else&quot; /&gt;\n  // 对象形式\n  &lt;Redirect\n  to={{\n      pathname: \"/login\",\n      search: \"?utm=your+face\",\n      state: { referrer: currentLocation }\n      }}\n  /&gt;\n  // 采用push生成新的记录\n  &lt;Redirect push to=&quot;/somewhere/else&quot; /&gt;\n  // 配合Switch组件使用，form表示重定向之前的路径，如果匹配则重定向，不匹配则不重定向\n  &lt;Switch&gt;\n  &lt;Redirect from=&#39;/old-path&#39; to=&#39;/new-path&#39;/&gt;\n  &lt;Route path=&#39;/new-path&#39; component={Place}/&gt;\n  &lt;/Switch&gt;</code></pre><h3 id=\"7、Switch\"><a href=\"#7、Switch\" class=\"headerlink\" title=\"7、Switch\"></a>7、Switch</h3><p>路由切换，只会匹配第一个路由，可以想象成 tab 栏</p>\n<p>Switch 内部只能包含 Route、Redirect、Router</p>\n<pre><code>  &lt;Switch&gt;\n  &lt;Route exact path=&quot;/&quot; component={Home}/&gt;\n  &lt;Route path=&quot;/about&quot; component={About}/&gt;\n  &lt;Route path=&quot;/:user&quot; component={User}/&gt;\n  &lt;Route component={NoMatch}/&gt;\n  &lt;/Switch&gt;</code></pre><h3 id=\"8、withRouter\"><a href=\"#8、withRouter\" class=\"headerlink\" title=\"8、withRouter\"></a>8、withRouter</h3><p>当一个非路由组件也想访问到当前路由的 match,location,history 对象，那么 withRouter 将是一个非常好的选择，可以理解为将一个组件包裹成路由组件</p>\n<pre><code>  import { withRouter } from &#39;react-router-dom&#39;\n  const MyComponent = (props) =&gt; {\n  const { match, location, history } = this.props\n  return (\n        &lt;div&gt;{props.location.pathname}&lt;/div&gt;\n  )\n  }\n  const FirstTest = withRouter(MyComponent);</code></pre><h3 id=\"9、history-对象\"><a href=\"#9、history-对象\" class=\"headerlink\" title=\"9、history 对象\"></a>9、history 对象</h3><p>用过 vue 的都知道，vue-router 有组件形式的导航，也有编程式导航，那 react-router 怎么使用 api 来控制前进后退和刷新呢？这就需要我们来说明下<code>history</code>对象的作用了其实在每个路由组件中我们可以使用<code>this.props.history</code>获取到<code>history</code>对象，也可以使用 withRouter 包裹组件获取，在 history 中封装了 push，replace，go 等方法，具体内容如下</p>\n<pre><code>  History {\n  length: number;\n  action: Action;\n  location: Location;\n  push(path: Path, state?: LocationState): void; // 调用push前进到一个地址,可以接受一个state对象，就是自定义的路由数据\n  push(location: LocationDescriptorObject): void; // 接受一个location的描述对象\n  replace(path: Path, state?: LocationState): void; // 用页面替换当前的路径，不可再goBack\n  replace(location: LocationDescriptorObject): void; // 同上\n  go(n: number): void; // 往前走多少也页面\n  goBack(): void; // 返回一个页面\n  goForward(): void; // 前进一个页面\n  block(prompt?: boolean | string | TransitionPromptHook): UnregisterCallback;\n  listen(listener: LocationListener): UnregisterCallback;\n  createHref(location: LocationDescriptorObject): Href;\n  }</code></pre><p>这样我们想使用 api 来操作前进后退就可以调用 history 中的方法啦</p>\n<p>其次也可通过暗转 history 库来实现，具体案例如下</p>\n<pre><code>  import { BrowserRouter } from &#39;react-router-dom&#39;;\n  const history = require(&#39;history&#39;).createBrowserHistory();\n  /**\n  * forceRefresh: bool\n  * 作用：当浏览器不支持 HTML5 的 history API 时强制刷新页面。\n  */\n  const supportsHistory = &#39;pushState&#39; in window.history;\n  &lt;BrowserRouter\n        history={history}\n        basename=&quot;/&quot;\n        forceRefresh={!supportsHistory}\n        &gt;\n        {/* 路由入口 */}\n        ......\n  &lt;/BrowserRouter&gt;</code></pre><h3 id=\"10、-React-router-页面跳转的三种方式\"><a href=\"#10、-React-router-页面跳转的三种方式\" class=\"headerlink\" title=\"10、 React-router 页面跳转的三种方式\"></a>10、 React-router 页面跳转的三种方式</h3><p><a href=\"https://blog.csdn.net/Vue2018/article/details/100564775\" target=\"_blank\" rel=\"noopener\">React-router 页面跳转的三种方式</a>:<a href=\"https://blog.csdn.net/Vue2018/article/details/100564775\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Vue2018/article/details/100564775</a></p>\n<h2 id=\"四、性能篇\"><a href=\"#四、性能篇\" class=\"headerlink\" title=\"四、性能篇\"></a>四、性能篇</h2><h3 id=\"1、react-组件的性能优化（渲染角度优化）\"><a href=\"#1、react-组件的性能优化（渲染角度优化）\" class=\"headerlink\" title=\"1、react 组件的性能优化（渲染角度优化）\"></a>1、react 组件的性能优化（渲染角度优化）</h3><h4 id=\"1、react-性能查看工具\"><a href=\"#1、react-性能查看工具\" class=\"headerlink\" title=\"1、react 性能查看工具\"></a>1、react 性能查看工具</h4><blockquote>\n<p>再讲性能优化之前，我们需要先来了解一下如何查看 react 加载组件时所耗费的时间的工具，在 react 16 版本之前我们可以使用 React Perf 来查看。react16 版本之前，我们可以使用 react-addons-perf 工具来查看，而在最新的 16 版本，我们只需要在 url 后加上?react_pref。</p>\n</blockquote>\n<p>首先来了解一下<a href=\"https://reactjs.org/docs/perf.html\" target=\"_blank\" rel=\"noopener\">react-addons-perf</a></p>\n<p><code>react-addons-perf</code>这是 <code>React</code> 官方推出的一个性能工具包，可以打印出组件渲染的时间、次数、浪费时间等。</p>\n<p>简单说几个 api，具体用法可参考<a href=\"https://reactjs.org/docs/perf.html\" target=\"_blank\" rel=\"noopener\">官网</a>：</p>\n<ul>\n<li>Perf.start() 开始记录</li>\n<li>Perf.stop() 结束记录</li>\n<li>Perf.printInclusive() 查看所有设计到的组件 render</li>\n<li>Perf.printWasted() 查看不需要的浪费组件 render</li>\n</ul>\n<p>大家可以在 chorme 中先安装 React Perf 扩展，然后在入口文件或者 redux 的 store.js 中加入相应的代码即可：<br><img src=\"2.jpg\" alt></p>\n<p>再来了解一下，在最新的 React16 版本中，在<code>url</code>后加上<code>?react_pref</code>，就可以在 chrome 浏览器的<code>performance</code>，我们可以查看<code>User Timeing</code>来查看组件的加载时间。点击 record 开始记录，注意记录时长不要超过 20s，否则可能导致 chrome 挂起。</p>\n<p><img src=\"3.jpg\" alt><br>大图<br><img src=\"4.jpg\" alt></p>\n<h4 id=\"2、单个-react-组件性能优化\"><a href=\"#2、单个-react-组件性能优化\" class=\"headerlink\" title=\"2、单个 react 组件性能优化\"></a>2、单个 react 组件性能优化</h4><ul>\n<li>1、render 里面尽量减少新建变量和 bind 函数，传递参数是尽量减少传递参数的数量。</li>\n</ul>\n<blockquote>\n<p>首先我们先思考一个问题，比如我要实现一个点击按钮使相应的 num 增加 1，我们有哪一些方法。<br>大家应该都能想到，无非就是三种，如下图：</p>\n</blockquote>\n<p><img src=\"5.jpg\" alt></p>\n<ul>\n<li><p>第一种是在<code>构造函数</code>中绑定 this，</p>\n</li>\n<li><p>第二种是在 render()函数里面绑定 this，</p>\n</li>\n<li><p>第三种就是使用箭头函数，都能实现上述方法；<br>但是哪一种方法的性能最好，是我们要考虑的问题。应该大家都知道答案：<br><code>第一种的性能最好</code>。因为第一种，构造函数每一次渲染的时候<code>只会执行一遍</code>；<br>而第二种方法，在每次 render()的时候都会重新执行一遍函数；<br>第三种方法的话，每一次 render()的时候，都会生成一个新的箭头函数，即使两个箭头函数的内容是一样的。</p>\n</li>\n<li><p>2、定制 shouldComponentUpdate 函数</p>\n</li>\n</ul>\n<blockquote>\n<p>shouldComponentUpdate 是决定 react 组件什么时候能够不重新渲染的函数，但是这个函数默认的实现方式就是简单的返回一个 true。也就是说，默认每次更新的时候都要调用所用的生命周期函数，包括 render 函数，重新渲染。<br>我们来看一下下面的一个例子</p>\n</blockquote>\n<p><img src=\"6.jpg\" alt></p>\n<p>我们写两个组件，App 和 Demo 组件，并写两个方法，一个改变 App 中的 num 的值，一个是改变 title，我们在 Demo 的 render 中打印 render 函数。我们可以看到以下的效果：</p>\n<p><img src=\"7.jpg\" alt></p>\n<p>我们可以清晰的看到虽然 demo 组件里的 title 值没有改变，但是还是 render 了。</p>\n<p>为了解决这个问题，我们可以对 demo 组件进行如下的修改：</p>\n<p><img src=\"8.jpg\" alt></p>\n<p>只有当 demo 的 title 值发生改变的时候，我们才去 render，我们可以看一下效果：</p>\n<p><img src=\"9.jpg\" alt></p>\n<p>以上只是一个特别简单的一个对于 shouldComponentUpdate 的定制。在最新的 react 中，react 给我们提供了 React.PureComponent，官方也在早期提供了名为 react-addons-pure-render-mixin 插件来重新实现 shouldComponentUpdate 生命周期方法。<br><img src=\"10.jpg\" alt></p>\n<p>通过上述的方法的效果也是和我们定制 shouldComponentUpdate 的效果是一致的。但是我们要注意的是，这里的 PureRender 是浅比较的，因为深比较的场景是相当昂贵的。所以我们要注意我们在 1.1 中说到的一些注意点：不要直接为 props 设置对象或者数组、不要将方法直接绑定在元素上，因为其实函数也是对象</p>\n<h3 id=\"2、redux-性能优化：reselect（数据获取时优化-待研究）\"><a href=\"#2、redux-性能优化：reselect（数据获取时优化-待研究）\" class=\"headerlink\" title=\"2、redux 性能优化：reselect（数据获取时优化 待研究）\"></a>2、redux 性能优化：reselect（数据获取时优化 待研究）</h3><p><a href=\"https://www.jianshu.com/p/1fcef4c892ba?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation\" target=\"_blank\" rel=\"noopener\">react-redux 性能优化之 reselect</a></p>\n<h3 id=\"3-1、分隔代码\"><a href=\"#3-1、分隔代码\" class=\"headerlink\" title=\"3-1、分隔代码\"></a>3-1、分隔代码</h3><h4 id=\"1、动态加载\"><a href=\"#1、动态加载\" class=\"headerlink\" title=\"1、动态加载\"></a>1、动态加载</h4><p>ES6 标准引入了 import 以方便我们静态加载模块。形式如：</p>\n<pre><code>  import xxx from xxx.</code></pre><p>尽管 import 对于我们加载模块很有帮助，但是静态加载模块的方式一定程度上限制了我们来实现异步模块加载。不过，目前动态加载模块的 import()语法已处于提案阶段，并且 webpack 已将他引入并使用。import()提供了基于 Promise 的 API，因此，import()的返回值是一个完成状态或拒绝状态的 Promise 对象。形式如：</p>\n<pre><code>  import(/* webpackChunkName: &#39;module&#39;*/ &quot;module&quot;)\n  .then(() =&gt; {\n        //todo\n  })\n  .catch(_ =&gt; console.log(&#39;It is an error&#39;))</code></pre><p>webpack 在编译时，识别到动态加载的 import 语法，则 webpack 会为当前动态加载的模块创建一个单独的 bundle。如果你使用的是官方的 Create-react-app 脚手架或 React 的服务端渲染框架 Next.js，那么可以直接使用动态 import 语法。如果你的脚手架是你自己配置的 webpack，那么你需要按照官方指南来设置，请移步[1]。</p>\n<h4 id=\"2、动态加载-React-组件\"><a href=\"#2、动态加载-React-组件\" class=\"headerlink\" title=\"2、动态加载 React 组件\"></a>2、动态加载 React 组件</h4><p>当前最为流行的一种方法是使用 React-loadable [2]库提供的懒加载 React 组件。它利用 import()语法，使用 Promise 语法加载 React 组件。同时，React-loadable 支持 React 的服务端渲染。 通常，我们以如下方式实现组件：</p>\n<pre><code>  import LazyComponet from &#39;LazyComponent&#39;;\n  export default function DemoComponent() {\n  return (\n        &lt;div&gt;\n              &lt;p&gt;demo component&lt;/p&gt;\n              &lt;AComponent /&gt;\n        &lt;/div&gt;\n  )\n  }</code></pre><p>在上面的例子中，假设 LazyComponet 在 DemoComponent 渲染时我们并不展示。但是因为我们使用 import 语法将 LazyComponet 导入，所以在编译时会将 LazyComponet 的代码与 DemoComponent 的代码打包到同一个 bundle 里面。 但是，这并不是我们想要的。所以我们可以通过使用 React-loadable 来懒加载 LazyComponet ，同时将 LazyComponet 的代码单独打包到一个 bundle 里面。我们可以看一下官网提供的例子：</p>\n<pre><code>  import Loadable from &#39;react-loadable&#39;;\n  import Loading from &#39;./my-loading-component&#39;;\n  const LoadableComponent = Loadable({\n  loader: () =&gt; import(&#39;./my-component&#39;),\n  loading: Loading,\n  });\n  export default class App extends React.Component {\n  render() {\n  return &lt;LoadableComponent/&gt;;\n  }\n  }</code></pre><p>从例子中我们可以看到，react-loadable 使用动态 import()方法，并将导入的组件分配给 loader 属性。同时，react-loadable 提供了一个 loading 属性，以设置在加载组件时将展示的组件。</p>\n<h4 id=\"3、高阶组件（HOC）\"><a href=\"#3、高阶组件（HOC）\" class=\"headerlink\" title=\"3、高阶组件（HOC）\"></a>3、高阶组件（HOC）</h4><p>高阶函数，可以传入函数作为参数的函数，如 map,sort,reduce。高阶组件包装了另一个组件的组件。</p>\n<p>属性代理 （Props Proxy）<br>反向继承 （Inheritance Inversion）</p>\n<h4 id=\"4、无状态组件\"><a href=\"#4、无状态组件\" class=\"headerlink\" title=\"4、无状态组件\"></a>4、无状态组件</h4><p>使用无状态组件，只从父组件接收 props，可以提高组件的渲染性能</p>\n<pre><code>  const HelloWorld = (props) =&gt; &lt;div&gt;{props.name}&lt;/div&gt;ReactDOM.render(&lt;HelloWorld name=&quot;HelloWorld&quot; /&gt;,App)</code></pre><h4 id=\"5、componentWillReceiveProps-中取-props-的值\"><a href=\"#5、componentWillReceiveProps-中取-props-的值\" class=\"headerlink\" title=\"5、componentWillReceiveProps 中取 props 的值\"></a>5、componentWillReceiveProps 中取 props 的值</h4><p>注意应该取 nextProps,而不是 this.props</p>\n<h4 id=\"6、bind-绑定函数\"><a href=\"#6、bind-绑定函数\" class=\"headerlink\" title=\"6、bind 绑定函数\"></a>6、bind 绑定函数</h4><p>利用 bind 绑定函数，是默认有 event 这个参数的，只是这个参数在给定参数之后</p>\n<pre><code>  handleClockClick (id, e) {\n        console.log(id,e)\n        }\n  &lt;button onClick={this.handleClockClick.bind(this, 2)}&gt;Clock&lt;/button&gt;</code></pre><h4 id=\"7、ES6-类中，函数-this-不默认指向-对象\"><a href=\"#7、ES6-类中，函数-this-不默认指向-对象\" class=\"headerlink\" title=\"7、ES6 类中，函数 this 不默认指向 对象\"></a>7、ES6 类中，函数 this 不默认指向 对象</h4><ul>\n<li><p>this.getDomNode 已经在低版本被移除了，现在设置 ref=xxx，然后使用 this.refs.xxx 访问 DOM 元素</p>\n</li>\n<li><p><code>ref</code> 可以赋值两种类型，一种是字符串，一种是函数, 字符串只能用在类组件，DOM 元素使用函数，纯函数组件不能使用 ref。旧版本 DOM 元素虽然可以使用 ref，但是 React 已不推荐。</p>\n<pre><code>ref=&quot;test&quot; // this.refs.test 访问ref={test =&gt; this.test = test} // this.test 访问</code></pre></li>\n</ul>\n<h4 id=\"8、当只写属性名时，默认值为-true\"><a href=\"#8、当只写属性名时，默认值为-true\" class=\"headerlink\" title=\"8、当只写属性名时，默认值为 true\"></a>8、当只写属性名时，默认值为 true</h4><pre><code>  &lt;MyComponent isStock/&gt;// isStock 默认为 true</code></pre><h4 id=\"9、在-IE11-以下使用-React16\"><a href=\"#9、在-IE11-以下使用-React16\" class=\"headerlink\" title=\"9、在 IE11 以下使用 React16\"></a>9、在 IE11 以下使用 React16</h4><p>React16 依赖集合类型 Map 和 Set，在未提供原生支持的浏览器，需要使用一个 polyfill,例如 core-js 和 babel-polyfill<br>使用 core-js 支持</p>\n<pre><code>  import &#39;core-js/es6/map&#39;;import &#39;core-js/es6/set&#39;;\n  import React from &#39;react&#39;;\n  import ReactDOM from &#39;react-dom&#39;;\n  ReactDOM.render(&lt;h1&gt;Hello, world!&lt;/h1&gt;,document.getElementById(&#39;root&#39;));</code></pre><h3 id=\"3-2、分隔代码\"><a href=\"#3-2、分隔代码\" class=\"headerlink\" title=\"3-2、分隔代码\"></a>3-2、分隔代码</h3><h4 id=\"1、componentDidMount-请求服务器数据\"><a href=\"#1、componentDidMount-请求服务器数据\" class=\"headerlink\" title=\"1、componentDidMount 请求服务器数据\"></a>1、componentDidMount 请求服务器数据</h4><p>在 componentDidMount 请求服务器数据并利用 setState 时应注意，在组件卸载 componentWillUnmount 应该把去求去掉</p>\n<h4 id=\"2、利用-es6-rest-参数（形式为…变量名）传递可变数量的-props\"><a href=\"#2、利用-es6-rest-参数（形式为…变量名）传递可变数量的-props\" class=\"headerlink\" title=\"2、利用 es6 rest 参数（形式为…变量名）传递可变数量的 props\"></a>2、利用 es6 rest 参数（形式为…变量名）传递可变数量的 props</h4><pre><code>  // 定义子组件\n  const Demo = ({ prop1, prop2, ...restProps }) =&gt; (\n  &lt;div&gt;{ restProps.text}&lt;/div&gt;\n  )\n  // 父组件使用Demo\n  &lt;Demo prop1={xxx} prop2={xxx} text={xxx}/&gt;</code></pre><h4 id=\"3、setState-的其他用法\"><a href=\"#3、setState-的其他用法\" class=\"headerlink\" title=\"3、setState 的其他用法\"></a>3、setState 的其他用法</h4><pre><code>  // 一般改变state值的一种方式\n  const { data } = this.state;\n  this.setState({ data: {...data, key: 1 } });\n  // 另外一种可以通过callback的方式改变state的值\n  this.setState(({ data }) =&gt; ({ data: {...data, key: 1 } }));\n  // 还可以\n  this.setState((state, props) =&gt; {\n  return { counter: state.counter + props.step };\n  });</code></pre><h4 id=\"4、React-性能优化\"><a href=\"#4、React-性能优化\" class=\"headerlink\" title=\"4、React 性能优化\"></a>4、React 性能优化</h4><p>// React 性能优化有很多种方式，<br>// 那常见的一种就是在生命周期函数 shouldComponentUpdate 里面判断<br>// 某些值或属性来控制组件是否重新再次渲染。<br>// 判断一般的字符串，数字或者基础的对象，数组都还是比较好处理<br>// 那嵌套的对象或者数组就比较麻烦了，对于这种<br>// 推荐使用 lodash(或者其他的类似库)的 isEqual 对嵌套数组或对象进行判断<br>shouldComponentUpdate(nextProps, nextState) {<br>if (_.isEqual(nextState.columns, this.state.columns)) return false;<br>return true;<br>}</p>\n<h4 id=\"5、React-进阶提高-技巧篇（28-个视频）链接\"><a href=\"#5、React-进阶提高-技巧篇（28-个视频）链接\" class=\"headerlink\" title=\"5、React 进阶提高 - 技巧篇（28 个视频）链接\"></a>5、React 进阶提高 - 技巧篇（28 个视频）链接</h4><p>介绍 React 的一些进阶知识点，一些开发上的实践技巧，一些工具库等。</p>\n<p><a href=\"www.qiuzhi99.com/\">视频更新地址：</a><a href=\"http://www.qiuzhi99.com/\" target=\"_blank\" rel=\"noopener\">www.qiuzhi99.com/</a></p>\n<h2 id=\"五、学习资料\"><a href=\"#五、学习资料\" class=\"headerlink\" title=\"五、学习资料\"></a>五、学习资料</h2><p><a href=\"doc.react-china.org\">翻译后的官方文档，学技术一定要多看几遍文档</a>: doc.react-china.org<br><a href=\"https://www.reactjscn.com/\" target=\"_blank\" rel=\"noopener\">react官网</a>:<a href=\"https://www.reactjscn.com/\" target=\"_blank\" rel=\"noopener\">https://www.reactjscn.com/</a></p>\n"},{"title":"一名【合格】前端工程师的自检清单","date":"2018-01-22T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 开篇\n---\n前端开发是一个非常特殊的行业，它的历史实际上不是很长，但是知识之繁杂，技术迭代速度之快是其他技术所不能比拟的。\n\n\n**winter**在他的《重学前端》课程中提到：\n<!-- ![](749826.jpg) -->\n<!-- 最后引用《我的少女时代》里的一句话吧。 -->\n> 到现在为止，前端工程师已经成为研发体系中的重要岗位之一。可是，与此相对的是，我发现极少或者几乎没有大学的计算机专业愿意开设前端课程，更没有系统性的教学方案出现。大部分前端工程师的知识，其实都是来自于实践和工作中零散的学习。\n\n这样是一个非常真实的现状，实际上很多前端开发者都是自学甚至转行过来的，前端入门简单，学习了几个API以后上手做项目也很简单，但是这往往成为了限制自身发展的瓶颈。\n只是停留在会用阶段是远远不够的，我们还需要不断探索和深入。现在市面上并不缺少学习教程，技术文章，如果盲目的学习你会发现看过以后的知识留存率会很低，而且发现没有了解到的知识越来越多，这会让人产生焦虑。\n实际上，除了坚持学习的强大的自驱力，你还需要一个很简单的学习方法。那就是：建立自己的知识体系。它能帮助你更系统性的学习，同时你也时刻能知道自己哪些地方是不足的。\n我会把我工作和学习中接触到的知识全部归纳到我的知识体系中，其中不仅仅包括我已经学过的，还有很多我没有来得及学习的。\n\n下面我会把我的自检清单分享给大家，你可以按照清单上的知识检测自己还有哪些不足和提升，我也建议大家建自己的知识体系，这样工作或者学习甚至面试时，你能快速定位到知识清单中的点，如果你有哪些我没归纳到的点，欢迎在评论区告诉我。\n\n![](01.jpg) \n\n# 一、JavaScript基础\n\n>前端工程师吃饭的家伙，深度、广度一样都不能差。\n\n**变量和类型** \n· 1.JavaScript规定了几种语言类型\n\n\n· 2.JavaScript对象的底层数据结构是什么\n\n\n· 3.Symbol类型在实际开发中的应用、可手动实现一个简单的Symbol\n\n\n· 4.JavaScript中的变量在内存中的具体存储形式\n\n\n· 5.基本类型对应的内置对象，以及他们之间的装箱拆箱操作\n\n\n· 6.理解值类型和引用类型\n\n\n· 7.null和undefined的区别\n\n\n. 8至少可以说出三种判断JavaScript数据类型的方式，以及他们的优缺点，如何准确的判断数组类型\n\n\n\n\n\n\n\n","source":"_posts/Self checking.md","raw":"---\ntitle: 一名【合格】前端工程师的自检清单\ndate: 2018-01-22 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n- 随笔\ncategories:\n- 随笔\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 开篇\n---\n前端开发是一个非常特殊的行业，它的历史实际上不是很长，但是知识之繁杂，技术迭代速度之快是其他技术所不能比拟的。\n\n\n**winter**在他的《重学前端》课程中提到：\n<!-- ![](749826.jpg) -->\n<!-- 最后引用《我的少女时代》里的一句话吧。 -->\n> 到现在为止，前端工程师已经成为研发体系中的重要岗位之一。可是，与此相对的是，我发现极少或者几乎没有大学的计算机专业愿意开设前端课程，更没有系统性的教学方案出现。大部分前端工程师的知识，其实都是来自于实践和工作中零散的学习。\n\n这样是一个非常真实的现状，实际上很多前端开发者都是自学甚至转行过来的，前端入门简单，学习了几个API以后上手做项目也很简单，但是这往往成为了限制自身发展的瓶颈。\n只是停留在会用阶段是远远不够的，我们还需要不断探索和深入。现在市面上并不缺少学习教程，技术文章，如果盲目的学习你会发现看过以后的知识留存率会很低，而且发现没有了解到的知识越来越多，这会让人产生焦虑。\n实际上，除了坚持学习的强大的自驱力，你还需要一个很简单的学习方法。那就是：建立自己的知识体系。它能帮助你更系统性的学习，同时你也时刻能知道自己哪些地方是不足的。\n我会把我工作和学习中接触到的知识全部归纳到我的知识体系中，其中不仅仅包括我已经学过的，还有很多我没有来得及学习的。\n\n下面我会把我的自检清单分享给大家，你可以按照清单上的知识检测自己还有哪些不足和提升，我也建议大家建自己的知识体系，这样工作或者学习甚至面试时，你能快速定位到知识清单中的点，如果你有哪些我没归纳到的点，欢迎在评论区告诉我。\n\n![](01.jpg) \n\n# 一、JavaScript基础\n\n>前端工程师吃饭的家伙，深度、广度一样都不能差。\n\n**变量和类型** \n· 1.JavaScript规定了几种语言类型\n\n\n· 2.JavaScript对象的底层数据结构是什么\n\n\n· 3.Symbol类型在实际开发中的应用、可手动实现一个简单的Symbol\n\n\n· 4.JavaScript中的变量在内存中的具体存储形式\n\n\n· 5.基本类型对应的内置对象，以及他们之间的装箱拆箱操作\n\n\n· 6.理解值类型和引用类型\n\n\n· 7.null和undefined的区别\n\n\n. 8至少可以说出三种判断JavaScript数据类型的方式，以及他们的优缺点，如何准确的判断数组类型\n\n\n\n\n\n\n\n","slug":"Self checking","published":1,"updated":"2020-05-28T07:51:13.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckari24xr000o5sjomkks5288","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h1><hr>\n<p>前端开发是一个非常特殊的行业，它的历史实际上不是很长，但是知识之繁杂，技术迭代速度之快是其他技术所不能比拟的。</p>\n<p><strong>winter</strong>在他的《重学前端》课程中提到：</p>\n<!-- ![](749826.jpg) -->\n<!-- 最后引用《我的少女时代》里的一句话吧。 -->\n<blockquote>\n<p>到现在为止，前端工程师已经成为研发体系中的重要岗位之一。可是，与此相对的是，我发现极少或者几乎没有大学的计算机专业愿意开设前端课程，更没有系统性的教学方案出现。大部分前端工程师的知识，其实都是来自于实践和工作中零散的学习。</p>\n</blockquote>\n<p>这样是一个非常真实的现状，实际上很多前端开发者都是自学甚至转行过来的，前端入门简单，学习了几个API以后上手做项目也很简单，但是这往往成为了限制自身发展的瓶颈。<br>只是停留在会用阶段是远远不够的，我们还需要不断探索和深入。现在市面上并不缺少学习教程，技术文章，如果盲目的学习你会发现看过以后的知识留存率会很低，而且发现没有了解到的知识越来越多，这会让人产生焦虑。<br>实际上，除了坚持学习的强大的自驱力，你还需要一个很简单的学习方法。那就是：建立自己的知识体系。它能帮助你更系统性的学习，同时你也时刻能知道自己哪些地方是不足的。<br>我会把我工作和学习中接触到的知识全部归纳到我的知识体系中，其中不仅仅包括我已经学过的，还有很多我没有来得及学习的。</p>\n<p>下面我会把我的自检清单分享给大家，你可以按照清单上的知识检测自己还有哪些不足和提升，我也建议大家建自己的知识体系，这样工作或者学习甚至面试时，你能快速定位到知识清单中的点，如果你有哪些我没归纳到的点，欢迎在评论区告诉我。</p>\n<p><img src=\"01.jpg\" alt> </p>\n<h1 id=\"一、JavaScript基础\"><a href=\"#一、JavaScript基础\" class=\"headerlink\" title=\"一、JavaScript基础\"></a>一、JavaScript基础</h1><blockquote>\n<p>前端工程师吃饭的家伙，深度、广度一样都不能差。</p>\n</blockquote>\n<p><strong>变量和类型</strong><br>· 1.JavaScript规定了几种语言类型</p>\n<p>· 2.JavaScript对象的底层数据结构是什么</p>\n<p>· 3.Symbol类型在实际开发中的应用、可手动实现一个简单的Symbol</p>\n<p>· 4.JavaScript中的变量在内存中的具体存储形式</p>\n<p>· 5.基本类型对应的内置对象，以及他们之间的装箱拆箱操作</p>\n<p>· 6.理解值类型和引用类型</p>\n<p>· 7.null和undefined的区别</p>\n<p>. 8至少可以说出三种判断JavaScript数据类型的方式，以及他们的优缺点，如何准确的判断数组类型</p>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h1><hr>\n<p>前端开发是一个非常特殊的行业，它的历史实际上不是很长，但是知识之繁杂，技术迭代速度之快是其他技术所不能比拟的。</p>\n<p><strong>winter</strong>在他的《重学前端》课程中提到：</p>\n<!-- ![](749826.jpg) -->\n<!-- 最后引用《我的少女时代》里的一句话吧。 -->\n<blockquote>\n<p>到现在为止，前端工程师已经成为研发体系中的重要岗位之一。可是，与此相对的是，我发现极少或者几乎没有大学的计算机专业愿意开设前端课程，更没有系统性的教学方案出现。大部分前端工程师的知识，其实都是来自于实践和工作中零散的学习。</p>\n</blockquote>\n<p>这样是一个非常真实的现状，实际上很多前端开发者都是自学甚至转行过来的，前端入门简单，学习了几个API以后上手做项目也很简单，但是这往往成为了限制自身发展的瓶颈。<br>只是停留在会用阶段是远远不够的，我们还需要不断探索和深入。现在市面上并不缺少学习教程，技术文章，如果盲目的学习你会发现看过以后的知识留存率会很低，而且发现没有了解到的知识越来越多，这会让人产生焦虑。<br>实际上，除了坚持学习的强大的自驱力，你还需要一个很简单的学习方法。那就是：建立自己的知识体系。它能帮助你更系统性的学习，同时你也时刻能知道自己哪些地方是不足的。<br>我会把我工作和学习中接触到的知识全部归纳到我的知识体系中，其中不仅仅包括我已经学过的，还有很多我没有来得及学习的。</p>\n<p>下面我会把我的自检清单分享给大家，你可以按照清单上的知识检测自己还有哪些不足和提升，我也建议大家建自己的知识体系，这样工作或者学习甚至面试时，你能快速定位到知识清单中的点，如果你有哪些我没归纳到的点，欢迎在评论区告诉我。</p>\n<p><img src=\"01.jpg\" alt> </p>\n<h1 id=\"一、JavaScript基础\"><a href=\"#一、JavaScript基础\" class=\"headerlink\" title=\"一、JavaScript基础\"></a>一、JavaScript基础</h1><blockquote>\n<p>前端工程师吃饭的家伙，深度、广度一样都不能差。</p>\n</blockquote>\n<p><strong>变量和类型</strong><br>· 1.JavaScript规定了几种语言类型</p>\n<p>· 2.JavaScript对象的底层数据结构是什么</p>\n<p>· 3.Symbol类型在实际开发中的应用、可手动实现一个简单的Symbol</p>\n<p>· 4.JavaScript中的变量在内存中的具体存储形式</p>\n<p>· 5.基本类型对应的内置对象，以及他们之间的装箱拆箱操作</p>\n<p>· 6.理解值类型和引用类型</p>\n<p>· 7.null和undefined的区别</p>\n<p>. 8至少可以说出三种判断JavaScript数据类型的方式，以及他们的优缺点，如何准确的判断数组类型</p>\n"},{"title":"TS+VUE项目搭建","date":"2019-10-16T07:00:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=574919767&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# TS+VUE项目搭建\n\n---\n自尤大推出vue对typescript的支持后，一直想开箱尝试，对于前端sr来说，vue的顺滑加上ts的面向对象，想着就非常美好~ 终于在两个月前，找到了个机会尝试了一把vue+ts的组合。 开文记录下vue和ts整合之旅和遇到的一些坑。\n## Vue \n应该大部分人都知道vue，毕竟如今vue是与react肩并肩的存在，所以就不过多介绍啦。\n\n[vue中文官网](https://cn.vuejs.org/index.html) 官网上的教程就是最好的入门教程\n\n## TypeScript\n我在前几篇文章就一直有在宣传typescript，简单列举下ts的优点\n\n1. 始于JavaScript，归于JavaScript,typescript是JavaScript的超集，所以它可以重用JavaScriptd代码,使用JavaScript的库\n\n2. JavaScript用的优点它都有，跨浏览器、跨操作系统等\n\n3. 面向对象的编程思想,强大的类型检查\n\n开源大法好\n\n要说缺点的话，那就是不太适合太小的项目。\n就凭这些优点，足够我们愉快的玩耍~\n\n## TS安装\n 先将node安装，然后在通过npm安装ts的包\n\n      npm install -g typescript\n\n      tsc -v //查看ts的版本号\n## 创建项目\n### 执行安装命令\n\n    npm install -g @vue/cli\n\n 安装完成后，可以通过 vue create 快速创建一个新项目的脚手架，或者直接通过 vue serve 构建新想法的原型。\n\n### 创建项目\n    vue create vue-ts  //vue-ts 是我们的项目名称，执行后如下\n    ![](1.jpg)\n\n可看到有这么几个选项，xiaoli这个选项是我之前创建的，稍后会介绍；default这个后面写着 babel eslint ，表示若选择这个，那么只会引入babel和 ealint；manually select features顾名思义，选择我们想要的。那么我们选择第三个\n\n![](2.jpg)\n\n可看到列表里有很多选项，这里是多项选择，按`上/下键`切换选项，`空格键`选择该选项，`enter`键进入下一步。你可以根据项目的实际情况，选择相应的选项。我们以vue+ts为主，所以我们选择 babel typescript router vuex 这几个，选择完后，如下\n\n\n![](3.jpg)\n\n接下来会有好几个yes or no 的选项，大家根据自己项目的需要来选择就可以，最后一步，`Save this as a preset for future projects?` 若选择yes，就会将我们之前的选择存储起来，作为一个预设选项，方便后续一键创建新项目。所有步骤选完，回车，便开始创建项目文件结构和拉取npm包\n\n## 项目结构\n **项目结构如下**\n\n![](4.jpg)\n\n**public:** 用于存放静态文件，`index.html`入口文件就放在里面，这个文件夹下的文件不会纳入webpack的打包中；\n**src：**存放vue项目工程文件，其中已经帮我们关联好router和vuex，文件结构非常简洁\n其他：webpack、babel等配置文件\n\n## 与TypeScript复用\n\n项目在构建中，已经引入 `vue-class-component` ，用于对ts的支持，或者使用 `vue-property-decorator`,这个库是在之前那个的基础上扩展。\n\n以下列举tsvue写法的各种变化\n\n### 组件声明 \n     import { Component, Prop, Vue, Watch } from 'vue-property-decorator';\n\n      @Component\n      export default class Test extends Vue {\n\n      }\n\n### data对象\n\n通过构造函数创建data里的数据\n\n      import { Component, Prop, Vue, Watch } from 'vue-property-decorator';\n\n      @Component\n      export default class Test extends Vue {\n          private name: string;\n          constructor() {\n              super();\n              this.name = 'xiaoli';\n          }\n      }\n**data里的数据使用方式如下**\n      public getName(){\n          return this.name\n      }    \n\n### Prop声明\n\n      @Prop() public msg: string;\n      @Prop({ default: 'default value' }) propB: string\n      @Prop([String, Boolean]) propC: string | boolean\n\n### 生命周期函数使用\n      public created(): void {\n          console.log('created');\n      }\n\n      public mounted():void{\n          console.log('mounted')\n      }\n\n### 自定义方法\njs下是需要在method对象中声明方法，现变成如下\n\n      public clickFunc(): void {\n          console.log(this.name)\n          console.log(this.msg)\n      }\n\n### Watch监听属性 \n\n      @Watch('name',{ immediate: true, deep: true })\n      public onChildChanged(val: string, oldVal: string) {\n          console.log('watch new name=' + val);\n      }\n\n### computed计算属性\n\n      public get allname() {\n          return 'computed ' + this.name;\n      } \n\nallname是计算后的值，name是被监听的值\n\n### emit事件\n      @Emit()\n        addToCount(n: number) {\n          this.count += n\n        }\n\n        @Emit('reset')\n        resetCount() {\n          this.count = 0\n        }\n\n第一个的事件名称为 add-to-count,n为传过去的参数；第二个事件名为reset-count,参数为空\n\n### 指令和过滤器 \n>我尝试了下，发现之前在入口文件直接引入指令或者过滤器的方式不管用了，因为用了ts后，组件的作用域跟之前的不一样了，然后我找了官方的issue，截图如下.\n\n![](5.jpg)\n\n\n**一个自定义指令**\n\n      // ./directive/index.ts\n      export const focus = {\n          // 当被绑定的元素插入到 DOM 中时……\n          inserted: function (el:HTMLElement) {\n              // 聚焦元素\n              el.focus()\n            }\n      }\n\n**一个过滤器**\n\n      // ./filter/index.ts\n      export const capitalize = function (value:string) {\n          if (!value) return ''\n          value = value.toString()\n          return value.charAt(0).toUpperCase() + value.slice(1)\n      }\n\n\n**组件中使用**\n\n      import { capitalize }from '@/filter/index'\n      import { focus } from '@/directive/index'\n      @Component({\n          filters:{capitalize},\n          directives:{focus}\n      })\n      export default class Test extends Vue {}\n      复制代码<div>\n          <input v-focus v-model=\"modelData\">\n          <div>{{modelData | capitalize}}</div>\n      </div>\n\n## Vuex与TS的糅合\n\n因为vuex是个可选的，所以单独列出来。首先需要引用 `vuex-class` 库，该库有如下几个模块\n\n      import {\n          namespace,\n          Action,\n          Getter,\n          Mutation,\n          State\n      } from 'vuex-class';\n \n分别对应vuex中的 action、getter、mutation等，使用ts对vuex的影响主要在组件对vuex的调用上，vuex的定义还是按照之前的写法即可 \n\n      @State('foo') stateFoo\n      @State(state => state.bar) stateBar\n      @Getter('foo') getterFoo\n      @Action('foo') actionFoo\n      @Mutation('foo') mutationFoo\n      @someModule.Getter('foo') moduleGetterFoo\n\n      // If the argument is omitted, use the property name\n      // for each state/getter/action/mutation type\n      @State foo\n      @Getter bar\n      @Action baz\n      @Mutation qu\n\n若不想使用vuex定义的方法名，可以自定义属性名，因为都是定义在当前this上，所以直接使用this调用即可\n\n      this.getterFoo // -> store.getters.foo\n      this.actionFoo({ value: true }) // -> store.dispatch('foo', { value: true })\n\n## 小结\n ......\n\n\n  ","source":"_posts/TS+VUE项目搭建.md","raw":"---\ntitle: TS+VUE项目搭建\ndate: 2019-10-16 15:00:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n  - TS\ncategories:\n  - TS\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=574919767&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# TS+VUE项目搭建\n\n---\n自尤大推出vue对typescript的支持后，一直想开箱尝试，对于前端sr来说，vue的顺滑加上ts的面向对象，想着就非常美好~ 终于在两个月前，找到了个机会尝试了一把vue+ts的组合。 开文记录下vue和ts整合之旅和遇到的一些坑。\n## Vue \n应该大部分人都知道vue，毕竟如今vue是与react肩并肩的存在，所以就不过多介绍啦。\n\n[vue中文官网](https://cn.vuejs.org/index.html) 官网上的教程就是最好的入门教程\n\n## TypeScript\n我在前几篇文章就一直有在宣传typescript，简单列举下ts的优点\n\n1. 始于JavaScript，归于JavaScript,typescript是JavaScript的超集，所以它可以重用JavaScriptd代码,使用JavaScript的库\n\n2. JavaScript用的优点它都有，跨浏览器、跨操作系统等\n\n3. 面向对象的编程思想,强大的类型检查\n\n开源大法好\n\n要说缺点的话，那就是不太适合太小的项目。\n就凭这些优点，足够我们愉快的玩耍~\n\n## TS安装\n 先将node安装，然后在通过npm安装ts的包\n\n      npm install -g typescript\n\n      tsc -v //查看ts的版本号\n## 创建项目\n### 执行安装命令\n\n    npm install -g @vue/cli\n\n 安装完成后，可以通过 vue create 快速创建一个新项目的脚手架，或者直接通过 vue serve 构建新想法的原型。\n\n### 创建项目\n    vue create vue-ts  //vue-ts 是我们的项目名称，执行后如下\n    ![](1.jpg)\n\n可看到有这么几个选项，xiaoli这个选项是我之前创建的，稍后会介绍；default这个后面写着 babel eslint ，表示若选择这个，那么只会引入babel和 ealint；manually select features顾名思义，选择我们想要的。那么我们选择第三个\n\n![](2.jpg)\n\n可看到列表里有很多选项，这里是多项选择，按`上/下键`切换选项，`空格键`选择该选项，`enter`键进入下一步。你可以根据项目的实际情况，选择相应的选项。我们以vue+ts为主，所以我们选择 babel typescript router vuex 这几个，选择完后，如下\n\n\n![](3.jpg)\n\n接下来会有好几个yes or no 的选项，大家根据自己项目的需要来选择就可以，最后一步，`Save this as a preset for future projects?` 若选择yes，就会将我们之前的选择存储起来，作为一个预设选项，方便后续一键创建新项目。所有步骤选完，回车，便开始创建项目文件结构和拉取npm包\n\n## 项目结构\n **项目结构如下**\n\n![](4.jpg)\n\n**public:** 用于存放静态文件，`index.html`入口文件就放在里面，这个文件夹下的文件不会纳入webpack的打包中；\n**src：**存放vue项目工程文件，其中已经帮我们关联好router和vuex，文件结构非常简洁\n其他：webpack、babel等配置文件\n\n## 与TypeScript复用\n\n项目在构建中，已经引入 `vue-class-component` ，用于对ts的支持，或者使用 `vue-property-decorator`,这个库是在之前那个的基础上扩展。\n\n以下列举tsvue写法的各种变化\n\n### 组件声明 \n     import { Component, Prop, Vue, Watch } from 'vue-property-decorator';\n\n      @Component\n      export default class Test extends Vue {\n\n      }\n\n### data对象\n\n通过构造函数创建data里的数据\n\n      import { Component, Prop, Vue, Watch } from 'vue-property-decorator';\n\n      @Component\n      export default class Test extends Vue {\n          private name: string;\n          constructor() {\n              super();\n              this.name = 'xiaoli';\n          }\n      }\n**data里的数据使用方式如下**\n      public getName(){\n          return this.name\n      }    \n\n### Prop声明\n\n      @Prop() public msg: string;\n      @Prop({ default: 'default value' }) propB: string\n      @Prop([String, Boolean]) propC: string | boolean\n\n### 生命周期函数使用\n      public created(): void {\n          console.log('created');\n      }\n\n      public mounted():void{\n          console.log('mounted')\n      }\n\n### 自定义方法\njs下是需要在method对象中声明方法，现变成如下\n\n      public clickFunc(): void {\n          console.log(this.name)\n          console.log(this.msg)\n      }\n\n### Watch监听属性 \n\n      @Watch('name',{ immediate: true, deep: true })\n      public onChildChanged(val: string, oldVal: string) {\n          console.log('watch new name=' + val);\n      }\n\n### computed计算属性\n\n      public get allname() {\n          return 'computed ' + this.name;\n      } \n\nallname是计算后的值，name是被监听的值\n\n### emit事件\n      @Emit()\n        addToCount(n: number) {\n          this.count += n\n        }\n\n        @Emit('reset')\n        resetCount() {\n          this.count = 0\n        }\n\n第一个的事件名称为 add-to-count,n为传过去的参数；第二个事件名为reset-count,参数为空\n\n### 指令和过滤器 \n>我尝试了下，发现之前在入口文件直接引入指令或者过滤器的方式不管用了，因为用了ts后，组件的作用域跟之前的不一样了，然后我找了官方的issue，截图如下.\n\n![](5.jpg)\n\n\n**一个自定义指令**\n\n      // ./directive/index.ts\n      export const focus = {\n          // 当被绑定的元素插入到 DOM 中时……\n          inserted: function (el:HTMLElement) {\n              // 聚焦元素\n              el.focus()\n            }\n      }\n\n**一个过滤器**\n\n      // ./filter/index.ts\n      export const capitalize = function (value:string) {\n          if (!value) return ''\n          value = value.toString()\n          return value.charAt(0).toUpperCase() + value.slice(1)\n      }\n\n\n**组件中使用**\n\n      import { capitalize }from '@/filter/index'\n      import { focus } from '@/directive/index'\n      @Component({\n          filters:{capitalize},\n          directives:{focus}\n      })\n      export default class Test extends Vue {}\n      复制代码<div>\n          <input v-focus v-model=\"modelData\">\n          <div>{{modelData | capitalize}}</div>\n      </div>\n\n## Vuex与TS的糅合\n\n因为vuex是个可选的，所以单独列出来。首先需要引用 `vuex-class` 库，该库有如下几个模块\n\n      import {\n          namespace,\n          Action,\n          Getter,\n          Mutation,\n          State\n      } from 'vuex-class';\n \n分别对应vuex中的 action、getter、mutation等，使用ts对vuex的影响主要在组件对vuex的调用上，vuex的定义还是按照之前的写法即可 \n\n      @State('foo') stateFoo\n      @State(state => state.bar) stateBar\n      @Getter('foo') getterFoo\n      @Action('foo') actionFoo\n      @Mutation('foo') mutationFoo\n      @someModule.Getter('foo') moduleGetterFoo\n\n      // If the argument is omitted, use the property name\n      // for each state/getter/action/mutation type\n      @State foo\n      @Getter bar\n      @Action baz\n      @Mutation qu\n\n若不想使用vuex定义的方法名，可以自定义属性名，因为都是定义在当前this上，所以直接使用this调用即可\n\n      this.getterFoo // -> store.getters.foo\n      this.actionFoo({ value: true }) // -> store.dispatch('foo', { value: true })\n\n## 小结\n ......\n\n\n  ","slug":"TS+VUE项目搭建","published":1,"updated":"2020-05-28T07:51:13.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckari24xv000s5sjoc715rfug","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=574919767&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"TS-VUE项目搭建\"><a href=\"#TS-VUE项目搭建\" class=\"headerlink\" title=\"TS+VUE项目搭建\"></a>TS+VUE项目搭建</h1><hr>\n<p>自尤大推出vue对typescript的支持后，一直想开箱尝试，对于前端sr来说，vue的顺滑加上ts的面向对象，想着就非常美好~ 终于在两个月前，找到了个机会尝试了一把vue+ts的组合。 开文记录下vue和ts整合之旅和遇到的一些坑。</p>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><p>应该大部分人都知道vue，毕竟如今vue是与react肩并肩的存在，所以就不过多介绍啦。</p>\n<p><a href=\"https://cn.vuejs.org/index.html\" target=\"_blank\" rel=\"noopener\">vue中文官网</a> 官网上的教程就是最好的入门教程</p>\n<h2 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h2><p>我在前几篇文章就一直有在宣传typescript，简单列举下ts的优点</p>\n<ol>\n<li><p>始于JavaScript，归于JavaScript,typescript是JavaScript的超集，所以它可以重用JavaScriptd代码,使用JavaScript的库</p>\n</li>\n<li><p>JavaScript用的优点它都有，跨浏览器、跨操作系统等</p>\n</li>\n<li><p>面向对象的编程思想,强大的类型检查</p>\n</li>\n</ol>\n<p>开源大法好</p>\n<p>要说缺点的话，那就是不太适合太小的项目。<br>就凭这些优点，足够我们愉快的玩耍~</p>\n<h2 id=\"TS安装\"><a href=\"#TS安装\" class=\"headerlink\" title=\"TS安装\"></a>TS安装</h2><p> 先将node安装，然后在通过npm安装ts的包</p>\n<pre><code>  npm install -g typescript\n\n  tsc -v //查看ts的版本号</code></pre><h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><h3 id=\"执行安装命令\"><a href=\"#执行安装命令\" class=\"headerlink\" title=\"执行安装命令\"></a>执行安装命令</h3><pre><code>npm install -g @vue/cli</code></pre><p> 安装完成后，可以通过 vue create 快速创建一个新项目的脚手架，或者直接通过 vue serve 构建新想法的原型。</p>\n<h3 id=\"创建项目-1\"><a href=\"#创建项目-1\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><pre><code>vue create vue-ts  //vue-ts 是我们的项目名称，执行后如下\n![](1.jpg)</code></pre><p>可看到有这么几个选项，xiaoli这个选项是我之前创建的，稍后会介绍；default这个后面写着 babel eslint ，表示若选择这个，那么只会引入babel和 ealint；manually select features顾名思义，选择我们想要的。那么我们选择第三个</p>\n<p><img src=\"2.jpg\" alt></p>\n<p>可看到列表里有很多选项，这里是多项选择，按<code>上/下键</code>切换选项，<code>空格键</code>选择该选项，<code>enter</code>键进入下一步。你可以根据项目的实际情况，选择相应的选项。我们以vue+ts为主，所以我们选择 babel typescript router vuex 这几个，选择完后，如下</p>\n<p><img src=\"3.jpg\" alt></p>\n<p>接下来会有好几个yes or no 的选项，大家根据自己项目的需要来选择就可以，最后一步，<code>Save this as a preset for future projects?</code> 若选择yes，就会将我们之前的选择存储起来，作为一个预设选项，方便后续一键创建新项目。所有步骤选完，回车，便开始创建项目文件结构和拉取npm包</p>\n<h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><p> <strong>项目结构如下</strong></p>\n<p><img src=\"4.jpg\" alt></p>\n<p><strong>public:</strong> 用于存放静态文件，<code>index.html</code>入口文件就放在里面，这个文件夹下的文件不会纳入webpack的打包中；<br><strong>src：</strong>存放vue项目工程文件，其中已经帮我们关联好router和vuex，文件结构非常简洁<br>其他：webpack、babel等配置文件</p>\n<h2 id=\"与TypeScript复用\"><a href=\"#与TypeScript复用\" class=\"headerlink\" title=\"与TypeScript复用\"></a>与TypeScript复用</h2><p>项目在构建中，已经引入 <code>vue-class-component</code> ，用于对ts的支持，或者使用 <code>vue-property-decorator</code>,这个库是在之前那个的基础上扩展。</p>\n<p>以下列举tsvue写法的各种变化</p>\n<h3 id=\"组件声明\"><a href=\"#组件声明\" class=\"headerlink\" title=\"组件声明\"></a>组件声明</h3><pre><code> import { Component, Prop, Vue, Watch } from &#39;vue-property-decorator&#39;;\n\n  @Component\n  export default class Test extends Vue {\n\n  }</code></pre><h3 id=\"data对象\"><a href=\"#data对象\" class=\"headerlink\" title=\"data对象\"></a>data对象</h3><p>通过构造函数创建data里的数据</p>\n<pre><code>  import { Component, Prop, Vue, Watch } from &#39;vue-property-decorator&#39;;\n\n  @Component\n  export default class Test extends Vue {\n      private name: string;\n      constructor() {\n          super();\n          this.name = &#39;xiaoli&#39;;\n      }\n  }</code></pre><p><strong>data里的数据使用方式如下</strong><br>      public getName(){<br>          return this.name<br>      }    </p>\n<h3 id=\"Prop声明\"><a href=\"#Prop声明\" class=\"headerlink\" title=\"Prop声明\"></a>Prop声明</h3><pre><code>  @Prop() public msg: string;\n  @Prop({ default: &#39;default value&#39; }) propB: string\n  @Prop([String, Boolean]) propC: string | boolean</code></pre><h3 id=\"生命周期函数使用\"><a href=\"#生命周期函数使用\" class=\"headerlink\" title=\"生命周期函数使用\"></a>生命周期函数使用</h3><pre><code>  public created(): void {\n      console.log(&#39;created&#39;);\n  }\n\n  public mounted():void{\n      console.log(&#39;mounted&#39;)\n  }</code></pre><h3 id=\"自定义方法\"><a href=\"#自定义方法\" class=\"headerlink\" title=\"自定义方法\"></a>自定义方法</h3><p>js下是需要在method对象中声明方法，现变成如下</p>\n<pre><code>  public clickFunc(): void {\n      console.log(this.name)\n      console.log(this.msg)\n  }</code></pre><h3 id=\"Watch监听属性\"><a href=\"#Watch监听属性\" class=\"headerlink\" title=\"Watch监听属性\"></a>Watch监听属性</h3><pre><code>  @Watch(&#39;name&#39;,{ immediate: true, deep: true })\n  public onChildChanged(val: string, oldVal: string) {\n      console.log(&#39;watch new name=&#39; + val);\n  }</code></pre><h3 id=\"computed计算属性\"><a href=\"#computed计算属性\" class=\"headerlink\" title=\"computed计算属性\"></a>computed计算属性</h3><pre><code>  public get allname() {\n      return &#39;computed &#39; + this.name;\n  } </code></pre><p>allname是计算后的值，name是被监听的值</p>\n<h3 id=\"emit事件\"><a href=\"#emit事件\" class=\"headerlink\" title=\"emit事件\"></a>emit事件</h3><pre><code>  @Emit()\n    addToCount(n: number) {\n      this.count += n\n    }\n\n    @Emit(&#39;reset&#39;)\n    resetCount() {\n      this.count = 0\n    }</code></pre><p>第一个的事件名称为 add-to-count,n为传过去的参数；第二个事件名为reset-count,参数为空</p>\n<h3 id=\"指令和过滤器\"><a href=\"#指令和过滤器\" class=\"headerlink\" title=\"指令和过滤器\"></a>指令和过滤器</h3><blockquote>\n<p>我尝试了下，发现之前在入口文件直接引入指令或者过滤器的方式不管用了，因为用了ts后，组件的作用域跟之前的不一样了，然后我找了官方的issue，截图如下.</p>\n</blockquote>\n<p><img src=\"5.jpg\" alt></p>\n<p><strong>一个自定义指令</strong></p>\n<pre><code>  // ./directive/index.ts\n  export const focus = {\n      // 当被绑定的元素插入到 DOM 中时……\n      inserted: function (el:HTMLElement) {\n          // 聚焦元素\n          el.focus()\n        }\n  }</code></pre><p><strong>一个过滤器</strong></p>\n<pre><code>  // ./filter/index.ts\n  export const capitalize = function (value:string) {\n      if (!value) return &#39;&#39;\n      value = value.toString()\n      return value.charAt(0).toUpperCase() + value.slice(1)\n  }</code></pre><p><strong>组件中使用</strong></p>\n<pre><code>  import { capitalize }from &#39;@/filter/index&#39;\n  import { focus } from &#39;@/directive/index&#39;\n  @Component({\n      filters:{capitalize},\n      directives:{focus}\n  })\n  export default class Test extends Vue {}\n  复制代码&lt;div&gt;\n      &lt;input v-focus v-model=&quot;modelData&quot;&gt;\n      &lt;div&gt;{{modelData | capitalize}}&lt;/div&gt;\n  &lt;/div&gt;</code></pre><h2 id=\"Vuex与TS的糅合\"><a href=\"#Vuex与TS的糅合\" class=\"headerlink\" title=\"Vuex与TS的糅合\"></a>Vuex与TS的糅合</h2><p>因为vuex是个可选的，所以单独列出来。首先需要引用 <code>vuex-class</code> 库，该库有如下几个模块</p>\n<pre><code>  import {\n      namespace,\n      Action,\n      Getter,\n      Mutation,\n      State\n  } from &#39;vuex-class&#39;;</code></pre><p>分别对应vuex中的 action、getter、mutation等，使用ts对vuex的影响主要在组件对vuex的调用上，vuex的定义还是按照之前的写法即可 </p>\n<pre><code>  @State(&#39;foo&#39;) stateFoo\n  @State(state =&gt; state.bar) stateBar\n  @Getter(&#39;foo&#39;) getterFoo\n  @Action(&#39;foo&#39;) actionFoo\n  @Mutation(&#39;foo&#39;) mutationFoo\n  @someModule.Getter(&#39;foo&#39;) moduleGetterFoo\n\n  // If the argument is omitted, use the property name\n  // for each state/getter/action/mutation type\n  @State foo\n  @Getter bar\n  @Action baz\n  @Mutation qu</code></pre><p>若不想使用vuex定义的方法名，可以自定义属性名，因为都是定义在当前this上，所以直接使用this调用即可</p>\n<pre><code>  this.getterFoo // -&gt; store.getters.foo\n  this.actionFoo({ value: true }) // -&gt; store.dispatch(&#39;foo&#39;, { value: true })</code></pre><h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p> ……</p>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=574919767&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"TS-VUE项目搭建\"><a href=\"#TS-VUE项目搭建\" class=\"headerlink\" title=\"TS+VUE项目搭建\"></a>TS+VUE项目搭建</h1><hr>\n<p>自尤大推出vue对typescript的支持后，一直想开箱尝试，对于前端sr来说，vue的顺滑加上ts的面向对象，想着就非常美好~ 终于在两个月前，找到了个机会尝试了一把vue+ts的组合。 开文记录下vue和ts整合之旅和遇到的一些坑。</p>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><p>应该大部分人都知道vue，毕竟如今vue是与react肩并肩的存在，所以就不过多介绍啦。</p>\n<p><a href=\"https://cn.vuejs.org/index.html\" target=\"_blank\" rel=\"noopener\">vue中文官网</a> 官网上的教程就是最好的入门教程</p>\n<h2 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h2><p>我在前几篇文章就一直有在宣传typescript，简单列举下ts的优点</p>\n<ol>\n<li><p>始于JavaScript，归于JavaScript,typescript是JavaScript的超集，所以它可以重用JavaScriptd代码,使用JavaScript的库</p>\n</li>\n<li><p>JavaScript用的优点它都有，跨浏览器、跨操作系统等</p>\n</li>\n<li><p>面向对象的编程思想,强大的类型检查</p>\n</li>\n</ol>\n<p>开源大法好</p>\n<p>要说缺点的话，那就是不太适合太小的项目。<br>就凭这些优点，足够我们愉快的玩耍~</p>\n<h2 id=\"TS安装\"><a href=\"#TS安装\" class=\"headerlink\" title=\"TS安装\"></a>TS安装</h2><p> 先将node安装，然后在通过npm安装ts的包</p>\n<pre><code>  npm install -g typescript\n\n  tsc -v //查看ts的版本号</code></pre><h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><h3 id=\"执行安装命令\"><a href=\"#执行安装命令\" class=\"headerlink\" title=\"执行安装命令\"></a>执行安装命令</h3><pre><code>npm install -g @vue/cli</code></pre><p> 安装完成后，可以通过 vue create 快速创建一个新项目的脚手架，或者直接通过 vue serve 构建新想法的原型。</p>\n<h3 id=\"创建项目-1\"><a href=\"#创建项目-1\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><pre><code>vue create vue-ts  //vue-ts 是我们的项目名称，执行后如下\n![](1.jpg)</code></pre><p>可看到有这么几个选项，xiaoli这个选项是我之前创建的，稍后会介绍；default这个后面写着 babel eslint ，表示若选择这个，那么只会引入babel和 ealint；manually select features顾名思义，选择我们想要的。那么我们选择第三个</p>\n<p><img src=\"2.jpg\" alt></p>\n<p>可看到列表里有很多选项，这里是多项选择，按<code>上/下键</code>切换选项，<code>空格键</code>选择该选项，<code>enter</code>键进入下一步。你可以根据项目的实际情况，选择相应的选项。我们以vue+ts为主，所以我们选择 babel typescript router vuex 这几个，选择完后，如下</p>\n<p><img src=\"3.jpg\" alt></p>\n<p>接下来会有好几个yes or no 的选项，大家根据自己项目的需要来选择就可以，最后一步，<code>Save this as a preset for future projects?</code> 若选择yes，就会将我们之前的选择存储起来，作为一个预设选项，方便后续一键创建新项目。所有步骤选完，回车，便开始创建项目文件结构和拉取npm包</p>\n<h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><p> <strong>项目结构如下</strong></p>\n<p><img src=\"4.jpg\" alt></p>\n<p><strong>public:</strong> 用于存放静态文件，<code>index.html</code>入口文件就放在里面，这个文件夹下的文件不会纳入webpack的打包中；<br><strong>src：</strong>存放vue项目工程文件，其中已经帮我们关联好router和vuex，文件结构非常简洁<br>其他：webpack、babel等配置文件</p>\n<h2 id=\"与TypeScript复用\"><a href=\"#与TypeScript复用\" class=\"headerlink\" title=\"与TypeScript复用\"></a>与TypeScript复用</h2><p>项目在构建中，已经引入 <code>vue-class-component</code> ，用于对ts的支持，或者使用 <code>vue-property-decorator</code>,这个库是在之前那个的基础上扩展。</p>\n<p>以下列举tsvue写法的各种变化</p>\n<h3 id=\"组件声明\"><a href=\"#组件声明\" class=\"headerlink\" title=\"组件声明\"></a>组件声明</h3><pre><code> import { Component, Prop, Vue, Watch } from &#39;vue-property-decorator&#39;;\n\n  @Component\n  export default class Test extends Vue {\n\n  }</code></pre><h3 id=\"data对象\"><a href=\"#data对象\" class=\"headerlink\" title=\"data对象\"></a>data对象</h3><p>通过构造函数创建data里的数据</p>\n<pre><code>  import { Component, Prop, Vue, Watch } from &#39;vue-property-decorator&#39;;\n\n  @Component\n  export default class Test extends Vue {\n      private name: string;\n      constructor() {\n          super();\n          this.name = &#39;xiaoli&#39;;\n      }\n  }</code></pre><p><strong>data里的数据使用方式如下</strong><br>      public getName(){<br>          return this.name<br>      }    </p>\n<h3 id=\"Prop声明\"><a href=\"#Prop声明\" class=\"headerlink\" title=\"Prop声明\"></a>Prop声明</h3><pre><code>  @Prop() public msg: string;\n  @Prop({ default: &#39;default value&#39; }) propB: string\n  @Prop([String, Boolean]) propC: string | boolean</code></pre><h3 id=\"生命周期函数使用\"><a href=\"#生命周期函数使用\" class=\"headerlink\" title=\"生命周期函数使用\"></a>生命周期函数使用</h3><pre><code>  public created(): void {\n      console.log(&#39;created&#39;);\n  }\n\n  public mounted():void{\n      console.log(&#39;mounted&#39;)\n  }</code></pre><h3 id=\"自定义方法\"><a href=\"#自定义方法\" class=\"headerlink\" title=\"自定义方法\"></a>自定义方法</h3><p>js下是需要在method对象中声明方法，现变成如下</p>\n<pre><code>  public clickFunc(): void {\n      console.log(this.name)\n      console.log(this.msg)\n  }</code></pre><h3 id=\"Watch监听属性\"><a href=\"#Watch监听属性\" class=\"headerlink\" title=\"Watch监听属性\"></a>Watch监听属性</h3><pre><code>  @Watch(&#39;name&#39;,{ immediate: true, deep: true })\n  public onChildChanged(val: string, oldVal: string) {\n      console.log(&#39;watch new name=&#39; + val);\n  }</code></pre><h3 id=\"computed计算属性\"><a href=\"#computed计算属性\" class=\"headerlink\" title=\"computed计算属性\"></a>computed计算属性</h3><pre><code>  public get allname() {\n      return &#39;computed &#39; + this.name;\n  } </code></pre><p>allname是计算后的值，name是被监听的值</p>\n<h3 id=\"emit事件\"><a href=\"#emit事件\" class=\"headerlink\" title=\"emit事件\"></a>emit事件</h3><pre><code>  @Emit()\n    addToCount(n: number) {\n      this.count += n\n    }\n\n    @Emit(&#39;reset&#39;)\n    resetCount() {\n      this.count = 0\n    }</code></pre><p>第一个的事件名称为 add-to-count,n为传过去的参数；第二个事件名为reset-count,参数为空</p>\n<h3 id=\"指令和过滤器\"><a href=\"#指令和过滤器\" class=\"headerlink\" title=\"指令和过滤器\"></a>指令和过滤器</h3><blockquote>\n<p>我尝试了下，发现之前在入口文件直接引入指令或者过滤器的方式不管用了，因为用了ts后，组件的作用域跟之前的不一样了，然后我找了官方的issue，截图如下.</p>\n</blockquote>\n<p><img src=\"5.jpg\" alt></p>\n<p><strong>一个自定义指令</strong></p>\n<pre><code>  // ./directive/index.ts\n  export const focus = {\n      // 当被绑定的元素插入到 DOM 中时……\n      inserted: function (el:HTMLElement) {\n          // 聚焦元素\n          el.focus()\n        }\n  }</code></pre><p><strong>一个过滤器</strong></p>\n<pre><code>  // ./filter/index.ts\n  export const capitalize = function (value:string) {\n      if (!value) return &#39;&#39;\n      value = value.toString()\n      return value.charAt(0).toUpperCase() + value.slice(1)\n  }</code></pre><p><strong>组件中使用</strong></p>\n<pre><code>  import { capitalize }from &#39;@/filter/index&#39;\n  import { focus } from &#39;@/directive/index&#39;\n  @Component({\n      filters:{capitalize},\n      directives:{focus}\n  })\n  export default class Test extends Vue {}\n  复制代码&lt;div&gt;\n      &lt;input v-focus v-model=&quot;modelData&quot;&gt;\n      &lt;div&gt;{{modelData | capitalize}}&lt;/div&gt;\n  &lt;/div&gt;</code></pre><h2 id=\"Vuex与TS的糅合\"><a href=\"#Vuex与TS的糅合\" class=\"headerlink\" title=\"Vuex与TS的糅合\"></a>Vuex与TS的糅合</h2><p>因为vuex是个可选的，所以单独列出来。首先需要引用 <code>vuex-class</code> 库，该库有如下几个模块</p>\n<pre><code>  import {\n      namespace,\n      Action,\n      Getter,\n      Mutation,\n      State\n  } from &#39;vuex-class&#39;;</code></pre><p>分别对应vuex中的 action、getter、mutation等，使用ts对vuex的影响主要在组件对vuex的调用上，vuex的定义还是按照之前的写法即可 </p>\n<pre><code>  @State(&#39;foo&#39;) stateFoo\n  @State(state =&gt; state.bar) stateBar\n  @Getter(&#39;foo&#39;) getterFoo\n  @Action(&#39;foo&#39;) actionFoo\n  @Mutation(&#39;foo&#39;) mutationFoo\n  @someModule.Getter(&#39;foo&#39;) moduleGetterFoo\n\n  // If the argument is omitted, use the property name\n  // for each state/getter/action/mutation type\n  @State foo\n  @Getter bar\n  @Action baz\n  @Mutation qu</code></pre><p>若不想使用vuex定义的方法名，可以自定义属性名，因为都是定义在当前this上，所以直接使用this调用即可</p>\n<pre><code>  this.getterFoo // -&gt; store.getters.foo\n  this.actionFoo({ value: true }) // -&gt; store.dispatch(&#39;foo&#39;, { value: true })</code></pre><h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p> ……</p>\n"},{"title":"一个基于vue和element-ui的树形穿梭框组件","date":"2019-08-20T05:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28854182&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 开篇\n---\n一个基于vue和element-ui的树形穿梭框组件\n\n**el-tree-transfer**\n\n>el-tree-fransfer是一个基于VUE和element-ui的树形穿梭框组件，使用前请确认已经引入element-ui！ 此组件功能类似于element-ui的transfer组件，但是里面的数据是树形结构！ 实际上，el-tree-transfer依赖的element-ui组件分别是Checkbox 多选框，Button 按钮，和最主要的Tree 树形控件写成！并非是在element-ui的穿梭框组件上的扩展，而仅仅是参照了其外观样式和功能。ui完全按照element-ui风格。\n注意：使用此插件时默认你已经引入了element-ui的button，check-box，tree组件！\n第一层数据的 pid 请设定为 0！！\nid推荐为string，但也可以是number，请不要混用，id不能重复！\n\n**1.先npm下载插件**\n     1. npm install el-tree-transfer --save\n      或\n     2.npm i el-tree-transfer -S\n\n然后你可以像使用普通组件一样使用el-tree-transfer\n\n\n      <template>\n          <div>\n          // 你的代码\n          ...\n          // 使用树形穿梭框组件\n          <tree-transfer :title=\"title\" :from_data='fromData' :to_data='toData' :defaultProps=\"{label:'label'}\"             @addBtn='add' @removeBtn='remove' :mode='mode' height='540px' filter openAll>\n          </tree-transfer>\n        </div>\n      </template>  \n      <script>\n      import treeTransfer from 'el-tree-transfer' // 引入\n\n        export defult {\n          data(){\n            return:{\n              mode: \"transfer\", // transfer addressList\n              fromData:[\n                {\n                  id: \"1\",\n                  pid: 0,\n                  label: \"一级 1\",\n                  children: [\n                    {\n                      id: \"1-1\",\n                      pid: \"1\",\n                      label: \"二级 1-1\",\n                      children: []\n                    },\n                    {\n                      id: \"1-2\",\n                      pid: \"1\",\n                      label: \"二级 1-2\",\n                      children: [\n                        {\n                          id: \"1-2-1\",\n                          pid: \"1-2\",\n                          children: [],\n                          label: \"二级 1-2-1\"\n                        },\n                        {\n                          id: \"1-2-2\",\n                          pid: \"1-2\",\n                          children: [],\n                          label: \"二级 1-2-2\"\n                        }\n                      ]\n                    }\n                  ]\n                },\n              ],\n              toData:[]\n            }\n          },\n          methods:{\n            // 切换模式 现有树形穿梭框模式transfer 和通讯录模式addressList\n            changeMode() {\n              if (this.mode == \"transfer\") {\n                this.mode = \"addressList\";\n              } else {\n                this.mode = \"transfer\";\n              }\n            },\n            // 监听穿梭框组件添加\n            add(fromData,toData,obj){\n              // 树形穿梭框模式transfer时，返回参数为左侧树移动后数据、右侧树移动后数据、移动的        {keys,nodes,halfKeys,halfNodes}对象\n              // 通讯录模式addressList时，返回参数为右侧收件人列表、右侧抄送人列表、右侧密送人列表\n              console.log(\"fromData:\", fromData);\n              console.log(\"toData:\", toData);\n              console.log(\"obj:\", obj);\n            },\n            // 监听穿梭框组件移除\n            remove(fromData,toData,obj){\n              // 树形穿梭框模式transfer时，返回参数为左侧树移动后数据、右侧树移动后数据、移动的{keys,nodes,halfKeys,halfNodes}对象\n              // 通讯录模式addressList时，返回参数为右侧收件人列表、右侧抄送人列表、右侧密送人列表\n              console.log(\"fromData:\", fromData);\n              console.log(\"toData:\", toData);\n              console.log(\"obj:\", obj);\n            }\n          },\n          comporents:{ treeTransfer } // 注册\n        }\n      </script>\n      <style>\n      ...\n      </style>\n\n# 文档\n--- \n\n\n\n参数：width 说明：宽度 类型：String 必填：false 默认：100% 补充：建议在外部盒子设定宽度和位置\n参数：height 说明：高度 类型：String 必填：false 默认：320px\n参数：title 说明：标题 类型：Array 必填：false 默认：[\"源列表\", \"目标列表\"]\n参数：button_text 说明：按钮名字 类型：Array 必填：false 默认：空\n参数：from_data 说明：源数据 类型：Array 必填：true 补充：数据格式同element-ui tree组件，但必须有id和pid\n参数：to_data 说明：目标数据 类型：Array 必填：true 补充：数据格式同element-ui tree组件，但必须有id和pid\n参数：defaultProps 说明：配置项-同el-tree中props 必填： false 补充：用法和el-tree的props一样\n参数：node_key 说明：自定义node-key的值，默认为id 必填：false 补充：必须与treedata数据内的id参数名一致，必须唯一\n参数：pid 说明：自定义pid的参数名，默认为\"pid\" 必填：false 补充：有网友提出后台给的字段名不叫pid，因此增加自定义支持\n参数：leafOnly 说明：是否只返回叶子节点 类型：Boolean 必填：false 补充：默认false，如果你只需要返回的末端子节点可使用此参数\n参数：filter 说明：是否开启筛选功能 类型：Boolean 必填：false\n参数：openAll 说明：是否默认展开全部 类型：Boolean 必填：false\n参数：renderContent 说明：自定义树节点 类型：Function 必填：false 补充：用法同element-ui tree\n参数：mode 说明：设置模式，字段可选值为transfer|addressList 类型：String 必填：false 补充：mode默认为transfer模式，即树形穿梭框模式，可配置字段为addressList改为通讯录模式，通讯录模式时按钮不可自定义名字，如要自定义标题名在title数组传入四个值即可，addressList模式时标题默认为通讯录、收件人、抄送人、密送人\n参数：transferOpenNode 说明：穿梭后是否展开穿梭的节点 类型：Boolean 必填：false 补充：默认为true即展开穿梭的节点，便于视觉查看，增加此参数是因为数据量大时展开会有明显卡顿问题，但注意，如此参数设置为false则穿梭后不展开，毕竟无法确定第几层就会有庞大数据\n参数：defaultCheckedKeys 说明：默认展开节点 类型：Array 必填：false 补充：只匹配初始时默认节点，不会在你操作后动态改变默认节点\n参数：placeholder 说明：设置搜索框提示语 类型：String 必填：false 补充：默认为请输入关键词进行筛选\n参数：defaultTransfer 说明：是否自动穿梭一次默认选中defaultCheckedKeys的节点 类型：Boolean 必填：false 补充：默认false，用来满足用户不想将数据拆分成fromData和toData的需求\n参数：arrayToTree 说明：是否开启一维数组转化为树形结构 类型：Boolean 必填：false 补充：数据必须存在根节点，并且不会断节，数据格式详见github上app.vue，根据id、pid对应关系转化，存在一定的性能问题\n参数：addressOptions 说明：通讯录模式配置项{num: Number, suffix: String, connector: String} 类型：Object 必填：false 补充：num-> 所需右侧通讯录个数,默认3 suffix-> label后想要拼接的字段（如id，即取此条数据的id拼接在后方）默认suffix connector -> 连接符（字符串）默认-\n参数：lazy 说明：是否启用懒加载 类型：Boolean 必填：false 补充：默认false，效果动el-tree懒加载，不可和openAll或默认展开同时使用\n参数：lazyFn 说明：懒加载的回调函数 类型：Function 必填：true 补充：当适用lazy时必须传入回调函数，示例:lazyFn='loadNode',返回参数loadNode(node, resolve, from), node->当前展开节点node，resolve->懒加载resolve，from -> left|right 表示回调来自左侧|右侧\n事件：addBtn 说明：点击添加按钮时触发的事件 回调参数：function(fromData,toData,obj),树形穿梭框transfer模式分别为1.移动后左侧数据，2.移动后右侧数据，3.移动的节点keys、nodes、halfKeys、halfNodes对象；通讯录addressList模式时返回参数为右侧收件人列表、右侧抄送人列表、右侧密送人列表\n事件：removeBtn 说明：点击移除按钮时触发的事件 回调参数：function(fromData,toData,obj),树形穿梭框transfer模式分别为1.移动后左侧数据，2.移动后右侧数据，3.移动的节点keys、nodes、halfKeys、halfNodes对象；通讯录addressList模式时返回参数为右侧收件人列表、右侧抄送人列表、右侧密送人列表\n事件：left-check-change 说明：左侧源数据勾选事件 回调参数：function(nodeObj, treeObj)见el-tree组件check事件返回值\n事件：right-check-change 说明：右侧目标数据勾选事件 回调参数：function(nodeObj, treeObj)见el-tree组件check事件返回值\nSlot：left-footer, right-footer 说明：穿梭框左侧、右侧底部slot\nSlot: title-left, title-right 说明：穿梭框标题区左侧、右侧自定义内容\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/VUE+element穿梭框.md","raw":"---\ntitle: 一个基于vue和element-ui的树形穿梭框组件\ndate: 2019-08-20 13:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n- 方法\ncategories:\n- 方法\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28854182&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 开篇\n---\n一个基于vue和element-ui的树形穿梭框组件\n\n**el-tree-transfer**\n\n>el-tree-fransfer是一个基于VUE和element-ui的树形穿梭框组件，使用前请确认已经引入element-ui！ 此组件功能类似于element-ui的transfer组件，但是里面的数据是树形结构！ 实际上，el-tree-transfer依赖的element-ui组件分别是Checkbox 多选框，Button 按钮，和最主要的Tree 树形控件写成！并非是在element-ui的穿梭框组件上的扩展，而仅仅是参照了其外观样式和功能。ui完全按照element-ui风格。\n注意：使用此插件时默认你已经引入了element-ui的button，check-box，tree组件！\n第一层数据的 pid 请设定为 0！！\nid推荐为string，但也可以是number，请不要混用，id不能重复！\n\n**1.先npm下载插件**\n     1. npm install el-tree-transfer --save\n      或\n     2.npm i el-tree-transfer -S\n\n然后你可以像使用普通组件一样使用el-tree-transfer\n\n\n      <template>\n          <div>\n          // 你的代码\n          ...\n          // 使用树形穿梭框组件\n          <tree-transfer :title=\"title\" :from_data='fromData' :to_data='toData' :defaultProps=\"{label:'label'}\"             @addBtn='add' @removeBtn='remove' :mode='mode' height='540px' filter openAll>\n          </tree-transfer>\n        </div>\n      </template>  \n      <script>\n      import treeTransfer from 'el-tree-transfer' // 引入\n\n        export defult {\n          data(){\n            return:{\n              mode: \"transfer\", // transfer addressList\n              fromData:[\n                {\n                  id: \"1\",\n                  pid: 0,\n                  label: \"一级 1\",\n                  children: [\n                    {\n                      id: \"1-1\",\n                      pid: \"1\",\n                      label: \"二级 1-1\",\n                      children: []\n                    },\n                    {\n                      id: \"1-2\",\n                      pid: \"1\",\n                      label: \"二级 1-2\",\n                      children: [\n                        {\n                          id: \"1-2-1\",\n                          pid: \"1-2\",\n                          children: [],\n                          label: \"二级 1-2-1\"\n                        },\n                        {\n                          id: \"1-2-2\",\n                          pid: \"1-2\",\n                          children: [],\n                          label: \"二级 1-2-2\"\n                        }\n                      ]\n                    }\n                  ]\n                },\n              ],\n              toData:[]\n            }\n          },\n          methods:{\n            // 切换模式 现有树形穿梭框模式transfer 和通讯录模式addressList\n            changeMode() {\n              if (this.mode == \"transfer\") {\n                this.mode = \"addressList\";\n              } else {\n                this.mode = \"transfer\";\n              }\n            },\n            // 监听穿梭框组件添加\n            add(fromData,toData,obj){\n              // 树形穿梭框模式transfer时，返回参数为左侧树移动后数据、右侧树移动后数据、移动的        {keys,nodes,halfKeys,halfNodes}对象\n              // 通讯录模式addressList时，返回参数为右侧收件人列表、右侧抄送人列表、右侧密送人列表\n              console.log(\"fromData:\", fromData);\n              console.log(\"toData:\", toData);\n              console.log(\"obj:\", obj);\n            },\n            // 监听穿梭框组件移除\n            remove(fromData,toData,obj){\n              // 树形穿梭框模式transfer时，返回参数为左侧树移动后数据、右侧树移动后数据、移动的{keys,nodes,halfKeys,halfNodes}对象\n              // 通讯录模式addressList时，返回参数为右侧收件人列表、右侧抄送人列表、右侧密送人列表\n              console.log(\"fromData:\", fromData);\n              console.log(\"toData:\", toData);\n              console.log(\"obj:\", obj);\n            }\n          },\n          comporents:{ treeTransfer } // 注册\n        }\n      </script>\n      <style>\n      ...\n      </style>\n\n# 文档\n--- \n\n\n\n参数：width 说明：宽度 类型：String 必填：false 默认：100% 补充：建议在外部盒子设定宽度和位置\n参数：height 说明：高度 类型：String 必填：false 默认：320px\n参数：title 说明：标题 类型：Array 必填：false 默认：[\"源列表\", \"目标列表\"]\n参数：button_text 说明：按钮名字 类型：Array 必填：false 默认：空\n参数：from_data 说明：源数据 类型：Array 必填：true 补充：数据格式同element-ui tree组件，但必须有id和pid\n参数：to_data 说明：目标数据 类型：Array 必填：true 补充：数据格式同element-ui tree组件，但必须有id和pid\n参数：defaultProps 说明：配置项-同el-tree中props 必填： false 补充：用法和el-tree的props一样\n参数：node_key 说明：自定义node-key的值，默认为id 必填：false 补充：必须与treedata数据内的id参数名一致，必须唯一\n参数：pid 说明：自定义pid的参数名，默认为\"pid\" 必填：false 补充：有网友提出后台给的字段名不叫pid，因此增加自定义支持\n参数：leafOnly 说明：是否只返回叶子节点 类型：Boolean 必填：false 补充：默认false，如果你只需要返回的末端子节点可使用此参数\n参数：filter 说明：是否开启筛选功能 类型：Boolean 必填：false\n参数：openAll 说明：是否默认展开全部 类型：Boolean 必填：false\n参数：renderContent 说明：自定义树节点 类型：Function 必填：false 补充：用法同element-ui tree\n参数：mode 说明：设置模式，字段可选值为transfer|addressList 类型：String 必填：false 补充：mode默认为transfer模式，即树形穿梭框模式，可配置字段为addressList改为通讯录模式，通讯录模式时按钮不可自定义名字，如要自定义标题名在title数组传入四个值即可，addressList模式时标题默认为通讯录、收件人、抄送人、密送人\n参数：transferOpenNode 说明：穿梭后是否展开穿梭的节点 类型：Boolean 必填：false 补充：默认为true即展开穿梭的节点，便于视觉查看，增加此参数是因为数据量大时展开会有明显卡顿问题，但注意，如此参数设置为false则穿梭后不展开，毕竟无法确定第几层就会有庞大数据\n参数：defaultCheckedKeys 说明：默认展开节点 类型：Array 必填：false 补充：只匹配初始时默认节点，不会在你操作后动态改变默认节点\n参数：placeholder 说明：设置搜索框提示语 类型：String 必填：false 补充：默认为请输入关键词进行筛选\n参数：defaultTransfer 说明：是否自动穿梭一次默认选中defaultCheckedKeys的节点 类型：Boolean 必填：false 补充：默认false，用来满足用户不想将数据拆分成fromData和toData的需求\n参数：arrayToTree 说明：是否开启一维数组转化为树形结构 类型：Boolean 必填：false 补充：数据必须存在根节点，并且不会断节，数据格式详见github上app.vue，根据id、pid对应关系转化，存在一定的性能问题\n参数：addressOptions 说明：通讯录模式配置项{num: Number, suffix: String, connector: String} 类型：Object 必填：false 补充：num-> 所需右侧通讯录个数,默认3 suffix-> label后想要拼接的字段（如id，即取此条数据的id拼接在后方）默认suffix connector -> 连接符（字符串）默认-\n参数：lazy 说明：是否启用懒加载 类型：Boolean 必填：false 补充：默认false，效果动el-tree懒加载，不可和openAll或默认展开同时使用\n参数：lazyFn 说明：懒加载的回调函数 类型：Function 必填：true 补充：当适用lazy时必须传入回调函数，示例:lazyFn='loadNode',返回参数loadNode(node, resolve, from), node->当前展开节点node，resolve->懒加载resolve，from -> left|right 表示回调来自左侧|右侧\n事件：addBtn 说明：点击添加按钮时触发的事件 回调参数：function(fromData,toData,obj),树形穿梭框transfer模式分别为1.移动后左侧数据，2.移动后右侧数据，3.移动的节点keys、nodes、halfKeys、halfNodes对象；通讯录addressList模式时返回参数为右侧收件人列表、右侧抄送人列表、右侧密送人列表\n事件：removeBtn 说明：点击移除按钮时触发的事件 回调参数：function(fromData,toData,obj),树形穿梭框transfer模式分别为1.移动后左侧数据，2.移动后右侧数据，3.移动的节点keys、nodes、halfKeys、halfNodes对象；通讯录addressList模式时返回参数为右侧收件人列表、右侧抄送人列表、右侧密送人列表\n事件：left-check-change 说明：左侧源数据勾选事件 回调参数：function(nodeObj, treeObj)见el-tree组件check事件返回值\n事件：right-check-change 说明：右侧目标数据勾选事件 回调参数：function(nodeObj, treeObj)见el-tree组件check事件返回值\nSlot：left-footer, right-footer 说明：穿梭框左侧、右侧底部slot\nSlot: title-left, title-right 说明：穿梭框标题区左侧、右侧自定义内容\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"VUE+element穿梭框","published":1,"updated":"2020-05-28T07:51:13.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckari24xy000u5sjo1qn58wu1","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28854182&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h1><hr>\n<p>一个基于vue和element-ui的树形穿梭框组件</p>\n<p><strong>el-tree-transfer</strong></p>\n<blockquote>\n<p>el-tree-fransfer是一个基于VUE和element-ui的树形穿梭框组件，使用前请确认已经引入element-ui！ 此组件功能类似于element-ui的transfer组件，但是里面的数据是树形结构！ 实际上，el-tree-transfer依赖的element-ui组件分别是Checkbox 多选框，Button 按钮，和最主要的Tree 树形控件写成！并非是在element-ui的穿梭框组件上的扩展，而仅仅是参照了其外观样式和功能。ui完全按照element-ui风格。<br>注意：使用此插件时默认你已经引入了element-ui的button，check-box，tree组件！<br>第一层数据的 pid 请设定为 0！！<br>id推荐为string，但也可以是number，请不要混用，id不能重复！</p>\n</blockquote>\n<p><strong>1.先npm下载插件</strong><br>     1. npm install el-tree-transfer –save<br>      或<br>     2.npm i el-tree-transfer -S</p>\n<p>然后你可以像使用普通组件一样使用el-tree-transfer</p>\n<pre><code>  &lt;template&gt;\n      &lt;div&gt;\n      // 你的代码\n      ...\n      // 使用树形穿梭框组件\n      &lt;tree-transfer :title=&quot;title&quot; :from_data=&#39;fromData&#39; :to_data=&#39;toData&#39; :defaultProps=&quot;{label:&#39;label&#39;}&quot;             @addBtn=&#39;add&#39; @removeBtn=&#39;remove&#39; :mode=&#39;mode&#39; height=&#39;540px&#39; filter openAll&gt;\n      &lt;/tree-transfer&gt;\n    &lt;/div&gt;\n  &lt;/template&gt;  \n  &lt;script&gt;\n  import treeTransfer from &#39;el-tree-transfer&#39; // 引入\n\n    export defult {\n      data(){\n        return:{\n          mode: &quot;transfer&quot;, // transfer addressList\n          fromData:[\n            {\n              id: &quot;1&quot;,\n              pid: 0,\n              label: &quot;一级 1&quot;,\n              children: [\n                {\n                  id: &quot;1-1&quot;,\n                  pid: &quot;1&quot;,\n                  label: &quot;二级 1-1&quot;,\n                  children: []\n                },\n                {\n                  id: &quot;1-2&quot;,\n                  pid: &quot;1&quot;,\n                  label: &quot;二级 1-2&quot;,\n                  children: [\n                    {\n                      id: &quot;1-2-1&quot;,\n                      pid: &quot;1-2&quot;,\n                      children: [],\n                      label: &quot;二级 1-2-1&quot;\n                    },\n                    {\n                      id: &quot;1-2-2&quot;,\n                      pid: &quot;1-2&quot;,\n                      children: [],\n                      label: &quot;二级 1-2-2&quot;\n                    }\n                  ]\n                }\n              ]\n            },\n          ],\n          toData:[]\n        }\n      },\n      methods:{\n        // 切换模式 现有树形穿梭框模式transfer 和通讯录模式addressList\n        changeMode() {\n          if (this.mode == &quot;transfer&quot;) {\n            this.mode = &quot;addressList&quot;;\n          } else {\n            this.mode = &quot;transfer&quot;;\n          }\n        },\n        // 监听穿梭框组件添加\n        add(fromData,toData,obj){\n          // 树形穿梭框模式transfer时，返回参数为左侧树移动后数据、右侧树移动后数据、移动的        {keys,nodes,halfKeys,halfNodes}对象\n          // 通讯录模式addressList时，返回参数为右侧收件人列表、右侧抄送人列表、右侧密送人列表\n          console.log(&quot;fromData:&quot;, fromData);\n          console.log(&quot;toData:&quot;, toData);\n          console.log(&quot;obj:&quot;, obj);\n        },\n        // 监听穿梭框组件移除\n        remove(fromData,toData,obj){\n          // 树形穿梭框模式transfer时，返回参数为左侧树移动后数据、右侧树移动后数据、移动的{keys,nodes,halfKeys,halfNodes}对象\n          // 通讯录模式addressList时，返回参数为右侧收件人列表、右侧抄送人列表、右侧密送人列表\n          console.log(&quot;fromData:&quot;, fromData);\n          console.log(&quot;toData:&quot;, toData);\n          console.log(&quot;obj:&quot;, obj);\n        }\n      },\n      comporents:{ treeTransfer } // 注册\n    }\n  &lt;/script&gt;\n  &lt;style&gt;\n  ...\n  &lt;/style&gt;</code></pre><h1 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h1><hr>\n<p>参数：width 说明：宽度 类型：String 必填：false 默认：100% 补充：建议在外部盒子设定宽度和位置<br>参数：height 说明：高度 类型：String 必填：false 默认：320px<br>参数：title 说明：标题 类型：Array 必填：false 默认：[“源列表”, “目标列表”]<br>参数：button_text 说明：按钮名字 类型：Array 必填：false 默认：空<br>参数：from_data 说明：源数据 类型：Array 必填：true 补充：数据格式同element-ui tree组件，但必须有id和pid<br>参数：to_data 说明：目标数据 类型：Array 必填：true 补充：数据格式同element-ui tree组件，但必须有id和pid<br>参数：defaultProps 说明：配置项-同el-tree中props 必填： false 补充：用法和el-tree的props一样<br>参数：node_key 说明：自定义node-key的值，默认为id 必填：false 补充：必须与treedata数据内的id参数名一致，必须唯一<br>参数：pid 说明：自定义pid的参数名，默认为”pid” 必填：false 补充：有网友提出后台给的字段名不叫pid，因此增加自定义支持<br>参数：leafOnly 说明：是否只返回叶子节点 类型：Boolean 必填：false 补充：默认false，如果你只需要返回的末端子节点可使用此参数<br>参数：filter 说明：是否开启筛选功能 类型：Boolean 必填：false<br>参数：openAll 说明：是否默认展开全部 类型：Boolean 必填：false<br>参数：renderContent 说明：自定义树节点 类型：Function 必填：false 补充：用法同element-ui tree<br>参数：mode 说明：设置模式，字段可选值为transfer|addressList 类型：String 必填：false 补充：mode默认为transfer模式，即树形穿梭框模式，可配置字段为addressList改为通讯录模式，通讯录模式时按钮不可自定义名字，如要自定义标题名在title数组传入四个值即可，addressList模式时标题默认为通讯录、收件人、抄送人、密送人<br>参数：transferOpenNode 说明：穿梭后是否展开穿梭的节点 类型：Boolean 必填：false 补充：默认为true即展开穿梭的节点，便于视觉查看，增加此参数是因为数据量大时展开会有明显卡顿问题，但注意，如此参数设置为false则穿梭后不展开，毕竟无法确定第几层就会有庞大数据<br>参数：defaultCheckedKeys 说明：默认展开节点 类型：Array 必填：false 补充：只匹配初始时默认节点，不会在你操作后动态改变默认节点<br>参数：placeholder 说明：设置搜索框提示语 类型：String 必填：false 补充：默认为请输入关键词进行筛选<br>参数：defaultTransfer 说明：是否自动穿梭一次默认选中defaultCheckedKeys的节点 类型：Boolean 必填：false 补充：默认false，用来满足用户不想将数据拆分成fromData和toData的需求<br>参数：arrayToTree 说明：是否开启一维数组转化为树形结构 类型：Boolean 必填：false 补充：数据必须存在根节点，并且不会断节，数据格式详见github上app.vue，根据id、pid对应关系转化，存在一定的性能问题<br>参数：addressOptions 说明：通讯录模式配置项{num: Number, suffix: String, connector: String} 类型：Object 必填：false 补充：num-&gt; 所需右侧通讯录个数,默认3 suffix-&gt; label后想要拼接的字段（如id，即取此条数据的id拼接在后方）默认suffix connector -&gt; 连接符（字符串）默认-<br>参数：lazy 说明：是否启用懒加载 类型：Boolean 必填：false 补充：默认false，效果动el-tree懒加载，不可和openAll或默认展开同时使用<br>参数：lazyFn 说明：懒加载的回调函数 类型：Function 必填：true 补充：当适用lazy时必须传入回调函数，示例:lazyFn=’loadNode’,返回参数loadNode(node, resolve, from), node-&gt;当前展开节点node，resolve-&gt;懒加载resolve，from -&gt; left|right 表示回调来自左侧|右侧<br>事件：addBtn 说明：点击添加按钮时触发的事件 回调参数：function(fromData,toData,obj),树形穿梭框transfer模式分别为1.移动后左侧数据，2.移动后右侧数据，3.移动的节点keys、nodes、halfKeys、halfNodes对象；通讯录addressList模式时返回参数为右侧收件人列表、右侧抄送人列表、右侧密送人列表<br>事件：removeBtn 说明：点击移除按钮时触发的事件 回调参数：function(fromData,toData,obj),树形穿梭框transfer模式分别为1.移动后左侧数据，2.移动后右侧数据，3.移动的节点keys、nodes、halfKeys、halfNodes对象；通讯录addressList模式时返回参数为右侧收件人列表、右侧抄送人列表、右侧密送人列表<br>事件：left-check-change 说明：左侧源数据勾选事件 回调参数：function(nodeObj, treeObj)见el-tree组件check事件返回值<br>事件：right-check-change 说明：右侧目标数据勾选事件 回调参数：function(nodeObj, treeObj)见el-tree组件check事件返回值<br>Slot：left-footer, right-footer 说明：穿梭框左侧、右侧底部slot<br>Slot: title-left, title-right 说明：穿梭框标题区左侧、右侧自定义内容</p>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28854182&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h1><hr>\n<p>一个基于vue和element-ui的树形穿梭框组件</p>\n<p><strong>el-tree-transfer</strong></p>\n<blockquote>\n<p>el-tree-fransfer是一个基于VUE和element-ui的树形穿梭框组件，使用前请确认已经引入element-ui！ 此组件功能类似于element-ui的transfer组件，但是里面的数据是树形结构！ 实际上，el-tree-transfer依赖的element-ui组件分别是Checkbox 多选框，Button 按钮，和最主要的Tree 树形控件写成！并非是在element-ui的穿梭框组件上的扩展，而仅仅是参照了其外观样式和功能。ui完全按照element-ui风格。<br>注意：使用此插件时默认你已经引入了element-ui的button，check-box，tree组件！<br>第一层数据的 pid 请设定为 0！！<br>id推荐为string，但也可以是number，请不要混用，id不能重复！</p>\n</blockquote>\n<p><strong>1.先npm下载插件</strong><br>     1. npm install el-tree-transfer –save<br>      或<br>     2.npm i el-tree-transfer -S</p>\n<p>然后你可以像使用普通组件一样使用el-tree-transfer</p>\n<pre><code>  &lt;template&gt;\n      &lt;div&gt;\n      // 你的代码\n      ...\n      // 使用树形穿梭框组件\n      &lt;tree-transfer :title=&quot;title&quot; :from_data=&#39;fromData&#39; :to_data=&#39;toData&#39; :defaultProps=&quot;{label:&#39;label&#39;}&quot;             @addBtn=&#39;add&#39; @removeBtn=&#39;remove&#39; :mode=&#39;mode&#39; height=&#39;540px&#39; filter openAll&gt;\n      &lt;/tree-transfer&gt;\n    &lt;/div&gt;\n  &lt;/template&gt;  \n  &lt;script&gt;\n  import treeTransfer from &#39;el-tree-transfer&#39; // 引入\n\n    export defult {\n      data(){\n        return:{\n          mode: &quot;transfer&quot;, // transfer addressList\n          fromData:[\n            {\n              id: &quot;1&quot;,\n              pid: 0,\n              label: &quot;一级 1&quot;,\n              children: [\n                {\n                  id: &quot;1-1&quot;,\n                  pid: &quot;1&quot;,\n                  label: &quot;二级 1-1&quot;,\n                  children: []\n                },\n                {\n                  id: &quot;1-2&quot;,\n                  pid: &quot;1&quot;,\n                  label: &quot;二级 1-2&quot;,\n                  children: [\n                    {\n                      id: &quot;1-2-1&quot;,\n                      pid: &quot;1-2&quot;,\n                      children: [],\n                      label: &quot;二级 1-2-1&quot;\n                    },\n                    {\n                      id: &quot;1-2-2&quot;,\n                      pid: &quot;1-2&quot;,\n                      children: [],\n                      label: &quot;二级 1-2-2&quot;\n                    }\n                  ]\n                }\n              ]\n            },\n          ],\n          toData:[]\n        }\n      },\n      methods:{\n        // 切换模式 现有树形穿梭框模式transfer 和通讯录模式addressList\n        changeMode() {\n          if (this.mode == &quot;transfer&quot;) {\n            this.mode = &quot;addressList&quot;;\n          } else {\n            this.mode = &quot;transfer&quot;;\n          }\n        },\n        // 监听穿梭框组件添加\n        add(fromData,toData,obj){\n          // 树形穿梭框模式transfer时，返回参数为左侧树移动后数据、右侧树移动后数据、移动的        {keys,nodes,halfKeys,halfNodes}对象\n          // 通讯录模式addressList时，返回参数为右侧收件人列表、右侧抄送人列表、右侧密送人列表\n          console.log(&quot;fromData:&quot;, fromData);\n          console.log(&quot;toData:&quot;, toData);\n          console.log(&quot;obj:&quot;, obj);\n        },\n        // 监听穿梭框组件移除\n        remove(fromData,toData,obj){\n          // 树形穿梭框模式transfer时，返回参数为左侧树移动后数据、右侧树移动后数据、移动的{keys,nodes,halfKeys,halfNodes}对象\n          // 通讯录模式addressList时，返回参数为右侧收件人列表、右侧抄送人列表、右侧密送人列表\n          console.log(&quot;fromData:&quot;, fromData);\n          console.log(&quot;toData:&quot;, toData);\n          console.log(&quot;obj:&quot;, obj);\n        }\n      },\n      comporents:{ treeTransfer } // 注册\n    }\n  &lt;/script&gt;\n  &lt;style&gt;\n  ...\n  &lt;/style&gt;</code></pre><h1 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h1><hr>\n<p>参数：width 说明：宽度 类型：String 必填：false 默认：100% 补充：建议在外部盒子设定宽度和位置<br>参数：height 说明：高度 类型：String 必填：false 默认：320px<br>参数：title 说明：标题 类型：Array 必填：false 默认：[“源列表”, “目标列表”]<br>参数：button_text 说明：按钮名字 类型：Array 必填：false 默认：空<br>参数：from_data 说明：源数据 类型：Array 必填：true 补充：数据格式同element-ui tree组件，但必须有id和pid<br>参数：to_data 说明：目标数据 类型：Array 必填：true 补充：数据格式同element-ui tree组件，但必须有id和pid<br>参数：defaultProps 说明：配置项-同el-tree中props 必填： false 补充：用法和el-tree的props一样<br>参数：node_key 说明：自定义node-key的值，默认为id 必填：false 补充：必须与treedata数据内的id参数名一致，必须唯一<br>参数：pid 说明：自定义pid的参数名，默认为”pid” 必填：false 补充：有网友提出后台给的字段名不叫pid，因此增加自定义支持<br>参数：leafOnly 说明：是否只返回叶子节点 类型：Boolean 必填：false 补充：默认false，如果你只需要返回的末端子节点可使用此参数<br>参数：filter 说明：是否开启筛选功能 类型：Boolean 必填：false<br>参数：openAll 说明：是否默认展开全部 类型：Boolean 必填：false<br>参数：renderContent 说明：自定义树节点 类型：Function 必填：false 补充：用法同element-ui tree<br>参数：mode 说明：设置模式，字段可选值为transfer|addressList 类型：String 必填：false 补充：mode默认为transfer模式，即树形穿梭框模式，可配置字段为addressList改为通讯录模式，通讯录模式时按钮不可自定义名字，如要自定义标题名在title数组传入四个值即可，addressList模式时标题默认为通讯录、收件人、抄送人、密送人<br>参数：transferOpenNode 说明：穿梭后是否展开穿梭的节点 类型：Boolean 必填：false 补充：默认为true即展开穿梭的节点，便于视觉查看，增加此参数是因为数据量大时展开会有明显卡顿问题，但注意，如此参数设置为false则穿梭后不展开，毕竟无法确定第几层就会有庞大数据<br>参数：defaultCheckedKeys 说明：默认展开节点 类型：Array 必填：false 补充：只匹配初始时默认节点，不会在你操作后动态改变默认节点<br>参数：placeholder 说明：设置搜索框提示语 类型：String 必填：false 补充：默认为请输入关键词进行筛选<br>参数：defaultTransfer 说明：是否自动穿梭一次默认选中defaultCheckedKeys的节点 类型：Boolean 必填：false 补充：默认false，用来满足用户不想将数据拆分成fromData和toData的需求<br>参数：arrayToTree 说明：是否开启一维数组转化为树形结构 类型：Boolean 必填：false 补充：数据必须存在根节点，并且不会断节，数据格式详见github上app.vue，根据id、pid对应关系转化，存在一定的性能问题<br>参数：addressOptions 说明：通讯录模式配置项{num: Number, suffix: String, connector: String} 类型：Object 必填：false 补充：num-&gt; 所需右侧通讯录个数,默认3 suffix-&gt; label后想要拼接的字段（如id，即取此条数据的id拼接在后方）默认suffix connector -&gt; 连接符（字符串）默认-<br>参数：lazy 说明：是否启用懒加载 类型：Boolean 必填：false 补充：默认false，效果动el-tree懒加载，不可和openAll或默认展开同时使用<br>参数：lazyFn 说明：懒加载的回调函数 类型：Function 必填：true 补充：当适用lazy时必须传入回调函数，示例:lazyFn=’loadNode’,返回参数loadNode(node, resolve, from), node-&gt;当前展开节点node，resolve-&gt;懒加载resolve，from -&gt; left|right 表示回调来自左侧|右侧<br>事件：addBtn 说明：点击添加按钮时触发的事件 回调参数：function(fromData,toData,obj),树形穿梭框transfer模式分别为1.移动后左侧数据，2.移动后右侧数据，3.移动的节点keys、nodes、halfKeys、halfNodes对象；通讯录addressList模式时返回参数为右侧收件人列表、右侧抄送人列表、右侧密送人列表<br>事件：removeBtn 说明：点击移除按钮时触发的事件 回调参数：function(fromData,toData,obj),树形穿梭框transfer模式分别为1.移动后左侧数据，2.移动后右侧数据，3.移动的节点keys、nodes、halfKeys、halfNodes对象；通讯录addressList模式时返回参数为右侧收件人列表、右侧抄送人列表、右侧密送人列表<br>事件：left-check-change 说明：左侧源数据勾选事件 回调参数：function(nodeObj, treeObj)见el-tree组件check事件返回值<br>事件：right-check-change 说明：右侧目标数据勾选事件 回调参数：function(nodeObj, treeObj)见el-tree组件check事件返回值<br>Slot：left-footer, right-footer 说明：穿梭框左侧、右侧底部slot<br>Slot: title-left, title-right 说明：穿梭框标题区左侧、右侧自定义内容</p>\n"},{"title":"VUE中使用echarts配合canvas绘制图例下载","date":"2019-10-24T05:06:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# VUE中使用echarts配合canvas绘制图例\n---\n\n\n## 什么是[canvas](https://www.runoob.com/html/html5-canvas.html)?\nHTML5 `<canvas>` 元素用于图形的绘制，通过脚本 (通常是JavaScript)来完成.\n`<canvas>` 标签只是图形容器，您必须使用脚本来绘制图形。\n你可以通过多种方法使用 canvas 绘制路径,盒、圆、字符以及添加图像。\n\n\n## 添加图例\n\n  **html**\n\n    <img src=\"../../../static/img/xx.png\" id=\"zhinanzhen\" alt=\"指南针\" class=\"NS\" v-if=\"NSShow\" >\n    <img src=\"../../../static/img/xx.png\" id=\"bilichi\" alt class=\"blc\" v-if=\"NSShow\" />\n\n  **js**\n\n        //点击下载\n        downloadImg() {\n        let canvas = document.getElementsByTagName('canvas')[0]; // 获取地图元素\n        let tempcanvas = document.createElement('canvas');  // 创建地图元素\n        tempcanvas.width = 700;\n        tempcanvas.height = canvas.height;\n        // tempcanvas.style.backgroundColor = '#fff'\n        let ctx = tempcanvas.getContext('2d'); \n\n\n        ctx.drawImage(canvas, (canvas.width - 700) / 2, 0, 700, canvas.height, 0, 0, 700, canvas.height);\n        //context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);\n        let img1 = document.getElementById(\"zhinanzhen\"); \n        img1.setAttribute('crossOrigin', 'anonymous'); // 图片跨域\n        ctx.drawImage(img1, 550, 100, 82, 82)\n        //ctx.drawImage(img1, 左右, 上下, 长, 宽)\n        let img2 = document.getElementById(\"bilichi\");\n        img2.setAttribute('crossOrigin', 'anonymous');\n        ctx.drawImage(img2, 50, canvas.height - 32, 165, 32)\n\n\n        let url = tempcanvas.toDataURL(\"image/png\"); // 生成图片 第二个参数0-1 默认0.94\n        // let url=tempcanvas.toDataURL(\"image/jpeg\", 1.0);\n\n        var oA = document.createElement(\"a\");\n        oA.download = '';// 设置下载的文件名，默认是'下载'\n        oA.href = url;\n        document.body.appendChild(oA);\n        oA.click();\n        oA.remove(); // 下载之后把创建的元素删除\n         }\n         // 绘制底图 \n\n        drawMap() {\n        let _this = this\n        this.$echarts.registerMap('maps', china);\n        mapcontainerPro ? mapcontainerPro.dispose() : ''\n        mapcontainerPro = this.$echarts.init(document.getElementById('mapcontainerPro'));\n        mapcontainerPro.setOption({   \n          title: [{\n            text: this.imgTitle,\n            left: 'center',\n            top: '3%',\n            textStyle: {\n              color: 'black',\n              fontSize: 16\n            }\n          }, {\n            text: this.unit,\n            left: '34%',\n            bottom: '22%',\n            textStyle: {\n              fontSize: 16,\n              fontWeight: 'bold'\n            }\n          }],\n          tooltip: {\n            show: true,\n            formatter: '{b0}: {c0}'\n          },\n          toolbox: {\n            show: false,\n            feature: {\n              dataView: {},\n              // saveAsImage: {\n              //   show: true,\n              //   excludeComponents: ['toolbox'],\n              //   pixelRatio: 2\n              // }\n            }\n          },\n          color: ['#5B9CD6'],\n          visualMap: {            // 图例\n            pieces: this.pieces,\n            inverse: false,       // 图例排序\n            orient: 'vertical', //图例方向\n            left: '34%',\n            top: '78%',\n            // min: 0,//最小\n            // max: this.range4,//最大\n            // splitNumber: 4,//共分5层\n            color: this.vColor,//颜色从高到低依次渐变\n            textStyle: {\n              fontSize: 16\n              // color: '#00000',\n              //text:'9jfhfhn'\n            },\n          },\n          series: [\n            {\n              name: '全国地图',\n              type: 'map',\n              aspectScale: 0.9, //地图长宽比\n              zoom: 1.1, //缩放比例\n              top: '15%',\n              left: 'center',\n              label: {\n                normal: {\n                  fontSize: 12\n                }\n              },\n              map: 'maps', // 自定义扩展图表类型\n              symbolSize: function (val) {\n                return val[2] / 10;\n              },\n              // label:{\n              //   show:true,\n              //   fontSize:12,\n              //   offset:[30,40]\n              // },\n              itemStyle: {\n                normal: {\n                  label: {\n                    show: true,\n                    fontWeight: \"bolder\",\n                    fontSize: 12\n                  },\n                  areaColor: 'blue',\n                  borderColor: 'black',\n                  borderWidth: 0\n                },\n                emphasis: { label: { show: true } },\n              },\n              data: this.showData\n            }\n          ]\n        });\n      }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/VUE中使用echarts配合canvas绘制图例.md","raw":"---\ntitle: VUE中使用echarts配合canvas绘制图例下载\ndate: 2019-10-24 13:06:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n- 方法\ncategories:\n- 方法\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# VUE中使用echarts配合canvas绘制图例\n---\n\n\n## 什么是[canvas](https://www.runoob.com/html/html5-canvas.html)?\nHTML5 `<canvas>` 元素用于图形的绘制，通过脚本 (通常是JavaScript)来完成.\n`<canvas>` 标签只是图形容器，您必须使用脚本来绘制图形。\n你可以通过多种方法使用 canvas 绘制路径,盒、圆、字符以及添加图像。\n\n\n## 添加图例\n\n  **html**\n\n    <img src=\"../../../static/img/xx.png\" id=\"zhinanzhen\" alt=\"指南针\" class=\"NS\" v-if=\"NSShow\" >\n    <img src=\"../../../static/img/xx.png\" id=\"bilichi\" alt class=\"blc\" v-if=\"NSShow\" />\n\n  **js**\n\n        //点击下载\n        downloadImg() {\n        let canvas = document.getElementsByTagName('canvas')[0]; // 获取地图元素\n        let tempcanvas = document.createElement('canvas');  // 创建地图元素\n        tempcanvas.width = 700;\n        tempcanvas.height = canvas.height;\n        // tempcanvas.style.backgroundColor = '#fff'\n        let ctx = tempcanvas.getContext('2d'); \n\n\n        ctx.drawImage(canvas, (canvas.width - 700) / 2, 0, 700, canvas.height, 0, 0, 700, canvas.height);\n        //context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);\n        let img1 = document.getElementById(\"zhinanzhen\"); \n        img1.setAttribute('crossOrigin', 'anonymous'); // 图片跨域\n        ctx.drawImage(img1, 550, 100, 82, 82)\n        //ctx.drawImage(img1, 左右, 上下, 长, 宽)\n        let img2 = document.getElementById(\"bilichi\");\n        img2.setAttribute('crossOrigin', 'anonymous');\n        ctx.drawImage(img2, 50, canvas.height - 32, 165, 32)\n\n\n        let url = tempcanvas.toDataURL(\"image/png\"); // 生成图片 第二个参数0-1 默认0.94\n        // let url=tempcanvas.toDataURL(\"image/jpeg\", 1.0);\n\n        var oA = document.createElement(\"a\");\n        oA.download = '';// 设置下载的文件名，默认是'下载'\n        oA.href = url;\n        document.body.appendChild(oA);\n        oA.click();\n        oA.remove(); // 下载之后把创建的元素删除\n         }\n         // 绘制底图 \n\n        drawMap() {\n        let _this = this\n        this.$echarts.registerMap('maps', china);\n        mapcontainerPro ? mapcontainerPro.dispose() : ''\n        mapcontainerPro = this.$echarts.init(document.getElementById('mapcontainerPro'));\n        mapcontainerPro.setOption({   \n          title: [{\n            text: this.imgTitle,\n            left: 'center',\n            top: '3%',\n            textStyle: {\n              color: 'black',\n              fontSize: 16\n            }\n          }, {\n            text: this.unit,\n            left: '34%',\n            bottom: '22%',\n            textStyle: {\n              fontSize: 16,\n              fontWeight: 'bold'\n            }\n          }],\n          tooltip: {\n            show: true,\n            formatter: '{b0}: {c0}'\n          },\n          toolbox: {\n            show: false,\n            feature: {\n              dataView: {},\n              // saveAsImage: {\n              //   show: true,\n              //   excludeComponents: ['toolbox'],\n              //   pixelRatio: 2\n              // }\n            }\n          },\n          color: ['#5B9CD6'],\n          visualMap: {            // 图例\n            pieces: this.pieces,\n            inverse: false,       // 图例排序\n            orient: 'vertical', //图例方向\n            left: '34%',\n            top: '78%',\n            // min: 0,//最小\n            // max: this.range4,//最大\n            // splitNumber: 4,//共分5层\n            color: this.vColor,//颜色从高到低依次渐变\n            textStyle: {\n              fontSize: 16\n              // color: '#00000',\n              //text:'9jfhfhn'\n            },\n          },\n          series: [\n            {\n              name: '全国地图',\n              type: 'map',\n              aspectScale: 0.9, //地图长宽比\n              zoom: 1.1, //缩放比例\n              top: '15%',\n              left: 'center',\n              label: {\n                normal: {\n                  fontSize: 12\n                }\n              },\n              map: 'maps', // 自定义扩展图表类型\n              symbolSize: function (val) {\n                return val[2] / 10;\n              },\n              // label:{\n              //   show:true,\n              //   fontSize:12,\n              //   offset:[30,40]\n              // },\n              itemStyle: {\n                normal: {\n                  label: {\n                    show: true,\n                    fontWeight: \"bolder\",\n                    fontSize: 12\n                  },\n                  areaColor: 'blue',\n                  borderColor: 'black',\n                  borderWidth: 0\n                },\n                emphasis: { label: { show: true } },\n              },\n              data: this.showData\n            }\n          ]\n        });\n      }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"VUE中使用echarts配合canvas绘制图例","published":1,"updated":"2020-05-28T07:51:13.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckari24y2000y5sjohjyelizz","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"VUE中使用echarts配合canvas绘制图例\"><a href=\"#VUE中使用echarts配合canvas绘制图例\" class=\"headerlink\" title=\"VUE中使用echarts配合canvas绘制图例\"></a>VUE中使用echarts配合canvas绘制图例</h1><hr>\n<h2 id=\"什么是canvas\"><a href=\"#什么是canvas\" class=\"headerlink\" title=\"什么是canvas?\"></a>什么是<a href=\"https://www.runoob.com/html/html5-canvas.html\" target=\"_blank\" rel=\"noopener\">canvas</a>?</h2><p>HTML5 <code>&lt;canvas&gt;</code> 元素用于图形的绘制，通过脚本 (通常是JavaScript)来完成.<br><code>&lt;canvas&gt;</code> 标签只是图形容器，您必须使用脚本来绘制图形。<br>你可以通过多种方法使用 canvas 绘制路径,盒、圆、字符以及添加图像。</p>\n<h2 id=\"添加图例\"><a href=\"#添加图例\" class=\"headerlink\" title=\"添加图例\"></a>添加图例</h2><p>  <strong>html</strong></p>\n<pre><code>&lt;img src=&quot;../../../static/img/xx.png&quot; id=&quot;zhinanzhen&quot; alt=&quot;指南针&quot; class=&quot;NS&quot; v-if=&quot;NSShow&quot; &gt;\n&lt;img src=&quot;../../../static/img/xx.png&quot; id=&quot;bilichi&quot; alt class=&quot;blc&quot; v-if=&quot;NSShow&quot; /&gt;</code></pre><p>  <strong>js</strong></p>\n<pre><code>    //点击下载\n    downloadImg() {\n    let canvas = document.getElementsByTagName(&#39;canvas&#39;)[0]; // 获取地图元素\n    let tempcanvas = document.createElement(&#39;canvas&#39;);  // 创建地图元素\n    tempcanvas.width = 700;\n    tempcanvas.height = canvas.height;\n    // tempcanvas.style.backgroundColor = &#39;#fff&#39;\n    let ctx = tempcanvas.getContext(&#39;2d&#39;); \n\n\n    ctx.drawImage(canvas, (canvas.width - 700) / 2, 0, 700, canvas.height, 0, 0, 700, canvas.height);\n    //context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);\n    let img1 = document.getElementById(&quot;zhinanzhen&quot;); \n    img1.setAttribute(&#39;crossOrigin&#39;, &#39;anonymous&#39;); // 图片跨域\n    ctx.drawImage(img1, 550, 100, 82, 82)\n    //ctx.drawImage(img1, 左右, 上下, 长, 宽)\n    let img2 = document.getElementById(&quot;bilichi&quot;);\n    img2.setAttribute(&#39;crossOrigin&#39;, &#39;anonymous&#39;);\n    ctx.drawImage(img2, 50, canvas.height - 32, 165, 32)\n\n\n    let url = tempcanvas.toDataURL(&quot;image/png&quot;); // 生成图片 第二个参数0-1 默认0.94\n    // let url=tempcanvas.toDataURL(&quot;image/jpeg&quot;, 1.0);\n\n    var oA = document.createElement(&quot;a&quot;);\n    oA.download = &#39;&#39;;// 设置下载的文件名，默认是&#39;下载&#39;\n    oA.href = url;\n    document.body.appendChild(oA);\n    oA.click();\n    oA.remove(); // 下载之后把创建的元素删除\n     }\n     // 绘制底图 \n\n    drawMap() {\n    let _this = this\n    this.$echarts.registerMap(&#39;maps&#39;, china);\n    mapcontainerPro ? mapcontainerPro.dispose() : &#39;&#39;\n    mapcontainerPro = this.$echarts.init(document.getElementById(&#39;mapcontainerPro&#39;));\n    mapcontainerPro.setOption({   \n      title: [{\n        text: this.imgTitle,\n        left: &#39;center&#39;,\n        top: &#39;3%&#39;,\n        textStyle: {\n          color: &#39;black&#39;,\n          fontSize: 16\n        }\n      }, {\n        text: this.unit,\n        left: &#39;34%&#39;,\n        bottom: &#39;22%&#39;,\n        textStyle: {\n          fontSize: 16,\n          fontWeight: &#39;bold&#39;\n        }\n      }],\n      tooltip: {\n        show: true,\n        formatter: &#39;{b0}: {c0}&#39;\n      },\n      toolbox: {\n        show: false,\n        feature: {\n          dataView: {},\n          // saveAsImage: {\n          //   show: true,\n          //   excludeComponents: [&#39;toolbox&#39;],\n          //   pixelRatio: 2\n          // }\n        }\n      },\n      color: [&#39;#5B9CD6&#39;],\n      visualMap: {            // 图例\n        pieces: this.pieces,\n        inverse: false,       // 图例排序\n        orient: &#39;vertical&#39;, //图例方向\n        left: &#39;34%&#39;,\n        top: &#39;78%&#39;,\n        // min: 0,//最小\n        // max: this.range4,//最大\n        // splitNumber: 4,//共分5层\n        color: this.vColor,//颜色从高到低依次渐变\n        textStyle: {\n          fontSize: 16\n          // color: &#39;#00000&#39;,\n          //text:&#39;9jfhfhn&#39;\n        },\n      },\n      series: [\n        {\n          name: &#39;全国地图&#39;,\n          type: &#39;map&#39;,\n          aspectScale: 0.9, //地图长宽比\n          zoom: 1.1, //缩放比例\n          top: &#39;15%&#39;,\n          left: &#39;center&#39;,\n          label: {\n            normal: {\n              fontSize: 12\n            }\n          },\n          map: &#39;maps&#39;, // 自定义扩展图表类型\n          symbolSize: function (val) {\n            return val[2] / 10;\n          },\n          // label:{\n          //   show:true,\n          //   fontSize:12,\n          //   offset:[30,40]\n          // },\n          itemStyle: {\n            normal: {\n              label: {\n                show: true,\n                fontWeight: &quot;bolder&quot;,\n                fontSize: 12\n              },\n              areaColor: &#39;blue&#39;,\n              borderColor: &#39;black&#39;,\n              borderWidth: 0\n            },\n            emphasis: { label: { show: true } },\n          },\n          data: this.showData\n        }\n      ]\n    });\n  }</code></pre>","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"VUE中使用echarts配合canvas绘制图例\"><a href=\"#VUE中使用echarts配合canvas绘制图例\" class=\"headerlink\" title=\"VUE中使用echarts配合canvas绘制图例\"></a>VUE中使用echarts配合canvas绘制图例</h1><hr>\n<h2 id=\"什么是canvas\"><a href=\"#什么是canvas\" class=\"headerlink\" title=\"什么是canvas?\"></a>什么是<a href=\"https://www.runoob.com/html/html5-canvas.html\" target=\"_blank\" rel=\"noopener\">canvas</a>?</h2><p>HTML5 <code>&lt;canvas&gt;</code> 元素用于图形的绘制，通过脚本 (通常是JavaScript)来完成.<br><code>&lt;canvas&gt;</code> 标签只是图形容器，您必须使用脚本来绘制图形。<br>你可以通过多种方法使用 canvas 绘制路径,盒、圆、字符以及添加图像。</p>\n<h2 id=\"添加图例\"><a href=\"#添加图例\" class=\"headerlink\" title=\"添加图例\"></a>添加图例</h2><p>  <strong>html</strong></p>\n<pre><code>&lt;img src=&quot;../../../static/img/xx.png&quot; id=&quot;zhinanzhen&quot; alt=&quot;指南针&quot; class=&quot;NS&quot; v-if=&quot;NSShow&quot; &gt;\n&lt;img src=&quot;../../../static/img/xx.png&quot; id=&quot;bilichi&quot; alt class=&quot;blc&quot; v-if=&quot;NSShow&quot; /&gt;</code></pre><p>  <strong>js</strong></p>\n<pre><code>    //点击下载\n    downloadImg() {\n    let canvas = document.getElementsByTagName(&#39;canvas&#39;)[0]; // 获取地图元素\n    let tempcanvas = document.createElement(&#39;canvas&#39;);  // 创建地图元素\n    tempcanvas.width = 700;\n    tempcanvas.height = canvas.height;\n    // tempcanvas.style.backgroundColor = &#39;#fff&#39;\n    let ctx = tempcanvas.getContext(&#39;2d&#39;); \n\n\n    ctx.drawImage(canvas, (canvas.width - 700) / 2, 0, 700, canvas.height, 0, 0, 700, canvas.height);\n    //context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);\n    let img1 = document.getElementById(&quot;zhinanzhen&quot;); \n    img1.setAttribute(&#39;crossOrigin&#39;, &#39;anonymous&#39;); // 图片跨域\n    ctx.drawImage(img1, 550, 100, 82, 82)\n    //ctx.drawImage(img1, 左右, 上下, 长, 宽)\n    let img2 = document.getElementById(&quot;bilichi&quot;);\n    img2.setAttribute(&#39;crossOrigin&#39;, &#39;anonymous&#39;);\n    ctx.drawImage(img2, 50, canvas.height - 32, 165, 32)\n\n\n    let url = tempcanvas.toDataURL(&quot;image/png&quot;); // 生成图片 第二个参数0-1 默认0.94\n    // let url=tempcanvas.toDataURL(&quot;image/jpeg&quot;, 1.0);\n\n    var oA = document.createElement(&quot;a&quot;);\n    oA.download = &#39;&#39;;// 设置下载的文件名，默认是&#39;下载&#39;\n    oA.href = url;\n    document.body.appendChild(oA);\n    oA.click();\n    oA.remove(); // 下载之后把创建的元素删除\n     }\n     // 绘制底图 \n\n    drawMap() {\n    let _this = this\n    this.$echarts.registerMap(&#39;maps&#39;, china);\n    mapcontainerPro ? mapcontainerPro.dispose() : &#39;&#39;\n    mapcontainerPro = this.$echarts.init(document.getElementById(&#39;mapcontainerPro&#39;));\n    mapcontainerPro.setOption({   \n      title: [{\n        text: this.imgTitle,\n        left: &#39;center&#39;,\n        top: &#39;3%&#39;,\n        textStyle: {\n          color: &#39;black&#39;,\n          fontSize: 16\n        }\n      }, {\n        text: this.unit,\n        left: &#39;34%&#39;,\n        bottom: &#39;22%&#39;,\n        textStyle: {\n          fontSize: 16,\n          fontWeight: &#39;bold&#39;\n        }\n      }],\n      tooltip: {\n        show: true,\n        formatter: &#39;{b0}: {c0}&#39;\n      },\n      toolbox: {\n        show: false,\n        feature: {\n          dataView: {},\n          // saveAsImage: {\n          //   show: true,\n          //   excludeComponents: [&#39;toolbox&#39;],\n          //   pixelRatio: 2\n          // }\n        }\n      },\n      color: [&#39;#5B9CD6&#39;],\n      visualMap: {            // 图例\n        pieces: this.pieces,\n        inverse: false,       // 图例排序\n        orient: &#39;vertical&#39;, //图例方向\n        left: &#39;34%&#39;,\n        top: &#39;78%&#39;,\n        // min: 0,//最小\n        // max: this.range4,//最大\n        // splitNumber: 4,//共分5层\n        color: this.vColor,//颜色从高到低依次渐变\n        textStyle: {\n          fontSize: 16\n          // color: &#39;#00000&#39;,\n          //text:&#39;9jfhfhn&#39;\n        },\n      },\n      series: [\n        {\n          name: &#39;全国地图&#39;,\n          type: &#39;map&#39;,\n          aspectScale: 0.9, //地图长宽比\n          zoom: 1.1, //缩放比例\n          top: &#39;15%&#39;,\n          left: &#39;center&#39;,\n          label: {\n            normal: {\n              fontSize: 12\n            }\n          },\n          map: &#39;maps&#39;, // 自定义扩展图表类型\n          symbolSize: function (val) {\n            return val[2] / 10;\n          },\n          // label:{\n          //   show:true,\n          //   fontSize:12,\n          //   offset:[30,40]\n          // },\n          itemStyle: {\n            normal: {\n              label: {\n                show: true,\n                fontWeight: &quot;bolder&quot;,\n                fontSize: 12\n              },\n              areaColor: &#39;blue&#39;,\n              borderColor: &#39;black&#39;,\n              borderWidth: 0\n            },\n            emphasis: { label: { show: true } },\n          },\n          data: this.showData\n        }\n      ]\n    });\n  }</code></pre>"},{"title":"TS基础总结","date":"2019-10-15T06:00:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<!-- <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe> -->\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28854182&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# ts 基础总结\n\n---\n\n**ts 有什么用**\n\n类型检查, 拥抱 es6，支持部分的 esNext 草案，直接编译到原生 js、引入新的语法糖\n\n**为什么用 ts**\n\n> TypeScript 的设计目的应该是解决 JavaScript 的“痛点”：弱类型和没有命名空间，导致很难模块化，不适合开发大型程序。另外它还提供了一些语法糖来帮助大家更方便地实践面向对象的编程。\n> typescript 不仅可以约束我们的编码习惯，还能起到注释的作用，当我们看到一函数后我们立马就能知道这个函数的用法，需要传什么值，返回值是什么类型一目了然，对大型项目的维护性有很大的提升。\n\n**编译报错， 会生成编译结果么？**\n\n答案是肯定的,当然可以在 tsconfig.json 的配置， noEmitONError\n\n# 基础总结\n\n## 数据类型\n\n- boolean 、number、string、null、 undefined、 Symbol\n- undefined 和 null 类型的数据只能被赋值 undefined 和 null， 但是这个类型是所有类型的子类型\n- void 空类型\n  // undefined 和 null 是所有类型子类型，都可以赋值\n  let num: Symbol = undefined;ss\n  let num: number = undefined;\n  // undefined 类型， 只能给 undefined\n  let u: undefined = undefined;\n  let n: null = null;\n- any 和类型推断\n  // 在 ts 中，变量在声明的时候，如果没有定义其类型，会被识成默认类型\n  let str;\n  str = 'I am strgting';\n  str = 1024;\n  // 未定义类型，直接赋值\n  let num= 124;\n  // 等同于 let num:number = 124, 在后面代码如果赋予 num 一个 string 会被报错\n\n## 多个可能属性\n\n      //只能访问可能属性的共有属性\n      function getLength(param: string| number) {\n          return param.length;\n      }\n      // 会报错， 因为 length不是 sting和number类型的共有属性\n      // 技巧--》 使用类型别名\n      type possibleType = string | number;\n      function getLength(param: possibleType) {\n          return param.length;\n      }\n\n## 接口的概念\n\n- 在 ts 中，interface 包括对行为的抽象，由类去实现（implements）\n- 也包括对对象轮廓的描述\n\n## 对象 interface -》动态属性\n\n必选参数和可选参数的类型是动态属性类型的子集，所有在动态属性类型设置的时候要设置上所有类型\n\n只读属性的约束力\n注意点： 只读属性的约束力在于第一次给对象赋值的时候，而不是给属性赋值的时候 readonly 和 const 的区别： const 是变量， readonly 是属性\n\n## 接口-》抽象方法的实现\n\n      export interface ISRequest {\n        fetch(url: string, arg?: Object, callback?: Function): Promise<Object>;\n      }\n      export class SafeRequest implements ISRequest {\n            public async fetch(url: string, arg, callback?: Function): Promise<Object> {\n              return new Promise((resolve, reject) => {\n\n              })\n      }\n\n## 用接口表示数组\n\n      interface NumberArray {\n            [index: any]: number\n        }\n        let numArr: NumberArray = [1, 2, 3]\n\n## 函数的类型\n\n- 可选参数, 必须在必选参数后面\n- 参数默认值\n  function buildName(firstName: string, lastName?: string) {\n    \n   }\n- 添加默认值的参数识别为可选参数\n- 剩余参数\n\n## 类型断言\n\n## 疑惑--》 声明文件\n\n当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。\n声明文件在哪里？\n\n- 与 npm 包绑定在一起\n- npm 包的维护者并没有提供声明文件， 只能由其他人将声明文件发布到@types 里面\n- 自己写个声明文件\n\nnpm 包的声明文件 和全局变量的声明文件\n在 npm 包的声明文件中，使用 declare 不再会声明一个全局变量，而只会在当前文件中声明一个局部变量。只有在声明文件中使用 export 导出，然后在使用方 import 导入后，才会应用到这些类型声明。\n######declare global\n使用 declare global 可以在 npm 包或者 UMD 库中扩展全局变量的类型\n\n## 内置对象\n\n[内置对象查询--》点击](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\nESMAScript 提供了 Boolean、Error、Date、RegExp\n\n       interface obj = {\n            param: Function\n            param: Promise\n        }\n\n枚举--》 数据的双向映射\n\n        enum companyList= {1: 'aaa', 2: 'bbb'}\n        var companyList = {\n            1: 'aaa',\n            2: 'bbb',\n            aaa: 1,\n            bbb: 2\n        }\n\n## Vue in Typescript\n\n### 三大利器\n\n- vue-component-class\n- 方法可以直接声明为类成员方法。\n- 可以将计算属性声明为类属性访问器。\n- 默认 data 被当作类属性\n- data ， render 和 vue 的生命周期的钩子直接是类成员的方法，保留这些命名，不要冲突\n- 对于其他的配置项，例如 prop、componets 等传递给装饰器函数\n\n\n    import Vue from 'vue';\n    import Component from 'vue-componet-class';\n    Component.resgisterHooks([\n        'beforeRouteEnter'\n    ])\n    @Componnet({\n        props: {\n\n        },\n        components: {\n\n        }\n    })\n    export default class App extends Vue {\n        // aa = '';\n        // 类型推断aa是个string， 后面aa只能赋值aa类型\n        // 所以最好使用先声明后\n\n        //  data\n       public tableModelItems: Array<any>;\n       constructor() {\n           super();\n           this.tableModelItems = [];\n       }\n       // computed\n      public get filterTableData() {\n    \treturn this.tableData.filter((i: any) => i.refundStatus === 0).length\n\n    \t// 方法\n    \t// 声明周期\n\n    \t// 此时需要路由函数的生命周期钩子咋办\n    \tbeforeRouteEnterf() {\n    \t    next() // 一定要写，否则玩不下去，为什么？\n    \t}\n    }\n\n\n    }\n\n    - vue-property-decorator(依赖vue-component-class提供了更多了装饰器，代码更加显示 )\n    - @Emit\n    - @Inject\n    - @Prop\n    - @Provide\n    - @Watch\n    - vuex-class（连接了vue和vuex）\n\n    ## 还没搞定的bug\n\n### 错误--》 类型报错\n+ 添加script的类型\n      <script lang=\"ts\"></script>\n      <!--否则下面的类型报错-->\n\n### 错误之--》Vue中挂载propoty出错（如果还是爆红，重启ide）\n声明再挂载\n\n        <!--inject-->\n          import _Vue from 'vue'\n          import moment from \"moment\";\n          export default {\n            install(Vue: typeof _Vue, options: any) {\n              Vue.prototype.$moment = moment;\n              Vue.prototype.$log = () => {\n                console.log(new Date())\n              }\n            }\n          }\n        <!--types-->\n          import Vue from 'vue'\n          declare module 'vue/types/vue' {\n            interface Vue {\n              $moment: Function\n              $log: Function\n            }\n          }\n\n### ts中不能识别.vue文件\n \n **TypeScript 默认只识别 .ts 文件，不识别 .vue 文件, 乖乖的写 import Component from 'components/component.vue'**\n![](1.jpg)\n\n### vuex-class的Emit传参数给父组件报错\n\n    @emit(\"reset\")\n    reset(role, this.formData){}\n    <!--此时报错-->\n\n![](2.jpg)\n\n### 错误--> 可选参数爆红\n![](3.jpg)\n\n# 参考链接 \n + [ts的官网](https://www.tslang.cn/docs/handbook/basic-types.html)\n + [vue+ts快速上手](https://juejin.im/post/5ba75b355188255c5e66e4d3)\n + [ts通俗易懂，比较清晰的文档](https://ts.xcatliu.com/)\n + [尤大大对于ts+vue的看法](https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&mid=2247490464&idx=1&sn=0c75aaab12002c76198a8d6f183cd686&chksm=f951aee3ce2627f50a5ac6799964919e54a7298288f8bf881931d7c6769b05e302418bdb8051&scene=27#wechat_redirect)\n + [蚂蚁金服的ts实践](https://juejin.im/post/5a9c004a6fb9a028b92c9e91#heading-7)\n ......\n\n\n\n  ","source":"_posts/TS学习总结.md","raw":"---\ntitle: TS基础总结\ndate: 2019-10-15 14:00:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n  - TS\ncategories:\n  - TS\n---\n\n<div align=\"middle\">\n<!-- <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe> -->\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28854182&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# ts 基础总结\n\n---\n\n**ts 有什么用**\n\n类型检查, 拥抱 es6，支持部分的 esNext 草案，直接编译到原生 js、引入新的语法糖\n\n**为什么用 ts**\n\n> TypeScript 的设计目的应该是解决 JavaScript 的“痛点”：弱类型和没有命名空间，导致很难模块化，不适合开发大型程序。另外它还提供了一些语法糖来帮助大家更方便地实践面向对象的编程。\n> typescript 不仅可以约束我们的编码习惯，还能起到注释的作用，当我们看到一函数后我们立马就能知道这个函数的用法，需要传什么值，返回值是什么类型一目了然，对大型项目的维护性有很大的提升。\n\n**编译报错， 会生成编译结果么？**\n\n答案是肯定的,当然可以在 tsconfig.json 的配置， noEmitONError\n\n# 基础总结\n\n## 数据类型\n\n- boolean 、number、string、null、 undefined、 Symbol\n- undefined 和 null 类型的数据只能被赋值 undefined 和 null， 但是这个类型是所有类型的子类型\n- void 空类型\n  // undefined 和 null 是所有类型子类型，都可以赋值\n  let num: Symbol = undefined;ss\n  let num: number = undefined;\n  // undefined 类型， 只能给 undefined\n  let u: undefined = undefined;\n  let n: null = null;\n- any 和类型推断\n  // 在 ts 中，变量在声明的时候，如果没有定义其类型，会被识成默认类型\n  let str;\n  str = 'I am strgting';\n  str = 1024;\n  // 未定义类型，直接赋值\n  let num= 124;\n  // 等同于 let num:number = 124, 在后面代码如果赋予 num 一个 string 会被报错\n\n## 多个可能属性\n\n      //只能访问可能属性的共有属性\n      function getLength(param: string| number) {\n          return param.length;\n      }\n      // 会报错， 因为 length不是 sting和number类型的共有属性\n      // 技巧--》 使用类型别名\n      type possibleType = string | number;\n      function getLength(param: possibleType) {\n          return param.length;\n      }\n\n## 接口的概念\n\n- 在 ts 中，interface 包括对行为的抽象，由类去实现（implements）\n- 也包括对对象轮廓的描述\n\n## 对象 interface -》动态属性\n\n必选参数和可选参数的类型是动态属性类型的子集，所有在动态属性类型设置的时候要设置上所有类型\n\n只读属性的约束力\n注意点： 只读属性的约束力在于第一次给对象赋值的时候，而不是给属性赋值的时候 readonly 和 const 的区别： const 是变量， readonly 是属性\n\n## 接口-》抽象方法的实现\n\n      export interface ISRequest {\n        fetch(url: string, arg?: Object, callback?: Function): Promise<Object>;\n      }\n      export class SafeRequest implements ISRequest {\n            public async fetch(url: string, arg, callback?: Function): Promise<Object> {\n              return new Promise((resolve, reject) => {\n\n              })\n      }\n\n## 用接口表示数组\n\n      interface NumberArray {\n            [index: any]: number\n        }\n        let numArr: NumberArray = [1, 2, 3]\n\n## 函数的类型\n\n- 可选参数, 必须在必选参数后面\n- 参数默认值\n  function buildName(firstName: string, lastName?: string) {\n    \n   }\n- 添加默认值的参数识别为可选参数\n- 剩余参数\n\n## 类型断言\n\n## 疑惑--》 声明文件\n\n当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。\n声明文件在哪里？\n\n- 与 npm 包绑定在一起\n- npm 包的维护者并没有提供声明文件， 只能由其他人将声明文件发布到@types 里面\n- 自己写个声明文件\n\nnpm 包的声明文件 和全局变量的声明文件\n在 npm 包的声明文件中，使用 declare 不再会声明一个全局变量，而只会在当前文件中声明一个局部变量。只有在声明文件中使用 export 导出，然后在使用方 import 导入后，才会应用到这些类型声明。\n######declare global\n使用 declare global 可以在 npm 包或者 UMD 库中扩展全局变量的类型\n\n## 内置对象\n\n[内置对象查询--》点击](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\nESMAScript 提供了 Boolean、Error、Date、RegExp\n\n       interface obj = {\n            param: Function\n            param: Promise\n        }\n\n枚举--》 数据的双向映射\n\n        enum companyList= {1: 'aaa', 2: 'bbb'}\n        var companyList = {\n            1: 'aaa',\n            2: 'bbb',\n            aaa: 1,\n            bbb: 2\n        }\n\n## Vue in Typescript\n\n### 三大利器\n\n- vue-component-class\n- 方法可以直接声明为类成员方法。\n- 可以将计算属性声明为类属性访问器。\n- 默认 data 被当作类属性\n- data ， render 和 vue 的生命周期的钩子直接是类成员的方法，保留这些命名，不要冲突\n- 对于其他的配置项，例如 prop、componets 等传递给装饰器函数\n\n\n    import Vue from 'vue';\n    import Component from 'vue-componet-class';\n    Component.resgisterHooks([\n        'beforeRouteEnter'\n    ])\n    @Componnet({\n        props: {\n\n        },\n        components: {\n\n        }\n    })\n    export default class App extends Vue {\n        // aa = '';\n        // 类型推断aa是个string， 后面aa只能赋值aa类型\n        // 所以最好使用先声明后\n\n        //  data\n       public tableModelItems: Array<any>;\n       constructor() {\n           super();\n           this.tableModelItems = [];\n       }\n       // computed\n      public get filterTableData() {\n    \treturn this.tableData.filter((i: any) => i.refundStatus === 0).length\n\n    \t// 方法\n    \t// 声明周期\n\n    \t// 此时需要路由函数的生命周期钩子咋办\n    \tbeforeRouteEnterf() {\n    \t    next() // 一定要写，否则玩不下去，为什么？\n    \t}\n    }\n\n\n    }\n\n    - vue-property-decorator(依赖vue-component-class提供了更多了装饰器，代码更加显示 )\n    - @Emit\n    - @Inject\n    - @Prop\n    - @Provide\n    - @Watch\n    - vuex-class（连接了vue和vuex）\n\n    ## 还没搞定的bug\n\n### 错误--》 类型报错\n+ 添加script的类型\n      <script lang=\"ts\"></script>\n      <!--否则下面的类型报错-->\n\n### 错误之--》Vue中挂载propoty出错（如果还是爆红，重启ide）\n声明再挂载\n\n        <!--inject-->\n          import _Vue from 'vue'\n          import moment from \"moment\";\n          export default {\n            install(Vue: typeof _Vue, options: any) {\n              Vue.prototype.$moment = moment;\n              Vue.prototype.$log = () => {\n                console.log(new Date())\n              }\n            }\n          }\n        <!--types-->\n          import Vue from 'vue'\n          declare module 'vue/types/vue' {\n            interface Vue {\n              $moment: Function\n              $log: Function\n            }\n          }\n\n### ts中不能识别.vue文件\n \n **TypeScript 默认只识别 .ts 文件，不识别 .vue 文件, 乖乖的写 import Component from 'components/component.vue'**\n![](1.jpg)\n\n### vuex-class的Emit传参数给父组件报错\n\n    @emit(\"reset\")\n    reset(role, this.formData){}\n    <!--此时报错-->\n\n![](2.jpg)\n\n### 错误--> 可选参数爆红\n![](3.jpg)\n\n# 参考链接 \n + [ts的官网](https://www.tslang.cn/docs/handbook/basic-types.html)\n + [vue+ts快速上手](https://juejin.im/post/5ba75b355188255c5e66e4d3)\n + [ts通俗易懂，比较清晰的文档](https://ts.xcatliu.com/)\n + [尤大大对于ts+vue的看法](https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&mid=2247490464&idx=1&sn=0c75aaab12002c76198a8d6f183cd686&chksm=f951aee3ce2627f50a5ac6799964919e54a7298288f8bf881931d7c6769b05e302418bdb8051&scene=27#wechat_redirect)\n + [蚂蚁金服的ts实践](https://juejin.im/post/5a9c004a6fb9a028b92c9e91#heading-7)\n ......\n\n\n\n  ","slug":"TS学习总结","published":1,"updated":"2020-05-28T07:51:13.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckari24yb00105sjox8b4f4kw","content":"<div align=\"middle\">\n<!-- <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe> -->\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28854182&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"ts-基础总结\"><a href=\"#ts-基础总结\" class=\"headerlink\" title=\"ts 基础总结\"></a>ts 基础总结</h1><hr>\n<p><strong>ts 有什么用</strong></p>\n<p>类型检查, 拥抱 es6，支持部分的 esNext 草案，直接编译到原生 js、引入新的语法糖</p>\n<p><strong>为什么用 ts</strong></p>\n<blockquote>\n<p>TypeScript 的设计目的应该是解决 JavaScript 的“痛点”：弱类型和没有命名空间，导致很难模块化，不适合开发大型程序。另外它还提供了一些语法糖来帮助大家更方便地实践面向对象的编程。<br>typescript 不仅可以约束我们的编码习惯，还能起到注释的作用，当我们看到一函数后我们立马就能知道这个函数的用法，需要传什么值，返回值是什么类型一目了然，对大型项目的维护性有很大的提升。</p>\n</blockquote>\n<p><strong>编译报错， 会生成编译结果么？</strong></p>\n<p>答案是肯定的,当然可以在 tsconfig.json 的配置， noEmitONError</p>\n<h1 id=\"基础总结\"><a href=\"#基础总结\" class=\"headerlink\" title=\"基础总结\"></a>基础总结</h1><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><ul>\n<li>boolean 、number、string、null、 undefined、 Symbol</li>\n<li>undefined 和 null 类型的数据只能被赋值 undefined 和 null， 但是这个类型是所有类型的子类型</li>\n<li>void 空类型<br>// undefined 和 null 是所有类型子类型，都可以赋值<br>let num: Symbol = undefined;ss<br>let num: number = undefined;<br>// undefined 类型， 只能给 undefined<br>let u: undefined = undefined;<br>let n: null = null;</li>\n<li>any 和类型推断<br>// 在 ts 中，变量在声明的时候，如果没有定义其类型，会被识成默认类型<br>let str;<br>str = ‘I am strgting’;<br>str = 1024;<br>// 未定义类型，直接赋值<br>let num= 124;<br>// 等同于 let num:number = 124, 在后面代码如果赋予 num 一个 string 会被报错</li>\n</ul>\n<h2 id=\"多个可能属性\"><a href=\"#多个可能属性\" class=\"headerlink\" title=\"多个可能属性\"></a>多个可能属性</h2><pre><code>  //只能访问可能属性的共有属性\n  function getLength(param: string| number) {\n      return param.length;\n  }\n  // 会报错， 因为 length不是 sting和number类型的共有属性\n  // 技巧--》 使用类型别名\n  type possibleType = string | number;\n  function getLength(param: possibleType) {\n      return param.length;\n  }</code></pre><h2 id=\"接口的概念\"><a href=\"#接口的概念\" class=\"headerlink\" title=\"接口的概念\"></a>接口的概念</h2><ul>\n<li>在 ts 中，interface 包括对行为的抽象，由类去实现（implements）</li>\n<li>也包括对对象轮廓的描述</li>\n</ul>\n<h2 id=\"对象-interface-》动态属性\"><a href=\"#对象-interface-》动态属性\" class=\"headerlink\" title=\"对象 interface -》动态属性\"></a>对象 interface -》动态属性</h2><p>必选参数和可选参数的类型是动态属性类型的子集，所有在动态属性类型设置的时候要设置上所有类型</p>\n<p>只读属性的约束力<br>注意点： 只读属性的约束力在于第一次给对象赋值的时候，而不是给属性赋值的时候 readonly 和 const 的区别： const 是变量， readonly 是属性</p>\n<h2 id=\"接口-》抽象方法的实现\"><a href=\"#接口-》抽象方法的实现\" class=\"headerlink\" title=\"接口-》抽象方法的实现\"></a>接口-》抽象方法的实现</h2><pre><code>  export interface ISRequest {\n    fetch(url: string, arg?: Object, callback?: Function): Promise&lt;Object&gt;;\n  }\n  export class SafeRequest implements ISRequest {\n        public async fetch(url: string, arg, callback?: Function): Promise&lt;Object&gt; {\n          return new Promise((resolve, reject) =&gt; {\n\n          })\n  }</code></pre><h2 id=\"用接口表示数组\"><a href=\"#用接口表示数组\" class=\"headerlink\" title=\"用接口表示数组\"></a>用接口表示数组</h2><pre><code>  interface NumberArray {\n        [index: any]: number\n    }\n    let numArr: NumberArray = [1, 2, 3]</code></pre><h2 id=\"函数的类型\"><a href=\"#函数的类型\" class=\"headerlink\" title=\"函数的类型\"></a>函数的类型</h2><ul>\n<li><p>可选参数, 必须在必选参数后面</p>\n</li>\n<li><p>参数默认值<br>function buildName(firstName: string, lastName?: string) {</p>\n<p> }</p>\n</li>\n<li><p>添加默认值的参数识别为可选参数</p>\n</li>\n<li><p>剩余参数</p>\n</li>\n</ul>\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><h2 id=\"疑惑–》-声明文件\"><a href=\"#疑惑–》-声明文件\" class=\"headerlink\" title=\"疑惑–》 声明文件\"></a>疑惑–》 声明文件</h2><p>当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。<br>声明文件在哪里？</p>\n<ul>\n<li>与 npm 包绑定在一起</li>\n<li>npm 包的维护者并没有提供声明文件， 只能由其他人将声明文件发布到@types 里面</li>\n<li>自己写个声明文件</li>\n</ul>\n<p>npm 包的声明文件 和全局变量的声明文件<br>在 npm 包的声明文件中，使用 declare 不再会声明一个全局变量，而只会在当前文件中声明一个局部变量。只有在声明文件中使用 export 导出，然后在使用方 import 导入后，才会应用到这些类型声明。</p>\n<p>######declare global<br>使用 declare global 可以在 npm 包或者 UMD 库中扩展全局变量的类型</p>\n<h2 id=\"内置对象\"><a href=\"#内置对象\" class=\"headerlink\" title=\"内置对象\"></a>内置对象</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\" target=\"_blank\" rel=\"noopener\">内置对象查询–》点击</a><br>ESMAScript 提供了 Boolean、Error、Date、RegExp</p>\n<pre><code>   interface obj = {\n        param: Function\n        param: Promise\n    }</code></pre><p>枚举–》 数据的双向映射</p>\n<pre><code>    enum companyList= {1: &#39;aaa&#39;, 2: &#39;bbb&#39;}\n    var companyList = {\n        1: &#39;aaa&#39;,\n        2: &#39;bbb&#39;,\n        aaa: 1,\n        bbb: 2\n    }</code></pre><h2 id=\"Vue-in-Typescript\"><a href=\"#Vue-in-Typescript\" class=\"headerlink\" title=\"Vue in Typescript\"></a>Vue in Typescript</h2><h3 id=\"三大利器\"><a href=\"#三大利器\" class=\"headerlink\" title=\"三大利器\"></a>三大利器</h3><ul>\n<li>vue-component-class</li>\n<li>方法可以直接声明为类成员方法。</li>\n<li>可以将计算属性声明为类属性访问器。</li>\n<li>默认 data 被当作类属性</li>\n<li>data ， render 和 vue 的生命周期的钩子直接是类成员的方法，保留这些命名，不要冲突</li>\n<li>对于其他的配置项，例如 prop、componets 等传递给装饰器函数</li>\n</ul>\n<pre><code>import Vue from &#39;vue&#39;;\nimport Component from &#39;vue-componet-class&#39;;\nComponent.resgisterHooks([\n    &#39;beforeRouteEnter&#39;\n])\n@Componnet({\n    props: {\n\n    },\n    components: {\n\n    }\n})\nexport default class App extends Vue {\n    // aa = &#39;&#39;;\n    // 类型推断aa是个string， 后面aa只能赋值aa类型\n    // 所以最好使用先声明后\n\n    //  data\n   public tableModelItems: Array&lt;any&gt;;\n   constructor() {\n       super();\n       this.tableModelItems = [];\n   }\n   // computed\n  public get filterTableData() {\n    return this.tableData.filter((i: any) =&gt; i.refundStatus === 0).length\n\n    // 方法\n    // 声明周期\n\n    // 此时需要路由函数的生命周期钩子咋办\n    beforeRouteEnterf() {\n        next() // 一定要写，否则玩不下去，为什么？\n    }\n}\n\n\n}\n\n- vue-property-decorator(依赖vue-component-class提供了更多了装饰器，代码更加显示 )\n- @Emit\n- @Inject\n- @Prop\n- @Provide\n- @Watch\n- vuex-class（连接了vue和vuex）\n\n## 还没搞定的bug</code></pre><h3 id=\"错误–》-类型报错\"><a href=\"#错误–》-类型报错\" class=\"headerlink\" title=\"错误–》 类型报错\"></a>错误–》 类型报错</h3><ul>\n<li>添加script的类型<pre><code>&lt;script lang=&quot;ts&quot;&gt;&lt;/script&gt;\n&lt;!--否则下面的类型报错--&gt;</code></pre></li>\n</ul>\n<h3 id=\"错误之–》Vue中挂载propoty出错（如果还是爆红，重启ide）\"><a href=\"#错误之–》Vue中挂载propoty出错（如果还是爆红，重启ide）\" class=\"headerlink\" title=\"错误之–》Vue中挂载propoty出错（如果还是爆红，重启ide）\"></a>错误之–》Vue中挂载propoty出错（如果还是爆红，重启ide）</h3><p>声明再挂载</p>\n<pre><code>    &lt;!--inject--&gt;\n      import _Vue from &#39;vue&#39;\n      import moment from &quot;moment&quot;;\n      export default {\n        install(Vue: typeof _Vue, options: any) {\n          Vue.prototype.$moment = moment;\n          Vue.prototype.$log = () =&gt; {\n            console.log(new Date())\n          }\n        }\n      }\n    &lt;!--types--&gt;\n      import Vue from &#39;vue&#39;\n      declare module &#39;vue/types/vue&#39; {\n        interface Vue {\n          $moment: Function\n          $log: Function\n        }\n      }</code></pre><h3 id=\"ts中不能识别-vue文件\"><a href=\"#ts中不能识别-vue文件\" class=\"headerlink\" title=\"ts中不能识别.vue文件\"></a>ts中不能识别.vue文件</h3><p> <strong>TypeScript 默认只识别 .ts 文件，不识别 .vue 文件, 乖乖的写 import Component from ‘components/component.vue’</strong><br><img src=\"1.jpg\" alt></p>\n<h3 id=\"vuex-class的Emit传参数给父组件报错\"><a href=\"#vuex-class的Emit传参数给父组件报错\" class=\"headerlink\" title=\"vuex-class的Emit传参数给父组件报错\"></a>vuex-class的Emit传参数给父组件报错</h3><pre><code>@emit(&quot;reset&quot;)\nreset(role, this.formData){}\n&lt;!--此时报错--&gt;</code></pre><p><img src=\"2.jpg\" alt></p>\n<h3 id=\"错误–-gt-可选参数爆红\"><a href=\"#错误–-gt-可选参数爆红\" class=\"headerlink\" title=\"错误–&gt; 可选参数爆红\"></a>错误–&gt; 可选参数爆红</h3><p><img src=\"3.jpg\" alt></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><a href=\"https://www.tslang.cn/docs/handbook/basic-types.html\" target=\"_blank\" rel=\"noopener\">ts的官网</a></li>\n<li><a href=\"https://juejin.im/post/5ba75b355188255c5e66e4d3\" target=\"_blank\" rel=\"noopener\">vue+ts快速上手</a></li>\n<li><a href=\"https://ts.xcatliu.com/\" target=\"_blank\" rel=\"noopener\">ts通俗易懂，比较清晰的文档</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&mid=2247490464&idx=1&sn=0c75aaab12002c76198a8d6f183cd686&chksm=f951aee3ce2627f50a5ac6799964919e54a7298288f8bf881931d7c6769b05e302418bdb8051&scene=27#wechat_redirect\" target=\"_blank\" rel=\"noopener\">尤大大对于ts+vue的看法</a></li>\n<li><a href=\"https://juejin.im/post/5a9c004a6fb9a028b92c9e91#heading-7\" target=\"_blank\" rel=\"noopener\">蚂蚁金服的ts实践</a><br>……</li>\n</ul>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<!-- <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe> -->\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28854182&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"ts-基础总结\"><a href=\"#ts-基础总结\" class=\"headerlink\" title=\"ts 基础总结\"></a>ts 基础总结</h1><hr>\n<p><strong>ts 有什么用</strong></p>\n<p>类型检查, 拥抱 es6，支持部分的 esNext 草案，直接编译到原生 js、引入新的语法糖</p>\n<p><strong>为什么用 ts</strong></p>\n<blockquote>\n<p>TypeScript 的设计目的应该是解决 JavaScript 的“痛点”：弱类型和没有命名空间，导致很难模块化，不适合开发大型程序。另外它还提供了一些语法糖来帮助大家更方便地实践面向对象的编程。<br>typescript 不仅可以约束我们的编码习惯，还能起到注释的作用，当我们看到一函数后我们立马就能知道这个函数的用法，需要传什么值，返回值是什么类型一目了然，对大型项目的维护性有很大的提升。</p>\n</blockquote>\n<p><strong>编译报错， 会生成编译结果么？</strong></p>\n<p>答案是肯定的,当然可以在 tsconfig.json 的配置， noEmitONError</p>\n<h1 id=\"基础总结\"><a href=\"#基础总结\" class=\"headerlink\" title=\"基础总结\"></a>基础总结</h1><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><ul>\n<li>boolean 、number、string、null、 undefined、 Symbol</li>\n<li>undefined 和 null 类型的数据只能被赋值 undefined 和 null， 但是这个类型是所有类型的子类型</li>\n<li>void 空类型<br>// undefined 和 null 是所有类型子类型，都可以赋值<br>let num: Symbol = undefined;ss<br>let num: number = undefined;<br>// undefined 类型， 只能给 undefined<br>let u: undefined = undefined;<br>let n: null = null;</li>\n<li>any 和类型推断<br>// 在 ts 中，变量在声明的时候，如果没有定义其类型，会被识成默认类型<br>let str;<br>str = ‘I am strgting’;<br>str = 1024;<br>// 未定义类型，直接赋值<br>let num= 124;<br>// 等同于 let num:number = 124, 在后面代码如果赋予 num 一个 string 会被报错</li>\n</ul>\n<h2 id=\"多个可能属性\"><a href=\"#多个可能属性\" class=\"headerlink\" title=\"多个可能属性\"></a>多个可能属性</h2><pre><code>  //只能访问可能属性的共有属性\n  function getLength(param: string| number) {\n      return param.length;\n  }\n  // 会报错， 因为 length不是 sting和number类型的共有属性\n  // 技巧--》 使用类型别名\n  type possibleType = string | number;\n  function getLength(param: possibleType) {\n      return param.length;\n  }</code></pre><h2 id=\"接口的概念\"><a href=\"#接口的概念\" class=\"headerlink\" title=\"接口的概念\"></a>接口的概念</h2><ul>\n<li>在 ts 中，interface 包括对行为的抽象，由类去实现（implements）</li>\n<li>也包括对对象轮廓的描述</li>\n</ul>\n<h2 id=\"对象-interface-》动态属性\"><a href=\"#对象-interface-》动态属性\" class=\"headerlink\" title=\"对象 interface -》动态属性\"></a>对象 interface -》动态属性</h2><p>必选参数和可选参数的类型是动态属性类型的子集，所有在动态属性类型设置的时候要设置上所有类型</p>\n<p>只读属性的约束力<br>注意点： 只读属性的约束力在于第一次给对象赋值的时候，而不是给属性赋值的时候 readonly 和 const 的区别： const 是变量， readonly 是属性</p>\n<h2 id=\"接口-》抽象方法的实现\"><a href=\"#接口-》抽象方法的实现\" class=\"headerlink\" title=\"接口-》抽象方法的实现\"></a>接口-》抽象方法的实现</h2><pre><code>  export interface ISRequest {\n    fetch(url: string, arg?: Object, callback?: Function): Promise&lt;Object&gt;;\n  }\n  export class SafeRequest implements ISRequest {\n        public async fetch(url: string, arg, callback?: Function): Promise&lt;Object&gt; {\n          return new Promise((resolve, reject) =&gt; {\n\n          })\n  }</code></pre><h2 id=\"用接口表示数组\"><a href=\"#用接口表示数组\" class=\"headerlink\" title=\"用接口表示数组\"></a>用接口表示数组</h2><pre><code>  interface NumberArray {\n        [index: any]: number\n    }\n    let numArr: NumberArray = [1, 2, 3]</code></pre><h2 id=\"函数的类型\"><a href=\"#函数的类型\" class=\"headerlink\" title=\"函数的类型\"></a>函数的类型</h2><ul>\n<li><p>可选参数, 必须在必选参数后面</p>\n</li>\n<li><p>参数默认值<br>function buildName(firstName: string, lastName?: string) {</p>\n<p> }</p>\n</li>\n<li><p>添加默认值的参数识别为可选参数</p>\n</li>\n<li><p>剩余参数</p>\n</li>\n</ul>\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><h2 id=\"疑惑–》-声明文件\"><a href=\"#疑惑–》-声明文件\" class=\"headerlink\" title=\"疑惑–》 声明文件\"></a>疑惑–》 声明文件</h2><p>当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。<br>声明文件在哪里？</p>\n<ul>\n<li>与 npm 包绑定在一起</li>\n<li>npm 包的维护者并没有提供声明文件， 只能由其他人将声明文件发布到@types 里面</li>\n<li>自己写个声明文件</li>\n</ul>\n<p>npm 包的声明文件 和全局变量的声明文件<br>在 npm 包的声明文件中，使用 declare 不再会声明一个全局变量，而只会在当前文件中声明一个局部变量。只有在声明文件中使用 export 导出，然后在使用方 import 导入后，才会应用到这些类型声明。</p>\n<p>######declare global<br>使用 declare global 可以在 npm 包或者 UMD 库中扩展全局变量的类型</p>\n<h2 id=\"内置对象\"><a href=\"#内置对象\" class=\"headerlink\" title=\"内置对象\"></a>内置对象</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\" target=\"_blank\" rel=\"noopener\">内置对象查询–》点击</a><br>ESMAScript 提供了 Boolean、Error、Date、RegExp</p>\n<pre><code>   interface obj = {\n        param: Function\n        param: Promise\n    }</code></pre><p>枚举–》 数据的双向映射</p>\n<pre><code>    enum companyList= {1: &#39;aaa&#39;, 2: &#39;bbb&#39;}\n    var companyList = {\n        1: &#39;aaa&#39;,\n        2: &#39;bbb&#39;,\n        aaa: 1,\n        bbb: 2\n    }</code></pre><h2 id=\"Vue-in-Typescript\"><a href=\"#Vue-in-Typescript\" class=\"headerlink\" title=\"Vue in Typescript\"></a>Vue in Typescript</h2><h3 id=\"三大利器\"><a href=\"#三大利器\" class=\"headerlink\" title=\"三大利器\"></a>三大利器</h3><ul>\n<li>vue-component-class</li>\n<li>方法可以直接声明为类成员方法。</li>\n<li>可以将计算属性声明为类属性访问器。</li>\n<li>默认 data 被当作类属性</li>\n<li>data ， render 和 vue 的生命周期的钩子直接是类成员的方法，保留这些命名，不要冲突</li>\n<li>对于其他的配置项，例如 prop、componets 等传递给装饰器函数</li>\n</ul>\n<pre><code>import Vue from &#39;vue&#39;;\nimport Component from &#39;vue-componet-class&#39;;\nComponent.resgisterHooks([\n    &#39;beforeRouteEnter&#39;\n])\n@Componnet({\n    props: {\n\n    },\n    components: {\n\n    }\n})\nexport default class App extends Vue {\n    // aa = &#39;&#39;;\n    // 类型推断aa是个string， 后面aa只能赋值aa类型\n    // 所以最好使用先声明后\n\n    //  data\n   public tableModelItems: Array&lt;any&gt;;\n   constructor() {\n       super();\n       this.tableModelItems = [];\n   }\n   // computed\n  public get filterTableData() {\n    return this.tableData.filter((i: any) =&gt; i.refundStatus === 0).length\n\n    // 方法\n    // 声明周期\n\n    // 此时需要路由函数的生命周期钩子咋办\n    beforeRouteEnterf() {\n        next() // 一定要写，否则玩不下去，为什么？\n    }\n}\n\n\n}\n\n- vue-property-decorator(依赖vue-component-class提供了更多了装饰器，代码更加显示 )\n- @Emit\n- @Inject\n- @Prop\n- @Provide\n- @Watch\n- vuex-class（连接了vue和vuex）\n\n## 还没搞定的bug</code></pre><h3 id=\"错误–》-类型报错\"><a href=\"#错误–》-类型报错\" class=\"headerlink\" title=\"错误–》 类型报错\"></a>错误–》 类型报错</h3><ul>\n<li>添加script的类型<pre><code>&lt;script lang=&quot;ts&quot;&gt;&lt;/script&gt;\n&lt;!--否则下面的类型报错--&gt;</code></pre></li>\n</ul>\n<h3 id=\"错误之–》Vue中挂载propoty出错（如果还是爆红，重启ide）\"><a href=\"#错误之–》Vue中挂载propoty出错（如果还是爆红，重启ide）\" class=\"headerlink\" title=\"错误之–》Vue中挂载propoty出错（如果还是爆红，重启ide）\"></a>错误之–》Vue中挂载propoty出错（如果还是爆红，重启ide）</h3><p>声明再挂载</p>\n<pre><code>    &lt;!--inject--&gt;\n      import _Vue from &#39;vue&#39;\n      import moment from &quot;moment&quot;;\n      export default {\n        install(Vue: typeof _Vue, options: any) {\n          Vue.prototype.$moment = moment;\n          Vue.prototype.$log = () =&gt; {\n            console.log(new Date())\n          }\n        }\n      }\n    &lt;!--types--&gt;\n      import Vue from &#39;vue&#39;\n      declare module &#39;vue/types/vue&#39; {\n        interface Vue {\n          $moment: Function\n          $log: Function\n        }\n      }</code></pre><h3 id=\"ts中不能识别-vue文件\"><a href=\"#ts中不能识别-vue文件\" class=\"headerlink\" title=\"ts中不能识别.vue文件\"></a>ts中不能识别.vue文件</h3><p> <strong>TypeScript 默认只识别 .ts 文件，不识别 .vue 文件, 乖乖的写 import Component from ‘components/component.vue’</strong><br><img src=\"1.jpg\" alt></p>\n<h3 id=\"vuex-class的Emit传参数给父组件报错\"><a href=\"#vuex-class的Emit传参数给父组件报错\" class=\"headerlink\" title=\"vuex-class的Emit传参数给父组件报错\"></a>vuex-class的Emit传参数给父组件报错</h3><pre><code>@emit(&quot;reset&quot;)\nreset(role, this.formData){}\n&lt;!--此时报错--&gt;</code></pre><p><img src=\"2.jpg\" alt></p>\n<h3 id=\"错误–-gt-可选参数爆红\"><a href=\"#错误–-gt-可选参数爆红\" class=\"headerlink\" title=\"错误–&gt; 可选参数爆红\"></a>错误–&gt; 可选参数爆红</h3><p><img src=\"3.jpg\" alt></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><a href=\"https://www.tslang.cn/docs/handbook/basic-types.html\" target=\"_blank\" rel=\"noopener\">ts的官网</a></li>\n<li><a href=\"https://juejin.im/post/5ba75b355188255c5e66e4d3\" target=\"_blank\" rel=\"noopener\">vue+ts快速上手</a></li>\n<li><a href=\"https://ts.xcatliu.com/\" target=\"_blank\" rel=\"noopener\">ts通俗易懂，比较清晰的文档</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzUxMzcxMzE5Ng==&mid=2247490464&idx=1&sn=0c75aaab12002c76198a8d6f183cd686&chksm=f951aee3ce2627f50a5ac6799964919e54a7298288f8bf881931d7c6769b05e302418bdb8051&scene=27#wechat_redirect\" target=\"_blank\" rel=\"noopener\">尤大大对于ts+vue的看法</a></li>\n<li><a href=\"https://juejin.im/post/5a9c004a6fb9a028b92c9e91#heading-7\" target=\"_blank\" rel=\"noopener\">蚂蚁金服的ts实践</a><br>……</li>\n</ul>\n"},{"title":"VUE项目常用方法总结","date":"2019-10-17T07:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# VUE项目常用方法总结\n---\n\n\n\n**1.什么是Webpack?**\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/VUE项目常用方法总结.md","raw":"---\ntitle: VUE项目常用方法总结\ndate: 2019-10-17 15:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n- 开发环境\ncategories:\n- 开发环境\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# VUE项目常用方法总结\n---\n\n\n\n**1.什么是Webpack?**\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"VUE项目常用方法总结","published":1,"updated":"2020-05-28T07:51:13.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckari24yh00155sjo3t121pxg","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"VUE项目常用方法总结\"><a href=\"#VUE项目常用方法总结\" class=\"headerlink\" title=\"VUE项目常用方法总结\"></a>VUE项目常用方法总结</h1><hr>\n<p><strong>1.什么是Webpack?</strong></p>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"VUE项目常用方法总结\"><a href=\"#VUE项目常用方法总结\" class=\"headerlink\" title=\"VUE项目常用方法总结\"></a>VUE项目常用方法总结</h1><hr>\n<p><strong>1.什么是Webpack?</strong></p>\n"},{"title":"也谈面试必备问题之 JavaScript 数组去重","date":"2019-09-22T05:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28854182&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 开篇\n\n---\n\n数组去重\n\n**方法一**\n无需思考，我们可以得到 O(n^2) 复杂度的解法。定义一个变量数组 res 保存结果，遍历需要去重的数组，如果该元素已经存在在 res 中了，则说明是重复的元素，如果没有，则放入 res 中。\n\n      function unique(a) {\n      var res = [];\n\n      for (var i = 0, len = a.length; i < len; i++) {\n      var item = a[i];\n\n          for (var j = 0, jLen = res.length; j < jLen; j++) {\n            if (res[j] === item)\n              break;\n          }\n\n          if (j === jLen)\n            res.push(item);\n\n      }\n\n      return res;\n      }\n\n      var a = [1, 1, '1', '2', 1];\n      var ans = unique(a);\n      console.log(ans); // => [1, \"1\", \"2\"]\n代码非常简单，那么是否能更简洁些？如果不考虑浏览器兼容，我们可以用 ES5 提供的 Array.prototype.indexOf 方法来简化代码。\n\n      function unique(a) {\n      var res = [];\n\n      for (var i = 0, len = a.length; i < len; i++) {\n      var item = a[i];\n\n          (res.indexOf(item) === -1) && res.push(item);\n\n      }\n\n      return res;\n      }\n\n      var a = [1, 1, '1', '2', 1];\n      var ans = unique(a);\n      console.log(ans); // => [1, \"1\", \"2\"]\n      既然用了 indexOf，那么不妨再加上 filter。\n\n      function unique(a) {\n\n      var res = a.filter(function(item, index, array) {\n      return array.indexOf(item) === index;\n      });\n\n      return res;\n      }\n\n      var a = [1, 1, '1', '2', 1];\n      var ans = unique(a);\n      console.log(ans); // => [1, \"1\", \"2\"]\n**方法二**\n法一是将原数组中的元素和结果数组中的元素一一比较，我们可以换个思路，将原数组中重复元素的最后一个元素放入结果数组中。\n\n      function unique(a) {\n      var res = [];\n\n      for (var i = 0, len = a.length; i < len; i++) {\n      for (var j = i + 1; j < len; j++) {\n      // 这一步十分巧妙\n      // 如果发现相同元素\n      // 则 i 自增进入下一个循环比较\n      if (a[i] === a[j])\n      j = ++i;\n      }\n\n          res.push(a[i]);\n\n      }\n\n      return res;\n      }\n\n      var a = [1, 1, '1', '2', 1];\n      var ans = unique(a);\n      console.log(ans); // => [\"1\", \"2\", 1]\n虽然复杂度还是 O(n^2)，但是可以看到结果不同，1 出现在了数组最后面，因为结果数组取的是元素最后一次出现的位置。\n\n**方法三（sort)**\n如果笔试面试时只答出了上面这样 O(n^2) 的方案，可能还不能使面试官满意，下面就来说几种进阶方案。\n\n将数组用 sort 排序后，理论上相同的元素会被放在相邻的位置，那么比较前后位置的元素就可以了。\n\n      function unique(a) {\n      return a.concat().sort().filter(function(item, pos, ary) {\n      return !pos || item != ary[pos - 1];\n      });\n      }\n\n      var a = [1, 1, 3, 2, 1, 2, 4];\n      var ans = unique(a);\n      console.log(ans); // => [1, 2, 3, 4]\n但是问题又来了，1 和 \"1\" 会被排在一起，不同的 Object 会被排在一起，因为它们 toString() 的结果相同，所以会出现这样的错误：\n\n      var a = [1, 1, 3, 2, 1, 2, 4, '1'];\n      var ans = unique(a);\n      console.log(ans); // => [1, 2, 3, 4]\n当然你完全可以针对数组中可能出现的不同类型，来写这个比较函数。不过这似乎有点麻烦。\n\n**方法四 （object）**\n用 JavaScript 中的 Object 对象来当做哈希表，这也是几年前笔试时的解法，跟 sort 一样，可以去重完全由 Number 基本类型组成的数组。\n\n      function unique(a) {\n      var seen = {};\n\n      return a.filter(function(item) {\n      return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n      });\n      }\n\n      var a = [1, 1, 3, 2, 1, 2, 4];\n      var ans = unique(a);\n      console.log(ans); // => [1, 3, 2, 4]\n还是和方法三一样的问题，因为 Object 的 key 值都是 String 类型，所以对于 1 和 \"1\" 无法分别，我们可以稍微改进下，将类型也存入 key 中。\n\n      function unique(a) {\n      var ret = [];\n      var hash = {};\n\n      for (var i = 0, len = a.length; i < len; i++) {\n      var item = a[i];\n\n          var key = typeof(item) + item;\n\n          if (hash[key] !== 1) {\n            ret.push(item);\n            hash[key] = 1;\n          }\n\n      }\n\n      return ret;\n      }\n\n      var a = [1, 1, 3, 2, '4', 1, 2, 4, '1'];\n      var ans = unique(a);\n      console.log(ans); // => [1, 3, 2, \"4\", 4, \"1\"]\n虽然解决了讨厌的 1 和 \"1\" 的问题，但是还有别的问题！\n\n      var a = [{name: \"hanzichi\"}, {age: 30}, new String(1), new Number(1)];\n      var ans = unique(a);\n      console.log(ans); // => [Object, String]\n但是如果数组元素全部是基础类型的 Number 值，键值对法应该是最高效的！\n\n**方法五 （ES6）**\nES6 部署了 Set 以及 Array.from 方法，太强大了！如果浏览器支持，完全可以这样：\n\n      function unique(a) {\n      return Array.from(new Set(a));\n      }\n\n      var a = [{name: \"hanzichi\"}, {age: 30}, new String(1), new Number(1)];\n      var ans = unique(a);\n      console.log(ans); // => [Object, Object, String, Number]\n      _.unique\n最后来看看 underscore 对此的实现方式，underscore 将此封装到了 _.unique 方法中，调用方式为 \\_.unique(array, [isSorted], [iteratee])。其中第一个参数是必须的，是需要去重的数组，第二个参数可选，如果数组有序，则可以传入布尔值 true，第三个参数可选，如果需要对数组迭代的结果去重，则可以传入一个迭代函数。而数组元素去重是基于 === 运算符的。\n\n其实很简单，underscore 中的实现方式和上面的方法一相似。\n\n我们来看它的核心代码：\n\n      for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n      // 如果指定了迭代函数\n      // 则对数组每一个元素进行迭代\n      computed = iteratee ? iteratee(value, i, array) : value;\n\n      // 如果是有序数组，则当前元素只需跟上一个元素对比即可\n      // 用 seen 变量保存上一个元素\n      if (isSorted) {\n      // 如果 i === 0，则直接 push\n      // 否则比较当前元素是否和前一个元素相等\n      if (!i || seen !== computed) result.push(value);\n      // seen 保存当前元素，供下一次对比\n      seen = computed;\n      } else if (iteratee) {\n      // 如果 seen[] 中没有 computed 这个元素值\n      if (!_.contains(seen, computed)) {\n      seen.push(computed);\n      result.push(value);\n      }\n      } else if (!_.contains(result, value)) {  \n      // 如果不用经过迭代函数计算，也就不用 seen[] 变量了\n      result.push(value);\n      }\n      }\n","source":"_posts/javascript 数组去重.md","raw":"---\ntitle: 也谈面试必备问题之 JavaScript 数组去重\ndate: 2019-09-22 13:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n  - 方法\ncategories:\n  - 方法\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28854182&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 开篇\n\n---\n\n数组去重\n\n**方法一**\n无需思考，我们可以得到 O(n^2) 复杂度的解法。定义一个变量数组 res 保存结果，遍历需要去重的数组，如果该元素已经存在在 res 中了，则说明是重复的元素，如果没有，则放入 res 中。\n\n      function unique(a) {\n      var res = [];\n\n      for (var i = 0, len = a.length; i < len; i++) {\n      var item = a[i];\n\n          for (var j = 0, jLen = res.length; j < jLen; j++) {\n            if (res[j] === item)\n              break;\n          }\n\n          if (j === jLen)\n            res.push(item);\n\n      }\n\n      return res;\n      }\n\n      var a = [1, 1, '1', '2', 1];\n      var ans = unique(a);\n      console.log(ans); // => [1, \"1\", \"2\"]\n代码非常简单，那么是否能更简洁些？如果不考虑浏览器兼容，我们可以用 ES5 提供的 Array.prototype.indexOf 方法来简化代码。\n\n      function unique(a) {\n      var res = [];\n\n      for (var i = 0, len = a.length; i < len; i++) {\n      var item = a[i];\n\n          (res.indexOf(item) === -1) && res.push(item);\n\n      }\n\n      return res;\n      }\n\n      var a = [1, 1, '1', '2', 1];\n      var ans = unique(a);\n      console.log(ans); // => [1, \"1\", \"2\"]\n      既然用了 indexOf，那么不妨再加上 filter。\n\n      function unique(a) {\n\n      var res = a.filter(function(item, index, array) {\n      return array.indexOf(item) === index;\n      });\n\n      return res;\n      }\n\n      var a = [1, 1, '1', '2', 1];\n      var ans = unique(a);\n      console.log(ans); // => [1, \"1\", \"2\"]\n**方法二**\n法一是将原数组中的元素和结果数组中的元素一一比较，我们可以换个思路，将原数组中重复元素的最后一个元素放入结果数组中。\n\n      function unique(a) {\n      var res = [];\n\n      for (var i = 0, len = a.length; i < len; i++) {\n      for (var j = i + 1; j < len; j++) {\n      // 这一步十分巧妙\n      // 如果发现相同元素\n      // 则 i 自增进入下一个循环比较\n      if (a[i] === a[j])\n      j = ++i;\n      }\n\n          res.push(a[i]);\n\n      }\n\n      return res;\n      }\n\n      var a = [1, 1, '1', '2', 1];\n      var ans = unique(a);\n      console.log(ans); // => [\"1\", \"2\", 1]\n虽然复杂度还是 O(n^2)，但是可以看到结果不同，1 出现在了数组最后面，因为结果数组取的是元素最后一次出现的位置。\n\n**方法三（sort)**\n如果笔试面试时只答出了上面这样 O(n^2) 的方案，可能还不能使面试官满意，下面就来说几种进阶方案。\n\n将数组用 sort 排序后，理论上相同的元素会被放在相邻的位置，那么比较前后位置的元素就可以了。\n\n      function unique(a) {\n      return a.concat().sort().filter(function(item, pos, ary) {\n      return !pos || item != ary[pos - 1];\n      });\n      }\n\n      var a = [1, 1, 3, 2, 1, 2, 4];\n      var ans = unique(a);\n      console.log(ans); // => [1, 2, 3, 4]\n但是问题又来了，1 和 \"1\" 会被排在一起，不同的 Object 会被排在一起，因为它们 toString() 的结果相同，所以会出现这样的错误：\n\n      var a = [1, 1, 3, 2, 1, 2, 4, '1'];\n      var ans = unique(a);\n      console.log(ans); // => [1, 2, 3, 4]\n当然你完全可以针对数组中可能出现的不同类型，来写这个比较函数。不过这似乎有点麻烦。\n\n**方法四 （object）**\n用 JavaScript 中的 Object 对象来当做哈希表，这也是几年前笔试时的解法，跟 sort 一样，可以去重完全由 Number 基本类型组成的数组。\n\n      function unique(a) {\n      var seen = {};\n\n      return a.filter(function(item) {\n      return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n      });\n      }\n\n      var a = [1, 1, 3, 2, 1, 2, 4];\n      var ans = unique(a);\n      console.log(ans); // => [1, 3, 2, 4]\n还是和方法三一样的问题，因为 Object 的 key 值都是 String 类型，所以对于 1 和 \"1\" 无法分别，我们可以稍微改进下，将类型也存入 key 中。\n\n      function unique(a) {\n      var ret = [];\n      var hash = {};\n\n      for (var i = 0, len = a.length; i < len; i++) {\n      var item = a[i];\n\n          var key = typeof(item) + item;\n\n          if (hash[key] !== 1) {\n            ret.push(item);\n            hash[key] = 1;\n          }\n\n      }\n\n      return ret;\n      }\n\n      var a = [1, 1, 3, 2, '4', 1, 2, 4, '1'];\n      var ans = unique(a);\n      console.log(ans); // => [1, 3, 2, \"4\", 4, \"1\"]\n虽然解决了讨厌的 1 和 \"1\" 的问题，但是还有别的问题！\n\n      var a = [{name: \"hanzichi\"}, {age: 30}, new String(1), new Number(1)];\n      var ans = unique(a);\n      console.log(ans); // => [Object, String]\n但是如果数组元素全部是基础类型的 Number 值，键值对法应该是最高效的！\n\n**方法五 （ES6）**\nES6 部署了 Set 以及 Array.from 方法，太强大了！如果浏览器支持，完全可以这样：\n\n      function unique(a) {\n      return Array.from(new Set(a));\n      }\n\n      var a = [{name: \"hanzichi\"}, {age: 30}, new String(1), new Number(1)];\n      var ans = unique(a);\n      console.log(ans); // => [Object, Object, String, Number]\n      _.unique\n最后来看看 underscore 对此的实现方式，underscore 将此封装到了 _.unique 方法中，调用方式为 \\_.unique(array, [isSorted], [iteratee])。其中第一个参数是必须的，是需要去重的数组，第二个参数可选，如果数组有序，则可以传入布尔值 true，第三个参数可选，如果需要对数组迭代的结果去重，则可以传入一个迭代函数。而数组元素去重是基于 === 运算符的。\n\n其实很简单，underscore 中的实现方式和上面的方法一相似。\n\n我们来看它的核心代码：\n\n      for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n      // 如果指定了迭代函数\n      // 则对数组每一个元素进行迭代\n      computed = iteratee ? iteratee(value, i, array) : value;\n\n      // 如果是有序数组，则当前元素只需跟上一个元素对比即可\n      // 用 seen 变量保存上一个元素\n      if (isSorted) {\n      // 如果 i === 0，则直接 push\n      // 否则比较当前元素是否和前一个元素相等\n      if (!i || seen !== computed) result.push(value);\n      // seen 保存当前元素，供下一次对比\n      seen = computed;\n      } else if (iteratee) {\n      // 如果 seen[] 中没有 computed 这个元素值\n      if (!_.contains(seen, computed)) {\n      seen.push(computed);\n      result.push(value);\n      }\n      } else if (!_.contains(result, value)) {  \n      // 如果不用经过迭代函数计算，也就不用 seen[] 变量了\n      result.push(value);\n      }\n      }\n","slug":"javascript 数组去重","published":1,"updated":"2020-05-28T07:51:13.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckari24yl00185sjoifce2u0u","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28854182&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h1><hr>\n<p>数组去重</p>\n<p><strong>方法一</strong><br>无需思考，我们可以得到 O(n^2) 复杂度的解法。定义一个变量数组 res 保存结果，遍历需要去重的数组，如果该元素已经存在在 res 中了，则说明是重复的元素，如果没有，则放入 res 中。</p>\n<pre><code>  function unique(a) {\n  var res = [];\n\n  for (var i = 0, len = a.length; i &lt; len; i++) {\n  var item = a[i];\n\n      for (var j = 0, jLen = res.length; j &lt; jLen; j++) {\n        if (res[j] === item)\n          break;\n      }\n\n      if (j === jLen)\n        res.push(item);\n\n  }\n\n  return res;\n  }\n\n  var a = [1, 1, &#39;1&#39;, &#39;2&#39;, 1];\n  var ans = unique(a);\n  console.log(ans); // =&gt; [1, &quot;1&quot;, &quot;2&quot;]</code></pre><p>代码非常简单，那么是否能更简洁些？如果不考虑浏览器兼容，我们可以用 ES5 提供的 Array.prototype.indexOf 方法来简化代码。</p>\n<pre><code>  function unique(a) {\n  var res = [];\n\n  for (var i = 0, len = a.length; i &lt; len; i++) {\n  var item = a[i];\n\n      (res.indexOf(item) === -1) &amp;&amp; res.push(item);\n\n  }\n\n  return res;\n  }\n\n  var a = [1, 1, &#39;1&#39;, &#39;2&#39;, 1];\n  var ans = unique(a);\n  console.log(ans); // =&gt; [1, &quot;1&quot;, &quot;2&quot;]\n  既然用了 indexOf，那么不妨再加上 filter。\n\n  function unique(a) {\n\n  var res = a.filter(function(item, index, array) {\n  return array.indexOf(item) === index;\n  });\n\n  return res;\n  }\n\n  var a = [1, 1, &#39;1&#39;, &#39;2&#39;, 1];\n  var ans = unique(a);\n  console.log(ans); // =&gt; [1, &quot;1&quot;, &quot;2&quot;]</code></pre><p><strong>方法二</strong><br>法一是将原数组中的元素和结果数组中的元素一一比较，我们可以换个思路，将原数组中重复元素的最后一个元素放入结果数组中。</p>\n<pre><code>  function unique(a) {\n  var res = [];\n\n  for (var i = 0, len = a.length; i &lt; len; i++) {\n  for (var j = i + 1; j &lt; len; j++) {\n  // 这一步十分巧妙\n  // 如果发现相同元素\n  // 则 i 自增进入下一个循环比较\n  if (a[i] === a[j])\n  j = ++i;\n  }\n\n      res.push(a[i]);\n\n  }\n\n  return res;\n  }\n\n  var a = [1, 1, &#39;1&#39;, &#39;2&#39;, 1];\n  var ans = unique(a);\n  console.log(ans); // =&gt; [&quot;1&quot;, &quot;2&quot;, 1]</code></pre><p>虽然复杂度还是 O(n^2)，但是可以看到结果不同，1 出现在了数组最后面，因为结果数组取的是元素最后一次出现的位置。</p>\n<p><strong>方法三（sort)</strong><br>如果笔试面试时只答出了上面这样 O(n^2) 的方案，可能还不能使面试官满意，下面就来说几种进阶方案。</p>\n<p>将数组用 sort 排序后，理论上相同的元素会被放在相邻的位置，那么比较前后位置的元素就可以了。</p>\n<pre><code>  function unique(a) {\n  return a.concat().sort().filter(function(item, pos, ary) {\n  return !pos || item != ary[pos - 1];\n  });\n  }\n\n  var a = [1, 1, 3, 2, 1, 2, 4];\n  var ans = unique(a);\n  console.log(ans); // =&gt; [1, 2, 3, 4]</code></pre><p>但是问题又来了，1 和 “1” 会被排在一起，不同的 Object 会被排在一起，因为它们 toString() 的结果相同，所以会出现这样的错误：</p>\n<pre><code>  var a = [1, 1, 3, 2, 1, 2, 4, &#39;1&#39;];\n  var ans = unique(a);\n  console.log(ans); // =&gt; [1, 2, 3, 4]</code></pre><p>当然你完全可以针对数组中可能出现的不同类型，来写这个比较函数。不过这似乎有点麻烦。</p>\n<p><strong>方法四 （object）</strong><br>用 JavaScript 中的 Object 对象来当做哈希表，这也是几年前笔试时的解法，跟 sort 一样，可以去重完全由 Number 基本类型组成的数组。</p>\n<pre><code>  function unique(a) {\n  var seen = {};\n\n  return a.filter(function(item) {\n  return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n  });\n  }\n\n  var a = [1, 1, 3, 2, 1, 2, 4];\n  var ans = unique(a);\n  console.log(ans); // =&gt; [1, 3, 2, 4]</code></pre><p>还是和方法三一样的问题，因为 Object 的 key 值都是 String 类型，所以对于 1 和 “1” 无法分别，我们可以稍微改进下，将类型也存入 key 中。</p>\n<pre><code>  function unique(a) {\n  var ret = [];\n  var hash = {};\n\n  for (var i = 0, len = a.length; i &lt; len; i++) {\n  var item = a[i];\n\n      var key = typeof(item) + item;\n\n      if (hash[key] !== 1) {\n        ret.push(item);\n        hash[key] = 1;\n      }\n\n  }\n\n  return ret;\n  }\n\n  var a = [1, 1, 3, 2, &#39;4&#39;, 1, 2, 4, &#39;1&#39;];\n  var ans = unique(a);\n  console.log(ans); // =&gt; [1, 3, 2, &quot;4&quot;, 4, &quot;1&quot;]</code></pre><p>虽然解决了讨厌的 1 和 “1” 的问题，但是还有别的问题！</p>\n<pre><code>  var a = [{name: &quot;hanzichi&quot;}, {age: 30}, new String(1), new Number(1)];\n  var ans = unique(a);\n  console.log(ans); // =&gt; [Object, String]</code></pre><p>但是如果数组元素全部是基础类型的 Number 值，键值对法应该是最高效的！</p>\n<p><strong>方法五 （ES6）</strong><br>ES6 部署了 Set 以及 Array.from 方法，太强大了！如果浏览器支持，完全可以这样：</p>\n<pre><code>  function unique(a) {\n  return Array.from(new Set(a));\n  }\n\n  var a = [{name: &quot;hanzichi&quot;}, {age: 30}, new String(1), new Number(1)];\n  var ans = unique(a);\n  console.log(ans); // =&gt; [Object, Object, String, Number]\n  _.unique</code></pre><p>最后来看看 underscore 对此的实现方式，underscore 将此封装到了 <em>.unique 方法中，调用方式为 \\</em>.unique(array, [isSorted], [iteratee])。其中第一个参数是必须的，是需要去重的数组，第二个参数可选，如果数组有序，则可以传入布尔值 true，第三个参数可选，如果需要对数组迭代的结果去重，则可以传入一个迭代函数。而数组元素去重是基于 === 运算符的。</p>\n<p>其实很简单，underscore 中的实现方式和上面的方法一相似。</p>\n<p>我们来看它的核心代码：</p>\n<pre><code>  for (var i = 0, length = getLength(array); i &lt; length; i++) {\n  var value = array[i],\n  // 如果指定了迭代函数\n  // 则对数组每一个元素进行迭代\n  computed = iteratee ? iteratee(value, i, array) : value;\n\n  // 如果是有序数组，则当前元素只需跟上一个元素对比即可\n  // 用 seen 变量保存上一个元素\n  if (isSorted) {\n  // 如果 i === 0，则直接 push\n  // 否则比较当前元素是否和前一个元素相等\n  if (!i || seen !== computed) result.push(value);\n  // seen 保存当前元素，供下一次对比\n  seen = computed;\n  } else if (iteratee) {\n  // 如果 seen[] 中没有 computed 这个元素值\n  if (!_.contains(seen, computed)) {\n  seen.push(computed);\n  result.push(value);\n  }\n  } else if (!_.contains(result, value)) {  \n  // 如果不用经过迭代函数计算，也就不用 seen[] 变量了\n  result.push(value);\n  }\n  }</code></pre>","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28854182&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h1><hr>\n<p>数组去重</p>\n<p><strong>方法一</strong><br>无需思考，我们可以得到 O(n^2) 复杂度的解法。定义一个变量数组 res 保存结果，遍历需要去重的数组，如果该元素已经存在在 res 中了，则说明是重复的元素，如果没有，则放入 res 中。</p>\n<pre><code>  function unique(a) {\n  var res = [];\n\n  for (var i = 0, len = a.length; i &lt; len; i++) {\n  var item = a[i];\n\n      for (var j = 0, jLen = res.length; j &lt; jLen; j++) {\n        if (res[j] === item)\n          break;\n      }\n\n      if (j === jLen)\n        res.push(item);\n\n  }\n\n  return res;\n  }\n\n  var a = [1, 1, &#39;1&#39;, &#39;2&#39;, 1];\n  var ans = unique(a);\n  console.log(ans); // =&gt; [1, &quot;1&quot;, &quot;2&quot;]</code></pre><p>代码非常简单，那么是否能更简洁些？如果不考虑浏览器兼容，我们可以用 ES5 提供的 Array.prototype.indexOf 方法来简化代码。</p>\n<pre><code>  function unique(a) {\n  var res = [];\n\n  for (var i = 0, len = a.length; i &lt; len; i++) {\n  var item = a[i];\n\n      (res.indexOf(item) === -1) &amp;&amp; res.push(item);\n\n  }\n\n  return res;\n  }\n\n  var a = [1, 1, &#39;1&#39;, &#39;2&#39;, 1];\n  var ans = unique(a);\n  console.log(ans); // =&gt; [1, &quot;1&quot;, &quot;2&quot;]\n  既然用了 indexOf，那么不妨再加上 filter。\n\n  function unique(a) {\n\n  var res = a.filter(function(item, index, array) {\n  return array.indexOf(item) === index;\n  });\n\n  return res;\n  }\n\n  var a = [1, 1, &#39;1&#39;, &#39;2&#39;, 1];\n  var ans = unique(a);\n  console.log(ans); // =&gt; [1, &quot;1&quot;, &quot;2&quot;]</code></pre><p><strong>方法二</strong><br>法一是将原数组中的元素和结果数组中的元素一一比较，我们可以换个思路，将原数组中重复元素的最后一个元素放入结果数组中。</p>\n<pre><code>  function unique(a) {\n  var res = [];\n\n  for (var i = 0, len = a.length; i &lt; len; i++) {\n  for (var j = i + 1; j &lt; len; j++) {\n  // 这一步十分巧妙\n  // 如果发现相同元素\n  // 则 i 自增进入下一个循环比较\n  if (a[i] === a[j])\n  j = ++i;\n  }\n\n      res.push(a[i]);\n\n  }\n\n  return res;\n  }\n\n  var a = [1, 1, &#39;1&#39;, &#39;2&#39;, 1];\n  var ans = unique(a);\n  console.log(ans); // =&gt; [&quot;1&quot;, &quot;2&quot;, 1]</code></pre><p>虽然复杂度还是 O(n^2)，但是可以看到结果不同，1 出现在了数组最后面，因为结果数组取的是元素最后一次出现的位置。</p>\n<p><strong>方法三（sort)</strong><br>如果笔试面试时只答出了上面这样 O(n^2) 的方案，可能还不能使面试官满意，下面就来说几种进阶方案。</p>\n<p>将数组用 sort 排序后，理论上相同的元素会被放在相邻的位置，那么比较前后位置的元素就可以了。</p>\n<pre><code>  function unique(a) {\n  return a.concat().sort().filter(function(item, pos, ary) {\n  return !pos || item != ary[pos - 1];\n  });\n  }\n\n  var a = [1, 1, 3, 2, 1, 2, 4];\n  var ans = unique(a);\n  console.log(ans); // =&gt; [1, 2, 3, 4]</code></pre><p>但是问题又来了，1 和 “1” 会被排在一起，不同的 Object 会被排在一起，因为它们 toString() 的结果相同，所以会出现这样的错误：</p>\n<pre><code>  var a = [1, 1, 3, 2, 1, 2, 4, &#39;1&#39;];\n  var ans = unique(a);\n  console.log(ans); // =&gt; [1, 2, 3, 4]</code></pre><p>当然你完全可以针对数组中可能出现的不同类型，来写这个比较函数。不过这似乎有点麻烦。</p>\n<p><strong>方法四 （object）</strong><br>用 JavaScript 中的 Object 对象来当做哈希表，这也是几年前笔试时的解法，跟 sort 一样，可以去重完全由 Number 基本类型组成的数组。</p>\n<pre><code>  function unique(a) {\n  var seen = {};\n\n  return a.filter(function(item) {\n  return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n  });\n  }\n\n  var a = [1, 1, 3, 2, 1, 2, 4];\n  var ans = unique(a);\n  console.log(ans); // =&gt; [1, 3, 2, 4]</code></pre><p>还是和方法三一样的问题，因为 Object 的 key 值都是 String 类型，所以对于 1 和 “1” 无法分别，我们可以稍微改进下，将类型也存入 key 中。</p>\n<pre><code>  function unique(a) {\n  var ret = [];\n  var hash = {};\n\n  for (var i = 0, len = a.length; i &lt; len; i++) {\n  var item = a[i];\n\n      var key = typeof(item) + item;\n\n      if (hash[key] !== 1) {\n        ret.push(item);\n        hash[key] = 1;\n      }\n\n  }\n\n  return ret;\n  }\n\n  var a = [1, 1, 3, 2, &#39;4&#39;, 1, 2, 4, &#39;1&#39;];\n  var ans = unique(a);\n  console.log(ans); // =&gt; [1, 3, 2, &quot;4&quot;, 4, &quot;1&quot;]</code></pre><p>虽然解决了讨厌的 1 和 “1” 的问题，但是还有别的问题！</p>\n<pre><code>  var a = [{name: &quot;hanzichi&quot;}, {age: 30}, new String(1), new Number(1)];\n  var ans = unique(a);\n  console.log(ans); // =&gt; [Object, String]</code></pre><p>但是如果数组元素全部是基础类型的 Number 值，键值对法应该是最高效的！</p>\n<p><strong>方法五 （ES6）</strong><br>ES6 部署了 Set 以及 Array.from 方法，太强大了！如果浏览器支持，完全可以这样：</p>\n<pre><code>  function unique(a) {\n  return Array.from(new Set(a));\n  }\n\n  var a = [{name: &quot;hanzichi&quot;}, {age: 30}, new String(1), new Number(1)];\n  var ans = unique(a);\n  console.log(ans); // =&gt; [Object, Object, String, Number]\n  _.unique</code></pre><p>最后来看看 underscore 对此的实现方式，underscore 将此封装到了 <em>.unique 方法中，调用方式为 \\</em>.unique(array, [isSorted], [iteratee])。其中第一个参数是必须的，是需要去重的数组，第二个参数可选，如果数组有序，则可以传入布尔值 true，第三个参数可选，如果需要对数组迭代的结果去重，则可以传入一个迭代函数。而数组元素去重是基于 === 运算符的。</p>\n<p>其实很简单，underscore 中的实现方式和上面的方法一相似。</p>\n<p>我们来看它的核心代码：</p>\n<pre><code>  for (var i = 0, length = getLength(array); i &lt; length; i++) {\n  var value = array[i],\n  // 如果指定了迭代函数\n  // 则对数组每一个元素进行迭代\n  computed = iteratee ? iteratee(value, i, array) : value;\n\n  // 如果是有序数组，则当前元素只需跟上一个元素对比即可\n  // 用 seen 变量保存上一个元素\n  if (isSorted) {\n  // 如果 i === 0，则直接 push\n  // 否则比较当前元素是否和前一个元素相等\n  if (!i || seen !== computed) result.push(value);\n  // seen 保存当前元素，供下一次对比\n  seen = computed;\n  } else if (iteratee) {\n  // 如果 seen[] 中没有 computed 这个元素值\n  if (!_.contains(seen, computed)) {\n  seen.push(computed);\n  result.push(value);\n  }\n  } else if (!_.contains(result, value)) {  \n  // 如果不用经过迭代函数计算，也就不用 seen[] 变量了\n  result.push(value);\n  }\n  }</code></pre>"},{"title":"js常用方法","date":"2019-01-22T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 开篇\n---\n你真的了解JS的那些方法吗？\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/js常用方法.md","raw":"---\ntitle: js常用方法\ndate: 2019-01-22 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n- 方法\ncategories:\n- 方法\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 开篇\n---\n你真的了解JS的那些方法吗？\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"js常用方法","published":1,"updated":"2020-05-28T07:51:13.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckari24yp001d5sjoebxutwzr","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h1><hr>\n<p>你真的了解JS的那些方法吗？</p>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h1><hr>\n<p>你真的了解JS的那些方法吗？</p>\n"},{"title":"js常用数组操作方法","date":"2019-01-22T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 开篇\n---\n你真的了解JS数组的那些方法吗？\n\n\n>寄语：\nJS数组的方法非常的丰富和琐碎，学习和使用过程中总是需要反复的记忆、查看文档，但作为JS基础这样真的不应该，我们应该把它记得滚瓜烂熟，深入理解才对。\n但是要怎样才能做到呢？这正是我也本文的初衷，根据个人的经验总结了一下，希望能够帮助和我一样困惑的人，搞定这个头疼的问题。\n\n\n\n**数组的方法**\nJavaScript的数组方法包括数组原型的方法、构造函数的方法（ES6新增部分）\n针对每一个方法我们主要了解四个方面：**作用、参数、返回值、原数组是否改变**\n\n**（一）. 原型上的方法**\n\n**1. push()**\n作用：向数组的末尾添加一项或多项\n参数：ele1[, ele2[, ...[, elen]]]\n返回值：添加元素后数组的长度\n原数组是否改变：是\n\nlet arr = [1, 2, 3];\nlet temp = arr.push('a', 'b');\nconsole.log(arr, temp); // [1, 2, 3, 'a', 'b'] 5\n\n**2. pop()**\n作用：删除数组最后一项\n参数：无\n返回值：删除的那一项\n原数组是否改变：是\n\nlet arr = [1, 2, 3];\nlet temp = arr.pop();\nconsole.log(arr, temp); // [1, 2] 3\n\n**3. unshift()**\n作用：向数组开头添加一项或多项\n参数：ele1[, ele2[, ...[, elen]]]\n返回值：添加元素后数组的长度\n原数组是否改变：是\nlet arr = [1, 2, 3];\nlet temp = arr.unshift('a', 'b');\nconsole.log(arr, temp); // ['a', 'b', 1, 2, 3] 5\n\n**4. splice()**\n作用：删除、插入、替换数组项\n参数：startIndex[, deleteCount[, item1[, ...[, itemN]]]]\n返回值：删除项组成的数组\n原数组是否改变：是\nlet arr = [1, 2, 3];\n\n// 插入元素\nlet temp = arr.splice(1, 0, 'a', 'b'); // 在索引1的位置插入元素'a'和'b' \nconsole.log(arr, temp); // [1, 'a', 'b', 2, 3] []\n\n// 删除元素\nlet temp1 = arr.splice(1, 2); // 删除从索引1的位置开始的2项 \nconsole.log(arr, temp1); // [1, 2, 3] ['a', 'b']\n\n// 替换一个元素\nlet temp2 = arr.splice(1, 1, 'a'); // 将索引1的位置的元素替换为'a'\nconsole.log(arr, temp2); // [1, 'a', 3 ] [2]\n\n// 替换多个元素\nlet temp3 = arr.splice(0, 2, 'b', 'c'); // 将索引0的位置开始的两项，替换成’b‘和’c‘\nconsole.log(arr, temp3); // [’b‘, 'c', 3] [1, 'a']\n\n// 只传第一个参数，则删除从第一个参数指定的位置到数组结尾的所有项\nlet temp4 = arr.splice(0); //从索引0的位置开始，删除后面的所有项\nconsole.log(arr, temp4); // [] [’b‘, 'c', 3]\n\n**6. copyWithin()**\n\n作用：将数组指定位置（start到end）的元素复制到当前数组的其他位置（target开始），这种复制会替换原位置的元素（ES6新增）\n参数说明：target[,start[,end]]\n参数说明：\n\ntarget: 复制的目标位置（包括），即要被替换的元素开始的位置\nstart: 要copy的元素的开始位置，默认0\nend: 要copy的元素的结束位置，默认为数组最后一个元素\n\n返回值：复制替换之后的数组\n原数组是否改变：是\nlet arr = [1, 2, 3, 4, 5];\n// 用索引0~4范围内的元素，替换索引3~4范围内的元素，因为要替换的位置只有两个，所以只将4，5替换为了1，2\nlet temp = arr.copyWithin(3);\nconsole.log(arr, temp); //  [1, 2, 3, 1, 2] [1, 2, 3, 1, 2]\n\nlet arr1 = [1, 2, 3, 4, 5];\n// 用索引2~4范围内的元素，替换索引3~4范围内的元素，因为要替换的位置只有两个，所以只将4，5替换为了3，4\nlet temp1 = arr1.copyWithin(3, 2);\nconsole.log(arr1, temp1); // [1, 2, 3, 3, 4] [1, 2, 3, 3, 4]\n\n>小结：\n总结上述的描述，copyWithin的作用就是在数组长度的范围内，复制start(包括)到end(不包括)范围内的元素，然后用上述的元替换掉从target（包括）开始到数组结尾的元素，能替换多少就替换多少\n\n**7. reverse**\n作用：翻转原数组\n参数：无\n返回值：翻转后的数组\n原数组是否改变：是\nlet arr = [1, 2, 3];\nlet temp = arr.reverse();\nconsole.log(arr, temp); // [ 3, 2, 1 ] [ 3, 2, 1 ]\n\n**8. sort()**\n作用：数组排序\n参数：compareFunction\n参数说明：\n\ncompareFunction返回值大于0时调换当前比对项的顺序，否则顺序不 变;\n参数可以不传，不传默认按照Unicode编码的顺序排列\n返回值：排序后的数组\n原数组是否改变：是\n// 数组从小到大排序\nlet arr = [1, 4, 6, 7, 8, 3, 2];\nlet temp = arr.sort((a, b) => {\n    return a - b;\n})\nconsole.log(arr, temp); // [ 1, 2, 3, 4, 6, 7, 8 ] [ 1, 2, 3, 4, 6, 7, 8 ]\n\n// 一个实用的数组排序的例子，根据对象元素的排序，排序对象在数组中的位置\nlet objArr = [{id: 3, name: \"lilei\"},{id: 1, name: \"hanmeimei\"},{id: 2, name: \"yimi\"}];\nlet tempArr = objArr.sort((a, b) => {\n    // 按照id从小到大的顺序，对数组中的对象进行排序\n    // 这个示例说明回调函数的形参a,b实际就是数组中当前进行比对的两个元素\n    return a.id - b.id;\n}); \nconsole.log(objArr); //  [{id: 1, name: 'hanmeimei'}, {id: 2, name: 'yimi'}, { id: 3, name: 'lilei' }]\nconsole.log(tempArr); // [{id: 1, name: 'hanmeimei'}, {id: 2, name: 'yimi'}, { id: 3, name: 'lilei'}]\n\n**9. concat** \n作用：基于当前的数组拼接数组\n参数：value1[, value2[, ...[, valueN]]\n参数说明：\n\n参数的类型可以是任意类型。\n不是数组类型直接按顺序拼接到数组末尾，数组类型的则将数组元素逐一取出拼接到数组末尾\n不传则相当于复制数组\n\n返回值：拼接后的数组\n原数组是否改变：否\n\nlet arr = [1,2];\nlet temp = arr.concat('a', {id:1}, ['lilei', 'hanmeimei']);\nconsole.log(arr, temp); // [ 1, 2 ] [ 1, 2, 'a', { id: 1 }, 'lilei', 'hanmeimei']\n\n// 用于复制数组\nlet arr = [1, 2];\nlet temp = arr.concat();\nconsole.log(arr, temp);  // [ 1, 2 ] [ 1, 2 ]\n\n**10. slice()**\n作用：基于当前数组的一项或多项创建一个新的数组\n参数：startIndex[,endIndex]\n参数说明：返回的元素包含startIndex位置的元素，但不包括endIndex位置的元素\n返回值：返回截取的元素组成的数组\n原数组是否改变：否\n\nlet arr = [0, 1, 2, 3, 4];\nlet temp = arr.slice(1,3); // 返回从索引1（包括）位置到索引3（不包括）位置之前的元素\nconsole.log(arr, temp); // [0, 1, 2, 3, 4] [1, 2]\n\n// 用于复制数组\nlet arr = [0, 1, 2, 3, 4];\nlet temp = arr.slice(0); // 返回从索引0（包括）位置到数组结尾的所有元素\nconsole.log(arr, temp); // [0, 1, 2, 3, 4] [0, 1, 2, 3, 4]\n\n**11.indexOf()**:\n作用：从数组开头查找元素在数组中的索引位置（ES5的方法）\n参数：searchElement[, fromIndex]\n返回值：searchElement在数组中的索引，没找到searchElement则返回-1\n原数组是否改变：否\nlet arr = [1, 2, 3, 4, 5, 6, 2];\n// 从数组开头开始查找\nlet temp = arr.indexOf(2);\nconsole.log(arr, temp); // [ 1, 2, 3, 4, 5, 6, 2 ] 1\n// 从指定的位置开始查找\nlet temp1 = arr.indexOf(2,3); // 从索引3(包括)的位置向后查找元素2\nconsole.log(arr, temp1); // [ 1, 2, 3, 4, 5, 6, 2 ] 6\n复制代码\n\n**12.lastIndexOf():**\n作用：从数组结尾查找元素在数组中的索引位置（ES5的方法）\n参数：searchElement[, fromIndex]\n返回值：searchElement在数组中的索引，没找到searchElement则返回-1\n原数组是否改变：否\nlet arr = [1, 2, 3, 4, 5, 6, 2];\n// 从数组末尾开始查找\nlet temp = arr.lastIndexOf(2);\nconsole.log(arr, temp); // [ 1, 2, 3, 4, 5, 6, 2 ] 6\n// 从指定的位置开始查找\nlet temp1 = arr.lastIndexOf(2,3); // 从索引3(包括)的位置向前查找元素2\nconsole.log(arr, temp1); // [ 1, 2, 3, 4, 5, 6, 2 ] 1\n复制代码\n\n**13.every():**\n作用：对数组中的每一项运行给定函数，如果该函数对每一项都返回true,则返回true（ES5方法）\n参数：callback[, thisArg]\n参数说明：callback有三个参数item(当前项),index(当前项索引)，array(数组对象本身)\n返回值：true 或 false\n原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。\nlet arr = [1, 2, 3, 4];\nlet temp = arr.every((item, index, array) => {\n    return item > 2;\n});\nconsole.log(arr, temp); // [ 1, 2, 3, 4 ] false\n\n// 方法的第二个参数可选，作用是设定第一个参数中的this指向，如果使用第二个参数，注意callback不能是箭头函数\n// 后面的迭代方法涉及此参数的，用法相同，不在赘述\nlet arr = [1, 2, 3, 4];\nlet temp = arr.every(function(item, index, array) {\n    return item > this.id;\n}, {id: 2});\nconsole.log(arr, temp); // [ 1, 2, 3, 4 ] false\n复制代码\n\n**14.some():**\n作用：对数组中的每一项运行给定函数，如果该函数对任意一项返回true,则返回true（ES5方法）\n参数：callback[, thisArg]\n参数说明：callback有三个参数item(当前项),index(当前项索引)，array(数组对象本身)\n返回值：true 或 false\n原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。\nlet arr = [1, 2, 3, 4];\nlet temp = arr.some((item, index, array) => {\n    return item > 2;\n});\nconsole.log(arr, temp); // [ 1, 2, 3, 4 ] true\n复制代码\n\n**15.filter():**\n作用：对数组中的每一项运行给定函数，返回该函数返回true的项组成的数组（ES5方法）\n参数：callback[, thisArg]\n参数说明：callback有三个参数item(当前项),index(当前项索引)，array(数组对象本身)\n返回值：函数返回true的项组成的数组\n原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。\nlet arr = [1, 2, 3, 4];\nlet temp = arr.filter((item, index, array) => {\n    return item > 2;\n});\nconsole.log(arr, temp); // [ 1, 2, 3, 4 ] [3, 4]\n复制代码\n\n**16.map():**\n作用：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组（ES5方法）\n参数：callback[, thisArg]\n参数说明：callback有三个参数item(当前项),index(当前项索引)，array(数组对象本身)\n返回值：函数每次调用结果组成的数组\n原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。\nlet arr = [1, 2, 3, 4];\nlet temp = arr.map((item, index, array) => {\n    return item * item;\n});\nconsole.log(arr, temp); // [ 1, 2, 3, 4 ] [ 1, 4, 9, 16]\n复制代码\n\n**17.forEach():**\n作用：对数组中的每一项运行给定函数。无返回值（ES5方法）\n参数：callback[, thisArg]\n参数说明：callback有三个参数item(当前项),index(当前项索引)，array(数组对象本身)\n返回值：无\n原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。\nlet arr = [1, 2, 3, 4];\nlet temp = arr.forEach((item, index, array) => {\n    // 不会有返回值，但可在这里执行某些操作\n    return item * item;\n});\nconsole.log(arr, temp); // [ 1, 2, 3, 4 ] undefined\n复制代码\n注意：\nforEach在所有项都遍历完成之前，无法像for循环一样提前终止循环\n\n\n\n**18.reduce():**\n作用：从数组的第一项开始，逐步遍历到最后，迭代数组的所有项（ES5方法）\n参数：callback[, initialValue]\n参数说明：\n\ncallback迭代函数，有四个参数（prev, cur, index, array）\n\nprev 前一个值，（initialValue || 数组第一项 || 上一次迭代的结果）\ncur 当前迭代项\nindex 当前迭代项索引\narray 迭代的原数组\n\n\ninitialValue 迭代的基础值，不传基础值是数组第一项\n\n返回值：数组迭代后，整体的迭代结果\n原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。\n// 数组求和\nlet arr = [1, 2, 3];\nlet sum = arr.reduce((prev, cur, index, array) => {\n    return prev + cur;\n});\nconsole.log(arr, sum); // [ 1, 2, 3 ] 6\n\n// 传initialValue 基础值的示例\nlet sum1 = arr.reduce((prev, cur, index, array) => {\n    return prev + cur;\n}, 10);\n// 返回的值是：10+1+2+3\nconsole.log(arr, sum1); // [ 1, 2, 3 ] 16\n复制代码\nreduce源码的实现：\nArray.prototype.myReduce = function(callback, initialVal){\n   let prev = initialVal || this[0]; \n    for(var i = pre ? 0 : 1; i < this.length; i++){\n        prev = callback(prev, this[i], i, this);\n   }\n   return prev\n}\n复制代码\n\n\n**19.reduceRight():**\n作用：从数组的最后一项开始，逐步遍历到第一项，迭代数组的所有项（ES5方法）\n参数：callback[, initialValue]\n参数说明：\n\ncallback迭代函数，有四个参数（prev, cur, index, array）\n\nprev 前一个值，（initialValue || 数组第一项 || 上一次迭代的结果）\ncur 当前迭代项\nindex 当前迭代项索引\narray 迭代的原数组\n\n\ninitialValue 迭代的基础值，不传基础值是数组第一项\n\n返回值：数组迭代后，整体的迭代结果\n原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。\n// 拼接字符串,从后向前迭代数组进行拼接\nlet arr = ['h', 'e', 'l', 'l', 'o'];\nlet str = arr.reduceRight((prev, cur, index, array) => {\n    return prev + cur;\n});\nconsole.log(arr, str); // [ 'h', 'e', 'l', 'l', 'o' ] 'olleh'\n复制代码\n\n**20.find():**\n作用：查找数组中第一个符合条件的元素，返回该元素 (ES6新增)\n参数：callback[, thisArg]\n参数说明：参数的使用同上述的forEach、every、map、some、filter方法一致\n返回值：查找到则返回该元素，没找到返回undefined\n原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。\nlet arr = [1, 2, 3, 4, 5];\nlet temp = arr.find((item, index, array) => {\n    return item > 2;\n})\nconsole.log(arr, temp); // [1, 2, 3, 4, 5] 3\n复制代码\n\n**21.findIndex():**\n作用：查找数组中第一个符合条件的元素所在位置的索引，并返回该索引值\n参数：callback[, thisArg]\n参数说明：参数的使用同上述的forEach、every、map、some、filter方法一致\n返回值：查找到则返回该索引值，没找到返回-1\n原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。\nlet arr = [1, 2, 3, 4, 5];\nlet temp = arr.findIndex((item, index, array) => {\n    return item > 2;\n})\nconsole.log(arr, temp); // [1, 2, 3, 4, 5] 2\n复制代码\n\n**22.fill():**\n作用：用指定元素，填充数组从start(包括)到end（不包括）之间的元素，如果该区间内已经有元素，直接替换掉（ES6新增）\n参数：value[, start[, end]]\n返回值：填充后的数组\n原数组是否改变：是\nlet arr = [1, 2, 3, 4, 5];\nlet temp = arr.fill('a', 2, 4);\nconsole.log(arr, temp); // [1, 2, 'a', 'a', 5] [1, 2, 'a', 'a', 5]\n复制代码\n\n**23.includes():**\n作用：判断数组中是否包含指定的元素（ES7新增）\n参数：searchElement[, fromIndex]\n返回值：true或false\n原数组是否改变：否\nlet arr = [1, 2, 3, 4, 5];\nlet temp = arr.includes(5);\nconsole.log(arr, temp); // [1, 2, 3, 4, 5] true\n\n// 这个方法弥补了indexOf查看元素时的一个不足，即查找NaN的误差\nlet arr1 = [NaN, 'a'];\nlet temp1 = arr1.includes(NaN);\nlet temp2 = arr1.indexOf(NaN);\nconsole.log(temp1, temp2); // true -1\n复制代码\n\n**24.toString()、toLocalString():**\n作用：调用数组每一项的toString()方法，返回的是以逗号分隔的字符串\n参数：无\n返回值：转化后的字符串\n原字数组是否改变：否\nlet arr = [1, [1, 2, [4]], {name: \"zhangsan\"}, 3];\nlet temp = arr.toString();\nconsole.log(arr); [ 1, [ 1, 2, [ 4 ] ], { name: 'zhangsan' }, 3 ] \nconsole.log(temp); // '1,1,2,4,[object Object],3'\n复制代码\n\n**25.join():**\n作用：将数组元素转化为字符串(调用每个元素的toString方法)，并使用指定的分隔符（默认为逗号）进行拼接，返回拼接后的字符串\n参数：分隔符，默认为逗号（，）\n返回值：拼接后的字符串\n原数组是否改变：否\nlet arr = [1, [1, 2, [4]], {name: \"zhangsan\"}, 3];\nlet temp = arr.join();\nconsole.log(arr); [ 1, [ 1, 2, [ 4 ] ], { name: 'zhangsan' }, 3 ] \nconsole.log(temp); // '1,1,2,4,[object Object],3'\n\n// 数组求和\nlet arr1 = [1, 2, 3];\nconsole.log(eval(arr1.join('+'))); // 6\n\n**数组扩展运算符（ES6新增）**\n\n数组的扩展运算符可以将数组转化为以逗号分割的参数序列。\n几个简单使用的应用场景：\n\n1.将数组通过扩展运算符转化为参数序列直接传参，无需使用apply转化了let arr = [1, 2, 3];\n\n// apply写法\nMath.min.apply(null, arr)\n\n// 扩展运算符写法\nMath.min(...arr)\n复制代码\n2.可以用于复制和拼接数组let arr1 = [2, 3, 4];\nlet arr2 = ['a', 'b', 'c'];\n\n// 拼接数组arr1和arr2\nconsole.log([...arr1, ...arr2]); // [2, 3, 4, 'a', 'b', 'c']\n复制代码\n3.可用于将字符串分解为真正的数组，[…'hello']  // [ 'h', 'e', 'l', 'l', 'o' ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/js常用数组操作方法.md","raw":"---\ntitle: js常用数组操作方法\ndate: 2019-01-22 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n- 方法\ncategories:\n- 方法\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 开篇\n---\n你真的了解JS数组的那些方法吗？\n\n\n>寄语：\nJS数组的方法非常的丰富和琐碎，学习和使用过程中总是需要反复的记忆、查看文档，但作为JS基础这样真的不应该，我们应该把它记得滚瓜烂熟，深入理解才对。\n但是要怎样才能做到呢？这正是我也本文的初衷，根据个人的经验总结了一下，希望能够帮助和我一样困惑的人，搞定这个头疼的问题。\n\n\n\n**数组的方法**\nJavaScript的数组方法包括数组原型的方法、构造函数的方法（ES6新增部分）\n针对每一个方法我们主要了解四个方面：**作用、参数、返回值、原数组是否改变**\n\n**（一）. 原型上的方法**\n\n**1. push()**\n作用：向数组的末尾添加一项或多项\n参数：ele1[, ele2[, ...[, elen]]]\n返回值：添加元素后数组的长度\n原数组是否改变：是\n\nlet arr = [1, 2, 3];\nlet temp = arr.push('a', 'b');\nconsole.log(arr, temp); // [1, 2, 3, 'a', 'b'] 5\n\n**2. pop()**\n作用：删除数组最后一项\n参数：无\n返回值：删除的那一项\n原数组是否改变：是\n\nlet arr = [1, 2, 3];\nlet temp = arr.pop();\nconsole.log(arr, temp); // [1, 2] 3\n\n**3. unshift()**\n作用：向数组开头添加一项或多项\n参数：ele1[, ele2[, ...[, elen]]]\n返回值：添加元素后数组的长度\n原数组是否改变：是\nlet arr = [1, 2, 3];\nlet temp = arr.unshift('a', 'b');\nconsole.log(arr, temp); // ['a', 'b', 1, 2, 3] 5\n\n**4. splice()**\n作用：删除、插入、替换数组项\n参数：startIndex[, deleteCount[, item1[, ...[, itemN]]]]\n返回值：删除项组成的数组\n原数组是否改变：是\nlet arr = [1, 2, 3];\n\n// 插入元素\nlet temp = arr.splice(1, 0, 'a', 'b'); // 在索引1的位置插入元素'a'和'b' \nconsole.log(arr, temp); // [1, 'a', 'b', 2, 3] []\n\n// 删除元素\nlet temp1 = arr.splice(1, 2); // 删除从索引1的位置开始的2项 \nconsole.log(arr, temp1); // [1, 2, 3] ['a', 'b']\n\n// 替换一个元素\nlet temp2 = arr.splice(1, 1, 'a'); // 将索引1的位置的元素替换为'a'\nconsole.log(arr, temp2); // [1, 'a', 3 ] [2]\n\n// 替换多个元素\nlet temp3 = arr.splice(0, 2, 'b', 'c'); // 将索引0的位置开始的两项，替换成’b‘和’c‘\nconsole.log(arr, temp3); // [’b‘, 'c', 3] [1, 'a']\n\n// 只传第一个参数，则删除从第一个参数指定的位置到数组结尾的所有项\nlet temp4 = arr.splice(0); //从索引0的位置开始，删除后面的所有项\nconsole.log(arr, temp4); // [] [’b‘, 'c', 3]\n\n**6. copyWithin()**\n\n作用：将数组指定位置（start到end）的元素复制到当前数组的其他位置（target开始），这种复制会替换原位置的元素（ES6新增）\n参数说明：target[,start[,end]]\n参数说明：\n\ntarget: 复制的目标位置（包括），即要被替换的元素开始的位置\nstart: 要copy的元素的开始位置，默认0\nend: 要copy的元素的结束位置，默认为数组最后一个元素\n\n返回值：复制替换之后的数组\n原数组是否改变：是\nlet arr = [1, 2, 3, 4, 5];\n// 用索引0~4范围内的元素，替换索引3~4范围内的元素，因为要替换的位置只有两个，所以只将4，5替换为了1，2\nlet temp = arr.copyWithin(3);\nconsole.log(arr, temp); //  [1, 2, 3, 1, 2] [1, 2, 3, 1, 2]\n\nlet arr1 = [1, 2, 3, 4, 5];\n// 用索引2~4范围内的元素，替换索引3~4范围内的元素，因为要替换的位置只有两个，所以只将4，5替换为了3，4\nlet temp1 = arr1.copyWithin(3, 2);\nconsole.log(arr1, temp1); // [1, 2, 3, 3, 4] [1, 2, 3, 3, 4]\n\n>小结：\n总结上述的描述，copyWithin的作用就是在数组长度的范围内，复制start(包括)到end(不包括)范围内的元素，然后用上述的元替换掉从target（包括）开始到数组结尾的元素，能替换多少就替换多少\n\n**7. reverse**\n作用：翻转原数组\n参数：无\n返回值：翻转后的数组\n原数组是否改变：是\nlet arr = [1, 2, 3];\nlet temp = arr.reverse();\nconsole.log(arr, temp); // [ 3, 2, 1 ] [ 3, 2, 1 ]\n\n**8. sort()**\n作用：数组排序\n参数：compareFunction\n参数说明：\n\ncompareFunction返回值大于0时调换当前比对项的顺序，否则顺序不 变;\n参数可以不传，不传默认按照Unicode编码的顺序排列\n返回值：排序后的数组\n原数组是否改变：是\n// 数组从小到大排序\nlet arr = [1, 4, 6, 7, 8, 3, 2];\nlet temp = arr.sort((a, b) => {\n    return a - b;\n})\nconsole.log(arr, temp); // [ 1, 2, 3, 4, 6, 7, 8 ] [ 1, 2, 3, 4, 6, 7, 8 ]\n\n// 一个实用的数组排序的例子，根据对象元素的排序，排序对象在数组中的位置\nlet objArr = [{id: 3, name: \"lilei\"},{id: 1, name: \"hanmeimei\"},{id: 2, name: \"yimi\"}];\nlet tempArr = objArr.sort((a, b) => {\n    // 按照id从小到大的顺序，对数组中的对象进行排序\n    // 这个示例说明回调函数的形参a,b实际就是数组中当前进行比对的两个元素\n    return a.id - b.id;\n}); \nconsole.log(objArr); //  [{id: 1, name: 'hanmeimei'}, {id: 2, name: 'yimi'}, { id: 3, name: 'lilei' }]\nconsole.log(tempArr); // [{id: 1, name: 'hanmeimei'}, {id: 2, name: 'yimi'}, { id: 3, name: 'lilei'}]\n\n**9. concat** \n作用：基于当前的数组拼接数组\n参数：value1[, value2[, ...[, valueN]]\n参数说明：\n\n参数的类型可以是任意类型。\n不是数组类型直接按顺序拼接到数组末尾，数组类型的则将数组元素逐一取出拼接到数组末尾\n不传则相当于复制数组\n\n返回值：拼接后的数组\n原数组是否改变：否\n\nlet arr = [1,2];\nlet temp = arr.concat('a', {id:1}, ['lilei', 'hanmeimei']);\nconsole.log(arr, temp); // [ 1, 2 ] [ 1, 2, 'a', { id: 1 }, 'lilei', 'hanmeimei']\n\n// 用于复制数组\nlet arr = [1, 2];\nlet temp = arr.concat();\nconsole.log(arr, temp);  // [ 1, 2 ] [ 1, 2 ]\n\n**10. slice()**\n作用：基于当前数组的一项或多项创建一个新的数组\n参数：startIndex[,endIndex]\n参数说明：返回的元素包含startIndex位置的元素，但不包括endIndex位置的元素\n返回值：返回截取的元素组成的数组\n原数组是否改变：否\n\nlet arr = [0, 1, 2, 3, 4];\nlet temp = arr.slice(1,3); // 返回从索引1（包括）位置到索引3（不包括）位置之前的元素\nconsole.log(arr, temp); // [0, 1, 2, 3, 4] [1, 2]\n\n// 用于复制数组\nlet arr = [0, 1, 2, 3, 4];\nlet temp = arr.slice(0); // 返回从索引0（包括）位置到数组结尾的所有元素\nconsole.log(arr, temp); // [0, 1, 2, 3, 4] [0, 1, 2, 3, 4]\n\n**11.indexOf()**:\n作用：从数组开头查找元素在数组中的索引位置（ES5的方法）\n参数：searchElement[, fromIndex]\n返回值：searchElement在数组中的索引，没找到searchElement则返回-1\n原数组是否改变：否\nlet arr = [1, 2, 3, 4, 5, 6, 2];\n// 从数组开头开始查找\nlet temp = arr.indexOf(2);\nconsole.log(arr, temp); // [ 1, 2, 3, 4, 5, 6, 2 ] 1\n// 从指定的位置开始查找\nlet temp1 = arr.indexOf(2,3); // 从索引3(包括)的位置向后查找元素2\nconsole.log(arr, temp1); // [ 1, 2, 3, 4, 5, 6, 2 ] 6\n复制代码\n\n**12.lastIndexOf():**\n作用：从数组结尾查找元素在数组中的索引位置（ES5的方法）\n参数：searchElement[, fromIndex]\n返回值：searchElement在数组中的索引，没找到searchElement则返回-1\n原数组是否改变：否\nlet arr = [1, 2, 3, 4, 5, 6, 2];\n// 从数组末尾开始查找\nlet temp = arr.lastIndexOf(2);\nconsole.log(arr, temp); // [ 1, 2, 3, 4, 5, 6, 2 ] 6\n// 从指定的位置开始查找\nlet temp1 = arr.lastIndexOf(2,3); // 从索引3(包括)的位置向前查找元素2\nconsole.log(arr, temp1); // [ 1, 2, 3, 4, 5, 6, 2 ] 1\n复制代码\n\n**13.every():**\n作用：对数组中的每一项运行给定函数，如果该函数对每一项都返回true,则返回true（ES5方法）\n参数：callback[, thisArg]\n参数说明：callback有三个参数item(当前项),index(当前项索引)，array(数组对象本身)\n返回值：true 或 false\n原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。\nlet arr = [1, 2, 3, 4];\nlet temp = arr.every((item, index, array) => {\n    return item > 2;\n});\nconsole.log(arr, temp); // [ 1, 2, 3, 4 ] false\n\n// 方法的第二个参数可选，作用是设定第一个参数中的this指向，如果使用第二个参数，注意callback不能是箭头函数\n// 后面的迭代方法涉及此参数的，用法相同，不在赘述\nlet arr = [1, 2, 3, 4];\nlet temp = arr.every(function(item, index, array) {\n    return item > this.id;\n}, {id: 2});\nconsole.log(arr, temp); // [ 1, 2, 3, 4 ] false\n复制代码\n\n**14.some():**\n作用：对数组中的每一项运行给定函数，如果该函数对任意一项返回true,则返回true（ES5方法）\n参数：callback[, thisArg]\n参数说明：callback有三个参数item(当前项),index(当前项索引)，array(数组对象本身)\n返回值：true 或 false\n原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。\nlet arr = [1, 2, 3, 4];\nlet temp = arr.some((item, index, array) => {\n    return item > 2;\n});\nconsole.log(arr, temp); // [ 1, 2, 3, 4 ] true\n复制代码\n\n**15.filter():**\n作用：对数组中的每一项运行给定函数，返回该函数返回true的项组成的数组（ES5方法）\n参数：callback[, thisArg]\n参数说明：callback有三个参数item(当前项),index(当前项索引)，array(数组对象本身)\n返回值：函数返回true的项组成的数组\n原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。\nlet arr = [1, 2, 3, 4];\nlet temp = arr.filter((item, index, array) => {\n    return item > 2;\n});\nconsole.log(arr, temp); // [ 1, 2, 3, 4 ] [3, 4]\n复制代码\n\n**16.map():**\n作用：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组（ES5方法）\n参数：callback[, thisArg]\n参数说明：callback有三个参数item(当前项),index(当前项索引)，array(数组对象本身)\n返回值：函数每次调用结果组成的数组\n原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。\nlet arr = [1, 2, 3, 4];\nlet temp = arr.map((item, index, array) => {\n    return item * item;\n});\nconsole.log(arr, temp); // [ 1, 2, 3, 4 ] [ 1, 4, 9, 16]\n复制代码\n\n**17.forEach():**\n作用：对数组中的每一项运行给定函数。无返回值（ES5方法）\n参数：callback[, thisArg]\n参数说明：callback有三个参数item(当前项),index(当前项索引)，array(数组对象本身)\n返回值：无\n原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。\nlet arr = [1, 2, 3, 4];\nlet temp = arr.forEach((item, index, array) => {\n    // 不会有返回值，但可在这里执行某些操作\n    return item * item;\n});\nconsole.log(arr, temp); // [ 1, 2, 3, 4 ] undefined\n复制代码\n注意：\nforEach在所有项都遍历完成之前，无法像for循环一样提前终止循环\n\n\n\n**18.reduce():**\n作用：从数组的第一项开始，逐步遍历到最后，迭代数组的所有项（ES5方法）\n参数：callback[, initialValue]\n参数说明：\n\ncallback迭代函数，有四个参数（prev, cur, index, array）\n\nprev 前一个值，（initialValue || 数组第一项 || 上一次迭代的结果）\ncur 当前迭代项\nindex 当前迭代项索引\narray 迭代的原数组\n\n\ninitialValue 迭代的基础值，不传基础值是数组第一项\n\n返回值：数组迭代后，整体的迭代结果\n原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。\n// 数组求和\nlet arr = [1, 2, 3];\nlet sum = arr.reduce((prev, cur, index, array) => {\n    return prev + cur;\n});\nconsole.log(arr, sum); // [ 1, 2, 3 ] 6\n\n// 传initialValue 基础值的示例\nlet sum1 = arr.reduce((prev, cur, index, array) => {\n    return prev + cur;\n}, 10);\n// 返回的值是：10+1+2+3\nconsole.log(arr, sum1); // [ 1, 2, 3 ] 16\n复制代码\nreduce源码的实现：\nArray.prototype.myReduce = function(callback, initialVal){\n   let prev = initialVal || this[0]; \n    for(var i = pre ? 0 : 1; i < this.length; i++){\n        prev = callback(prev, this[i], i, this);\n   }\n   return prev\n}\n复制代码\n\n\n**19.reduceRight():**\n作用：从数组的最后一项开始，逐步遍历到第一项，迭代数组的所有项（ES5方法）\n参数：callback[, initialValue]\n参数说明：\n\ncallback迭代函数，有四个参数（prev, cur, index, array）\n\nprev 前一个值，（initialValue || 数组第一项 || 上一次迭代的结果）\ncur 当前迭代项\nindex 当前迭代项索引\narray 迭代的原数组\n\n\ninitialValue 迭代的基础值，不传基础值是数组第一项\n\n返回值：数组迭代后，整体的迭代结果\n原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。\n// 拼接字符串,从后向前迭代数组进行拼接\nlet arr = ['h', 'e', 'l', 'l', 'o'];\nlet str = arr.reduceRight((prev, cur, index, array) => {\n    return prev + cur;\n});\nconsole.log(arr, str); // [ 'h', 'e', 'l', 'l', 'o' ] 'olleh'\n复制代码\n\n**20.find():**\n作用：查找数组中第一个符合条件的元素，返回该元素 (ES6新增)\n参数：callback[, thisArg]\n参数说明：参数的使用同上述的forEach、every、map、some、filter方法一致\n返回值：查找到则返回该元素，没找到返回undefined\n原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。\nlet arr = [1, 2, 3, 4, 5];\nlet temp = arr.find((item, index, array) => {\n    return item > 2;\n})\nconsole.log(arr, temp); // [1, 2, 3, 4, 5] 3\n复制代码\n\n**21.findIndex():**\n作用：查找数组中第一个符合条件的元素所在位置的索引，并返回该索引值\n参数：callback[, thisArg]\n参数说明：参数的使用同上述的forEach、every、map、some、filter方法一致\n返回值：查找到则返回该索引值，没找到返回-1\n原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。\nlet arr = [1, 2, 3, 4, 5];\nlet temp = arr.findIndex((item, index, array) => {\n    return item > 2;\n})\nconsole.log(arr, temp); // [1, 2, 3, 4, 5] 2\n复制代码\n\n**22.fill():**\n作用：用指定元素，填充数组从start(包括)到end（不包括）之间的元素，如果该区间内已经有元素，直接替换掉（ES6新增）\n参数：value[, start[, end]]\n返回值：填充后的数组\n原数组是否改变：是\nlet arr = [1, 2, 3, 4, 5];\nlet temp = arr.fill('a', 2, 4);\nconsole.log(arr, temp); // [1, 2, 'a', 'a', 5] [1, 2, 'a', 'a', 5]\n复制代码\n\n**23.includes():**\n作用：判断数组中是否包含指定的元素（ES7新增）\n参数：searchElement[, fromIndex]\n返回值：true或false\n原数组是否改变：否\nlet arr = [1, 2, 3, 4, 5];\nlet temp = arr.includes(5);\nconsole.log(arr, temp); // [1, 2, 3, 4, 5] true\n\n// 这个方法弥补了indexOf查看元素时的一个不足，即查找NaN的误差\nlet arr1 = [NaN, 'a'];\nlet temp1 = arr1.includes(NaN);\nlet temp2 = arr1.indexOf(NaN);\nconsole.log(temp1, temp2); // true -1\n复制代码\n\n**24.toString()、toLocalString():**\n作用：调用数组每一项的toString()方法，返回的是以逗号分隔的字符串\n参数：无\n返回值：转化后的字符串\n原字数组是否改变：否\nlet arr = [1, [1, 2, [4]], {name: \"zhangsan\"}, 3];\nlet temp = arr.toString();\nconsole.log(arr); [ 1, [ 1, 2, [ 4 ] ], { name: 'zhangsan' }, 3 ] \nconsole.log(temp); // '1,1,2,4,[object Object],3'\n复制代码\n\n**25.join():**\n作用：将数组元素转化为字符串(调用每个元素的toString方法)，并使用指定的分隔符（默认为逗号）进行拼接，返回拼接后的字符串\n参数：分隔符，默认为逗号（，）\n返回值：拼接后的字符串\n原数组是否改变：否\nlet arr = [1, [1, 2, [4]], {name: \"zhangsan\"}, 3];\nlet temp = arr.join();\nconsole.log(arr); [ 1, [ 1, 2, [ 4 ] ], { name: 'zhangsan' }, 3 ] \nconsole.log(temp); // '1,1,2,4,[object Object],3'\n\n// 数组求和\nlet arr1 = [1, 2, 3];\nconsole.log(eval(arr1.join('+'))); // 6\n\n**数组扩展运算符（ES6新增）**\n\n数组的扩展运算符可以将数组转化为以逗号分割的参数序列。\n几个简单使用的应用场景：\n\n1.将数组通过扩展运算符转化为参数序列直接传参，无需使用apply转化了let arr = [1, 2, 3];\n\n// apply写法\nMath.min.apply(null, arr)\n\n// 扩展运算符写法\nMath.min(...arr)\n复制代码\n2.可以用于复制和拼接数组let arr1 = [2, 3, 4];\nlet arr2 = ['a', 'b', 'c'];\n\n// 拼接数组arr1和arr2\nconsole.log([...arr1, ...arr2]); // [2, 3, 4, 'a', 'b', 'c']\n复制代码\n3.可用于将字符串分解为真正的数组，[…'hello']  // [ 'h', 'e', 'l', 'l', 'o' ]\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"js常用数组操作方法","published":1,"updated":"2020-05-28T07:51:13.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckari24ys001g5sjoomasvs6q","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h1><hr>\n<p>你真的了解JS数组的那些方法吗？</p>\n<blockquote>\n<p>寄语：<br>JS数组的方法非常的丰富和琐碎，学习和使用过程中总是需要反复的记忆、查看文档，但作为JS基础这样真的不应该，我们应该把它记得滚瓜烂熟，深入理解才对。<br>但是要怎样才能做到呢？这正是我也本文的初衷，根据个人的经验总结了一下，希望能够帮助和我一样困惑的人，搞定这个头疼的问题。</p>\n</blockquote>\n<p><strong>数组的方法</strong><br>JavaScript的数组方法包括数组原型的方法、构造函数的方法（ES6新增部分）<br>针对每一个方法我们主要了解四个方面：<strong>作用、参数、返回值、原数组是否改变</strong></p>\n<p><strong>（一）. 原型上的方法</strong></p>\n<p><strong>1. push()</strong><br>作用：向数组的末尾添加一项或多项<br>参数：ele1[, ele2[, …[, elen]]]<br>返回值：添加元素后数组的长度<br>原数组是否改变：是</p>\n<p>let arr = [1, 2, 3];<br>let temp = arr.push(‘a’, ‘b’);<br>console.log(arr, temp); // [1, 2, 3, ‘a’, ‘b’] 5</p>\n<p><strong>2. pop()</strong><br>作用：删除数组最后一项<br>参数：无<br>返回值：删除的那一项<br>原数组是否改变：是</p>\n<p>let arr = [1, 2, 3];<br>let temp = arr.pop();<br>console.log(arr, temp); // [1, 2] 3</p>\n<p><strong>3. unshift()</strong><br>作用：向数组开头添加一项或多项<br>参数：ele1[, ele2[, …[, elen]]]<br>返回值：添加元素后数组的长度<br>原数组是否改变：是<br>let arr = [1, 2, 3];<br>let temp = arr.unshift(‘a’, ‘b’);<br>console.log(arr, temp); // [‘a’, ‘b’, 1, 2, 3] 5</p>\n<p><strong>4. splice()</strong><br>作用：删除、插入、替换数组项<br>参数：startIndex[, deleteCount[, item1[, …[, itemN]]]]<br>返回值：删除项组成的数组<br>原数组是否改变：是<br>let arr = [1, 2, 3];</p>\n<p>// 插入元素<br>let temp = arr.splice(1, 0, ‘a’, ‘b’); // 在索引1的位置插入元素’a’和’b’<br>console.log(arr, temp); // [1, ‘a’, ‘b’, 2, 3] []</p>\n<p>// 删除元素<br>let temp1 = arr.splice(1, 2); // 删除从索引1的位置开始的2项<br>console.log(arr, temp1); // [1, 2, 3] [‘a’, ‘b’]</p>\n<p>// 替换一个元素<br>let temp2 = arr.splice(1, 1, ‘a’); // 将索引1的位置的元素替换为’a’<br>console.log(arr, temp2); // [1, ‘a’, 3 ] [2]</p>\n<p>// 替换多个元素<br>let temp3 = arr.splice(0, 2, ‘b’, ‘c’); // 将索引0的位置开始的两项，替换成’b‘和’c‘<br>console.log(arr, temp3); // [’b‘, ‘c’, 3] [1, ‘a’]</p>\n<p>// 只传第一个参数，则删除从第一个参数指定的位置到数组结尾的所有项<br>let temp4 = arr.splice(0); //从索引0的位置开始，删除后面的所有项<br>console.log(arr, temp4); // [] [’b‘, ‘c’, 3]</p>\n<p><strong>6. copyWithin()</strong></p>\n<p>作用：将数组指定位置（start到end）的元素复制到当前数组的其他位置（target开始），这种复制会替换原位置的元素（ES6新增）<br>参数说明：target[,start[,end]]<br>参数说明：</p>\n<p>target: 复制的目标位置（包括），即要被替换的元素开始的位置<br>start: 要copy的元素的开始位置，默认0<br>end: 要copy的元素的结束位置，默认为数组最后一个元素</p>\n<p>返回值：复制替换之后的数组<br>原数组是否改变：是<br>let arr = [1, 2, 3, 4, 5];<br>// 用索引0<del>4范围内的元素，替换索引3</del>4范围内的元素，因为要替换的位置只有两个，所以只将4，5替换为了1，2<br>let temp = arr.copyWithin(3);<br>console.log(arr, temp); //  [1, 2, 3, 1, 2] [1, 2, 3, 1, 2]</p>\n<p>let arr1 = [1, 2, 3, 4, 5];<br>// 用索引2<del>4范围内的元素，替换索引3</del>4范围内的元素，因为要替换的位置只有两个，所以只将4，5替换为了3，4<br>let temp1 = arr1.copyWithin(3, 2);<br>console.log(arr1, temp1); // [1, 2, 3, 3, 4] [1, 2, 3, 3, 4]</p>\n<blockquote>\n<p>小结：<br>总结上述的描述，copyWithin的作用就是在数组长度的范围内，复制start(包括)到end(不包括)范围内的元素，然后用上述的元替换掉从target（包括）开始到数组结尾的元素，能替换多少就替换多少</p>\n</blockquote>\n<p><strong>7. reverse</strong><br>作用：翻转原数组<br>参数：无<br>返回值：翻转后的数组<br>原数组是否改变：是<br>let arr = [1, 2, 3];<br>let temp = arr.reverse();<br>console.log(arr, temp); // [ 3, 2, 1 ] [ 3, 2, 1 ]</p>\n<p><strong>8. sort()</strong><br>作用：数组排序<br>参数：compareFunction<br>参数说明：</p>\n<p>compareFunction返回值大于0时调换当前比对项的顺序，否则顺序不 变;<br>参数可以不传，不传默认按照Unicode编码的顺序排列<br>返回值：排序后的数组<br>原数组是否改变：是<br>// 数组从小到大排序<br>let arr = [1, 4, 6, 7, 8, 3, 2];<br>let temp = arr.sort((a, b) =&gt; {<br>    return a - b;<br>})<br>console.log(arr, temp); // [ 1, 2, 3, 4, 6, 7, 8 ] [ 1, 2, 3, 4, 6, 7, 8 ]</p>\n<p>// 一个实用的数组排序的例子，根据对象元素的排序，排序对象在数组中的位置<br>let objArr = [{id: 3, name: “lilei”},{id: 1, name: “hanmeimei”},{id: 2, name: “yimi”}];<br>let tempArr = objArr.sort((a, b) =&gt; {<br>    // 按照id从小到大的顺序，对数组中的对象进行排序<br>    // 这个示例说明回调函数的形参a,b实际就是数组中当前进行比对的两个元素<br>    return a.id - b.id;<br>});<br>console.log(objArr); //  [{id: 1, name: ‘hanmeimei’}, {id: 2, name: ‘yimi’}, { id: 3, name: ‘lilei’ }]<br>console.log(tempArr); // [{id: 1, name: ‘hanmeimei’}, {id: 2, name: ‘yimi’}, { id: 3, name: ‘lilei’}]</p>\n<p><strong>9. concat</strong><br>作用：基于当前的数组拼接数组<br>参数：value1[, value2[, …[, valueN]]<br>参数说明：</p>\n<p>参数的类型可以是任意类型。<br>不是数组类型直接按顺序拼接到数组末尾，数组类型的则将数组元素逐一取出拼接到数组末尾<br>不传则相当于复制数组</p>\n<p>返回值：拼接后的数组<br>原数组是否改变：否</p>\n<p>let arr = [1,2];<br>let temp = arr.concat(‘a’, {id:1}, [‘lilei’, ‘hanmeimei’]);<br>console.log(arr, temp); // [ 1, 2 ] [ 1, 2, ‘a’, { id: 1 }, ‘lilei’, ‘hanmeimei’]</p>\n<p>// 用于复制数组<br>let arr = [1, 2];<br>let temp = arr.concat();<br>console.log(arr, temp);  // [ 1, 2 ] [ 1, 2 ]</p>\n<p><strong>10. slice()</strong><br>作用：基于当前数组的一项或多项创建一个新的数组<br>参数：startIndex[,endIndex]<br>参数说明：返回的元素包含startIndex位置的元素，但不包括endIndex位置的元素<br>返回值：返回截取的元素组成的数组<br>原数组是否改变：否</p>\n<p>let arr = [0, 1, 2, 3, 4];<br>let temp = arr.slice(1,3); // 返回从索引1（包括）位置到索引3（不包括）位置之前的元素<br>console.log(arr, temp); // [0, 1, 2, 3, 4] [1, 2]</p>\n<p>// 用于复制数组<br>let arr = [0, 1, 2, 3, 4];<br>let temp = arr.slice(0); // 返回从索引0（包括）位置到数组结尾的所有元素<br>console.log(arr, temp); // [0, 1, 2, 3, 4] [0, 1, 2, 3, 4]</p>\n<p><strong>11.indexOf()</strong>:<br>作用：从数组开头查找元素在数组中的索引位置（ES5的方法）<br>参数：searchElement[, fromIndex]<br>返回值：searchElement在数组中的索引，没找到searchElement则返回-1<br>原数组是否改变：否<br>let arr = [1, 2, 3, 4, 5, 6, 2];<br>// 从数组开头开始查找<br>let temp = arr.indexOf(2);<br>console.log(arr, temp); // [ 1, 2, 3, 4, 5, 6, 2 ] 1<br>// 从指定的位置开始查找<br>let temp1 = arr.indexOf(2,3); // 从索引3(包括)的位置向后查找元素2<br>console.log(arr, temp1); // [ 1, 2, 3, 4, 5, 6, 2 ] 6<br>复制代码</p>\n<p><strong>12.lastIndexOf():</strong><br>作用：从数组结尾查找元素在数组中的索引位置（ES5的方法）<br>参数：searchElement[, fromIndex]<br>返回值：searchElement在数组中的索引，没找到searchElement则返回-1<br>原数组是否改变：否<br>let arr = [1, 2, 3, 4, 5, 6, 2];<br>// 从数组末尾开始查找<br>let temp = arr.lastIndexOf(2);<br>console.log(arr, temp); // [ 1, 2, 3, 4, 5, 6, 2 ] 6<br>// 从指定的位置开始查找<br>let temp1 = arr.lastIndexOf(2,3); // 从索引3(包括)的位置向前查找元素2<br>console.log(arr, temp1); // [ 1, 2, 3, 4, 5, 6, 2 ] 1<br>复制代码</p>\n<p><strong>13.every():</strong><br>作用：对数组中的每一项运行给定函数，如果该函数对每一项都返回true,则返回true（ES5方法）<br>参数：callback[, thisArg]<br>参数说明：callback有三个参数item(当前项),index(当前项索引)，array(数组对象本身)<br>返回值：true 或 false<br>原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。<br>let arr = [1, 2, 3, 4];<br>let temp = arr.every((item, index, array) =&gt; {<br>    return item &gt; 2;<br>});<br>console.log(arr, temp); // [ 1, 2, 3, 4 ] false</p>\n<p>// 方法的第二个参数可选，作用是设定第一个参数中的this指向，如果使用第二个参数，注意callback不能是箭头函数<br>// 后面的迭代方法涉及此参数的，用法相同，不在赘述<br>let arr = [1, 2, 3, 4];<br>let temp = arr.every(function(item, index, array) {<br>    return item &gt; this.id;<br>}, {id: 2});<br>console.log(arr, temp); // [ 1, 2, 3, 4 ] false<br>复制代码</p>\n<p><strong>14.some():</strong><br>作用：对数组中的每一项运行给定函数，如果该函数对任意一项返回true,则返回true（ES5方法）<br>参数：callback[, thisArg]<br>参数说明：callback有三个参数item(当前项),index(当前项索引)，array(数组对象本身)<br>返回值：true 或 false<br>原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。<br>let arr = [1, 2, 3, 4];<br>let temp = arr.some((item, index, array) =&gt; {<br>    return item &gt; 2;<br>});<br>console.log(arr, temp); // [ 1, 2, 3, 4 ] true<br>复制代码</p>\n<p><strong>15.filter():</strong><br>作用：对数组中的每一项运行给定函数，返回该函数返回true的项组成的数组（ES5方法）<br>参数：callback[, thisArg]<br>参数说明：callback有三个参数item(当前项),index(当前项索引)，array(数组对象本身)<br>返回值：函数返回true的项组成的数组<br>原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。<br>let arr = [1, 2, 3, 4];<br>let temp = arr.filter((item, index, array) =&gt; {<br>    return item &gt; 2;<br>});<br>console.log(arr, temp); // [ 1, 2, 3, 4 ] [3, 4]<br>复制代码</p>\n<p><strong>16.map():</strong><br>作用：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组（ES5方法）<br>参数：callback[, thisArg]<br>参数说明：callback有三个参数item(当前项),index(当前项索引)，array(数组对象本身)<br>返回值：函数每次调用结果组成的数组<br>原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。<br>let arr = [1, 2, 3, 4];<br>let temp = arr.map((item, index, array) =&gt; {<br>    return item * item;<br>});<br>console.log(arr, temp); // [ 1, 2, 3, 4 ] [ 1, 4, 9, 16]<br>复制代码</p>\n<p><strong>17.forEach():</strong><br>作用：对数组中的每一项运行给定函数。无返回值（ES5方法）<br>参数：callback[, thisArg]<br>参数说明：callback有三个参数item(当前项),index(当前项索引)，array(数组对象本身)<br>返回值：无<br>原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。<br>let arr = [1, 2, 3, 4];<br>let temp = arr.forEach((item, index, array) =&gt; {<br>    // 不会有返回值，但可在这里执行某些操作<br>    return item * item;<br>});<br>console.log(arr, temp); // [ 1, 2, 3, 4 ] undefined<br>复制代码<br>注意：<br>forEach在所有项都遍历完成之前，无法像for循环一样提前终止循环</p>\n<p><strong>18.reduce():</strong><br>作用：从数组的第一项开始，逐步遍历到最后，迭代数组的所有项（ES5方法）<br>参数：callback[, initialValue]<br>参数说明：</p>\n<p>callback迭代函数，有四个参数（prev, cur, index, array）</p>\n<p>prev 前一个值，（initialValue || 数组第一项 || 上一次迭代的结果）<br>cur 当前迭代项<br>index 当前迭代项索引<br>array 迭代的原数组</p>\n<p>initialValue 迭代的基础值，不传基础值是数组第一项</p>\n<p>返回值：数组迭代后，整体的迭代结果<br>原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。<br>// 数组求和<br>let arr = [1, 2, 3];<br>let sum = arr.reduce((prev, cur, index, array) =&gt; {<br>    return prev + cur;<br>});<br>console.log(arr, sum); // [ 1, 2, 3 ] 6</p>\n<p>// 传initialValue 基础值的示例<br>let sum1 = arr.reduce((prev, cur, index, array) =&gt; {<br>    return prev + cur;<br>}, 10);<br>// 返回的值是：10+1+2+3<br>console.log(arr, sum1); // [ 1, 2, 3 ] 16<br>复制代码<br>reduce源码的实现：<br>Array.prototype.myReduce = function(callback, initialVal){<br>   let prev = initialVal || this[0];<br>    for(var i = pre ? 0 : 1; i &lt; this.length; i++){<br>        prev = callback(prev, this[i], i, this);<br>   }<br>   return prev<br>}<br>复制代码</p>\n<p><strong>19.reduceRight():</strong><br>作用：从数组的最后一项开始，逐步遍历到第一项，迭代数组的所有项（ES5方法）<br>参数：callback[, initialValue]<br>参数说明：</p>\n<p>callback迭代函数，有四个参数（prev, cur, index, array）</p>\n<p>prev 前一个值，（initialValue || 数组第一项 || 上一次迭代的结果）<br>cur 当前迭代项<br>index 当前迭代项索引<br>array 迭代的原数组</p>\n<p>initialValue 迭代的基础值，不传基础值是数组第一项</p>\n<p>返回值：数组迭代后，整体的迭代结果<br>原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。<br>// 拼接字符串,从后向前迭代数组进行拼接<br>let arr = [‘h’, ‘e’, ‘l’, ‘l’, ‘o’];<br>let str = arr.reduceRight((prev, cur, index, array) =&gt; {<br>    return prev + cur;<br>});<br>console.log(arr, str); // [ ‘h’, ‘e’, ‘l’, ‘l’, ‘o’ ] ‘olleh’<br>复制代码</p>\n<p><strong>20.find():</strong><br>作用：查找数组中第一个符合条件的元素，返回该元素 (ES6新增)<br>参数：callback[, thisArg]<br>参数说明：参数的使用同上述的forEach、every、map、some、filter方法一致<br>返回值：查找到则返回该元素，没找到返回undefined<br>原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。<br>let arr = [1, 2, 3, 4, 5];<br>let temp = arr.find((item, index, array) =&gt; {<br>    return item &gt; 2;<br>})<br>console.log(arr, temp); // [1, 2, 3, 4, 5] 3<br>复制代码</p>\n<p><strong>21.findIndex():</strong><br>作用：查找数组中第一个符合条件的元素所在位置的索引，并返回该索引值<br>参数：callback[, thisArg]<br>参数说明：参数的使用同上述的forEach、every、map、some、filter方法一致<br>返回值：查找到则返回该索引值，没找到返回-1<br>原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。<br>let arr = [1, 2, 3, 4, 5];<br>let temp = arr.findIndex((item, index, array) =&gt; {<br>    return item &gt; 2;<br>})<br>console.log(arr, temp); // [1, 2, 3, 4, 5] 2<br>复制代码</p>\n<p><strong>22.fill():</strong><br>作用：用指定元素，填充数组从start(包括)到end（不包括）之间的元素，如果该区间内已经有元素，直接替换掉（ES6新增）<br>参数：value[, start[, end]]<br>返回值：填充后的数组<br>原数组是否改变：是<br>let arr = [1, 2, 3, 4, 5];<br>let temp = arr.fill(‘a’, 2, 4);<br>console.log(arr, temp); // [1, 2, ‘a’, ‘a’, 5] [1, 2, ‘a’, ‘a’, 5]<br>复制代码</p>\n<p><strong>23.includes():</strong><br>作用：判断数组中是否包含指定的元素（ES7新增）<br>参数：searchElement[, fromIndex]<br>返回值：true或false<br>原数组是否改变：否<br>let arr = [1, 2, 3, 4, 5];<br>let temp = arr.includes(5);<br>console.log(arr, temp); // [1, 2, 3, 4, 5] true</p>\n<p>// 这个方法弥补了indexOf查看元素时的一个不足，即查找NaN的误差<br>let arr1 = [NaN, ‘a’];<br>let temp1 = arr1.includes(NaN);<br>let temp2 = arr1.indexOf(NaN);<br>console.log(temp1, temp2); // true -1<br>复制代码</p>\n<p><strong>24.toString()、toLocalString():</strong><br>作用：调用数组每一项的toString()方法，返回的是以逗号分隔的字符串<br>参数：无<br>返回值：转化后的字符串<br>原字数组是否改变：否<br>let arr = [1, [1, 2, [4]], {name: “zhangsan”}, 3];<br>let temp = arr.toString();<br>console.log(arr); [ 1, [ 1, 2, [ 4 ] ], { name: ‘zhangsan’ }, 3 ]<br>console.log(temp); // ‘1,1,2,4,[object Object],3’<br>复制代码</p>\n<p><strong>25.join():</strong><br>作用：将数组元素转化为字符串(调用每个元素的toString方法)，并使用指定的分隔符（默认为逗号）进行拼接，返回拼接后的字符串<br>参数：分隔符，默认为逗号（，）<br>返回值：拼接后的字符串<br>原数组是否改变：否<br>let arr = [1, [1, 2, [4]], {name: “zhangsan”}, 3];<br>let temp = arr.join();<br>console.log(arr); [ 1, [ 1, 2, [ 4 ] ], { name: ‘zhangsan’ }, 3 ]<br>console.log(temp); // ‘1,1,2,4,[object Object],3’</p>\n<p>// 数组求和<br>let arr1 = [1, 2, 3];<br>console.log(eval(arr1.join(‘+’))); // 6</p>\n<p><strong>数组扩展运算符（ES6新增）</strong></p>\n<p>数组的扩展运算符可以将数组转化为以逗号分割的参数序列。<br>几个简单使用的应用场景：</p>\n<p>1.将数组通过扩展运算符转化为参数序列直接传参，无需使用apply转化了let arr = [1, 2, 3];</p>\n<p>// apply写法<br>Math.min.apply(null, arr)</p>\n<p>// 扩展运算符写法<br>Math.min(…arr)<br>复制代码<br>2.可以用于复制和拼接数组let arr1 = [2, 3, 4];<br>let arr2 = [‘a’, ‘b’, ‘c’];</p>\n<p>// 拼接数组arr1和arr2<br>console.log([…arr1, …arr2]); // [2, 3, 4, ‘a’, ‘b’, ‘c’]<br>复制代码<br>3.可用于将字符串分解为真正的数组，[…’hello’]  // [ ‘h’, ‘e’, ‘l’, ‘l’, ‘o’ ]</p>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h1><hr>\n<p>你真的了解JS数组的那些方法吗？</p>\n<blockquote>\n<p>寄语：<br>JS数组的方法非常的丰富和琐碎，学习和使用过程中总是需要反复的记忆、查看文档，但作为JS基础这样真的不应该，我们应该把它记得滚瓜烂熟，深入理解才对。<br>但是要怎样才能做到呢？这正是我也本文的初衷，根据个人的经验总结了一下，希望能够帮助和我一样困惑的人，搞定这个头疼的问题。</p>\n</blockquote>\n<p><strong>数组的方法</strong><br>JavaScript的数组方法包括数组原型的方法、构造函数的方法（ES6新增部分）<br>针对每一个方法我们主要了解四个方面：<strong>作用、参数、返回值、原数组是否改变</strong></p>\n<p><strong>（一）. 原型上的方法</strong></p>\n<p><strong>1. push()</strong><br>作用：向数组的末尾添加一项或多项<br>参数：ele1[, ele2[, …[, elen]]]<br>返回值：添加元素后数组的长度<br>原数组是否改变：是</p>\n<p>let arr = [1, 2, 3];<br>let temp = arr.push(‘a’, ‘b’);<br>console.log(arr, temp); // [1, 2, 3, ‘a’, ‘b’] 5</p>\n<p><strong>2. pop()</strong><br>作用：删除数组最后一项<br>参数：无<br>返回值：删除的那一项<br>原数组是否改变：是</p>\n<p>let arr = [1, 2, 3];<br>let temp = arr.pop();<br>console.log(arr, temp); // [1, 2] 3</p>\n<p><strong>3. unshift()</strong><br>作用：向数组开头添加一项或多项<br>参数：ele1[, ele2[, …[, elen]]]<br>返回值：添加元素后数组的长度<br>原数组是否改变：是<br>let arr = [1, 2, 3];<br>let temp = arr.unshift(‘a’, ‘b’);<br>console.log(arr, temp); // [‘a’, ‘b’, 1, 2, 3] 5</p>\n<p><strong>4. splice()</strong><br>作用：删除、插入、替换数组项<br>参数：startIndex[, deleteCount[, item1[, …[, itemN]]]]<br>返回值：删除项组成的数组<br>原数组是否改变：是<br>let arr = [1, 2, 3];</p>\n<p>// 插入元素<br>let temp = arr.splice(1, 0, ‘a’, ‘b’); // 在索引1的位置插入元素’a’和’b’<br>console.log(arr, temp); // [1, ‘a’, ‘b’, 2, 3] []</p>\n<p>// 删除元素<br>let temp1 = arr.splice(1, 2); // 删除从索引1的位置开始的2项<br>console.log(arr, temp1); // [1, 2, 3] [‘a’, ‘b’]</p>\n<p>// 替换一个元素<br>let temp2 = arr.splice(1, 1, ‘a’); // 将索引1的位置的元素替换为’a’<br>console.log(arr, temp2); // [1, ‘a’, 3 ] [2]</p>\n<p>// 替换多个元素<br>let temp3 = arr.splice(0, 2, ‘b’, ‘c’); // 将索引0的位置开始的两项，替换成’b‘和’c‘<br>console.log(arr, temp3); // [’b‘, ‘c’, 3] [1, ‘a’]</p>\n<p>// 只传第一个参数，则删除从第一个参数指定的位置到数组结尾的所有项<br>let temp4 = arr.splice(0); //从索引0的位置开始，删除后面的所有项<br>console.log(arr, temp4); // [] [’b‘, ‘c’, 3]</p>\n<p><strong>6. copyWithin()</strong></p>\n<p>作用：将数组指定位置（start到end）的元素复制到当前数组的其他位置（target开始），这种复制会替换原位置的元素（ES6新增）<br>参数说明：target[,start[,end]]<br>参数说明：</p>\n<p>target: 复制的目标位置（包括），即要被替换的元素开始的位置<br>start: 要copy的元素的开始位置，默认0<br>end: 要copy的元素的结束位置，默认为数组最后一个元素</p>\n<p>返回值：复制替换之后的数组<br>原数组是否改变：是<br>let arr = [1, 2, 3, 4, 5];<br>// 用索引0<del>4范围内的元素，替换索引3</del>4范围内的元素，因为要替换的位置只有两个，所以只将4，5替换为了1，2<br>let temp = arr.copyWithin(3);<br>console.log(arr, temp); //  [1, 2, 3, 1, 2] [1, 2, 3, 1, 2]</p>\n<p>let arr1 = [1, 2, 3, 4, 5];<br>// 用索引2<del>4范围内的元素，替换索引3</del>4范围内的元素，因为要替换的位置只有两个，所以只将4，5替换为了3，4<br>let temp1 = arr1.copyWithin(3, 2);<br>console.log(arr1, temp1); // [1, 2, 3, 3, 4] [1, 2, 3, 3, 4]</p>\n<blockquote>\n<p>小结：<br>总结上述的描述，copyWithin的作用就是在数组长度的范围内，复制start(包括)到end(不包括)范围内的元素，然后用上述的元替换掉从target（包括）开始到数组结尾的元素，能替换多少就替换多少</p>\n</blockquote>\n<p><strong>7. reverse</strong><br>作用：翻转原数组<br>参数：无<br>返回值：翻转后的数组<br>原数组是否改变：是<br>let arr = [1, 2, 3];<br>let temp = arr.reverse();<br>console.log(arr, temp); // [ 3, 2, 1 ] [ 3, 2, 1 ]</p>\n<p><strong>8. sort()</strong><br>作用：数组排序<br>参数：compareFunction<br>参数说明：</p>\n<p>compareFunction返回值大于0时调换当前比对项的顺序，否则顺序不 变;<br>参数可以不传，不传默认按照Unicode编码的顺序排列<br>返回值：排序后的数组<br>原数组是否改变：是<br>// 数组从小到大排序<br>let arr = [1, 4, 6, 7, 8, 3, 2];<br>let temp = arr.sort((a, b) =&gt; {<br>    return a - b;<br>})<br>console.log(arr, temp); // [ 1, 2, 3, 4, 6, 7, 8 ] [ 1, 2, 3, 4, 6, 7, 8 ]</p>\n<p>// 一个实用的数组排序的例子，根据对象元素的排序，排序对象在数组中的位置<br>let objArr = [{id: 3, name: “lilei”},{id: 1, name: “hanmeimei”},{id: 2, name: “yimi”}];<br>let tempArr = objArr.sort((a, b) =&gt; {<br>    // 按照id从小到大的顺序，对数组中的对象进行排序<br>    // 这个示例说明回调函数的形参a,b实际就是数组中当前进行比对的两个元素<br>    return a.id - b.id;<br>});<br>console.log(objArr); //  [{id: 1, name: ‘hanmeimei’}, {id: 2, name: ‘yimi’}, { id: 3, name: ‘lilei’ }]<br>console.log(tempArr); // [{id: 1, name: ‘hanmeimei’}, {id: 2, name: ‘yimi’}, { id: 3, name: ‘lilei’}]</p>\n<p><strong>9. concat</strong><br>作用：基于当前的数组拼接数组<br>参数：value1[, value2[, …[, valueN]]<br>参数说明：</p>\n<p>参数的类型可以是任意类型。<br>不是数组类型直接按顺序拼接到数组末尾，数组类型的则将数组元素逐一取出拼接到数组末尾<br>不传则相当于复制数组</p>\n<p>返回值：拼接后的数组<br>原数组是否改变：否</p>\n<p>let arr = [1,2];<br>let temp = arr.concat(‘a’, {id:1}, [‘lilei’, ‘hanmeimei’]);<br>console.log(arr, temp); // [ 1, 2 ] [ 1, 2, ‘a’, { id: 1 }, ‘lilei’, ‘hanmeimei’]</p>\n<p>// 用于复制数组<br>let arr = [1, 2];<br>let temp = arr.concat();<br>console.log(arr, temp);  // [ 1, 2 ] [ 1, 2 ]</p>\n<p><strong>10. slice()</strong><br>作用：基于当前数组的一项或多项创建一个新的数组<br>参数：startIndex[,endIndex]<br>参数说明：返回的元素包含startIndex位置的元素，但不包括endIndex位置的元素<br>返回值：返回截取的元素组成的数组<br>原数组是否改变：否</p>\n<p>let arr = [0, 1, 2, 3, 4];<br>let temp = arr.slice(1,3); // 返回从索引1（包括）位置到索引3（不包括）位置之前的元素<br>console.log(arr, temp); // [0, 1, 2, 3, 4] [1, 2]</p>\n<p>// 用于复制数组<br>let arr = [0, 1, 2, 3, 4];<br>let temp = arr.slice(0); // 返回从索引0（包括）位置到数组结尾的所有元素<br>console.log(arr, temp); // [0, 1, 2, 3, 4] [0, 1, 2, 3, 4]</p>\n<p><strong>11.indexOf()</strong>:<br>作用：从数组开头查找元素在数组中的索引位置（ES5的方法）<br>参数：searchElement[, fromIndex]<br>返回值：searchElement在数组中的索引，没找到searchElement则返回-1<br>原数组是否改变：否<br>let arr = [1, 2, 3, 4, 5, 6, 2];<br>// 从数组开头开始查找<br>let temp = arr.indexOf(2);<br>console.log(arr, temp); // [ 1, 2, 3, 4, 5, 6, 2 ] 1<br>// 从指定的位置开始查找<br>let temp1 = arr.indexOf(2,3); // 从索引3(包括)的位置向后查找元素2<br>console.log(arr, temp1); // [ 1, 2, 3, 4, 5, 6, 2 ] 6<br>复制代码</p>\n<p><strong>12.lastIndexOf():</strong><br>作用：从数组结尾查找元素在数组中的索引位置（ES5的方法）<br>参数：searchElement[, fromIndex]<br>返回值：searchElement在数组中的索引，没找到searchElement则返回-1<br>原数组是否改变：否<br>let arr = [1, 2, 3, 4, 5, 6, 2];<br>// 从数组末尾开始查找<br>let temp = arr.lastIndexOf(2);<br>console.log(arr, temp); // [ 1, 2, 3, 4, 5, 6, 2 ] 6<br>// 从指定的位置开始查找<br>let temp1 = arr.lastIndexOf(2,3); // 从索引3(包括)的位置向前查找元素2<br>console.log(arr, temp1); // [ 1, 2, 3, 4, 5, 6, 2 ] 1<br>复制代码</p>\n<p><strong>13.every():</strong><br>作用：对数组中的每一项运行给定函数，如果该函数对每一项都返回true,则返回true（ES5方法）<br>参数：callback[, thisArg]<br>参数说明：callback有三个参数item(当前项),index(当前项索引)，array(数组对象本身)<br>返回值：true 或 false<br>原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。<br>let arr = [1, 2, 3, 4];<br>let temp = arr.every((item, index, array) =&gt; {<br>    return item &gt; 2;<br>});<br>console.log(arr, temp); // [ 1, 2, 3, 4 ] false</p>\n<p>// 方法的第二个参数可选，作用是设定第一个参数中的this指向，如果使用第二个参数，注意callback不能是箭头函数<br>// 后面的迭代方法涉及此参数的，用法相同，不在赘述<br>let arr = [1, 2, 3, 4];<br>let temp = arr.every(function(item, index, array) {<br>    return item &gt; this.id;<br>}, {id: 2});<br>console.log(arr, temp); // [ 1, 2, 3, 4 ] false<br>复制代码</p>\n<p><strong>14.some():</strong><br>作用：对数组中的每一项运行给定函数，如果该函数对任意一项返回true,则返回true（ES5方法）<br>参数：callback[, thisArg]<br>参数说明：callback有三个参数item(当前项),index(当前项索引)，array(数组对象本身)<br>返回值：true 或 false<br>原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。<br>let arr = [1, 2, 3, 4];<br>let temp = arr.some((item, index, array) =&gt; {<br>    return item &gt; 2;<br>});<br>console.log(arr, temp); // [ 1, 2, 3, 4 ] true<br>复制代码</p>\n<p><strong>15.filter():</strong><br>作用：对数组中的每一项运行给定函数，返回该函数返回true的项组成的数组（ES5方法）<br>参数：callback[, thisArg]<br>参数说明：callback有三个参数item(当前项),index(当前项索引)，array(数组对象本身)<br>返回值：函数返回true的项组成的数组<br>原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。<br>let arr = [1, 2, 3, 4];<br>let temp = arr.filter((item, index, array) =&gt; {<br>    return item &gt; 2;<br>});<br>console.log(arr, temp); // [ 1, 2, 3, 4 ] [3, 4]<br>复制代码</p>\n<p><strong>16.map():</strong><br>作用：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组（ES5方法）<br>参数：callback[, thisArg]<br>参数说明：callback有三个参数item(当前项),index(当前项索引)，array(数组对象本身)<br>返回值：函数每次调用结果组成的数组<br>原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。<br>let arr = [1, 2, 3, 4];<br>let temp = arr.map((item, index, array) =&gt; {<br>    return item * item;<br>});<br>console.log(arr, temp); // [ 1, 2, 3, 4 ] [ 1, 4, 9, 16]<br>复制代码</p>\n<p><strong>17.forEach():</strong><br>作用：对数组中的每一项运行给定函数。无返回值（ES5方法）<br>参数：callback[, thisArg]<br>参数说明：callback有三个参数item(当前项),index(当前项索引)，array(数组对象本身)<br>返回值：无<br>原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。<br>let arr = [1, 2, 3, 4];<br>let temp = arr.forEach((item, index, array) =&gt; {<br>    // 不会有返回值，但可在这里执行某些操作<br>    return item * item;<br>});<br>console.log(arr, temp); // [ 1, 2, 3, 4 ] undefined<br>复制代码<br>注意：<br>forEach在所有项都遍历完成之前，无法像for循环一样提前终止循环</p>\n<p><strong>18.reduce():</strong><br>作用：从数组的第一项开始，逐步遍历到最后，迭代数组的所有项（ES5方法）<br>参数：callback[, initialValue]<br>参数说明：</p>\n<p>callback迭代函数，有四个参数（prev, cur, index, array）</p>\n<p>prev 前一个值，（initialValue || 数组第一项 || 上一次迭代的结果）<br>cur 当前迭代项<br>index 当前迭代项索引<br>array 迭代的原数组</p>\n<p>initialValue 迭代的基础值，不传基础值是数组第一项</p>\n<p>返回值：数组迭代后，整体的迭代结果<br>原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。<br>// 数组求和<br>let arr = [1, 2, 3];<br>let sum = arr.reduce((prev, cur, index, array) =&gt; {<br>    return prev + cur;<br>});<br>console.log(arr, sum); // [ 1, 2, 3 ] 6</p>\n<p>// 传initialValue 基础值的示例<br>let sum1 = arr.reduce((prev, cur, index, array) =&gt; {<br>    return prev + cur;<br>}, 10);<br>// 返回的值是：10+1+2+3<br>console.log(arr, sum1); // [ 1, 2, 3 ] 16<br>复制代码<br>reduce源码的实现：<br>Array.prototype.myReduce = function(callback, initialVal){<br>   let prev = initialVal || this[0];<br>    for(var i = pre ? 0 : 1; i &lt; this.length; i++){<br>        prev = callback(prev, this[i], i, this);<br>   }<br>   return prev<br>}<br>复制代码</p>\n<p><strong>19.reduceRight():</strong><br>作用：从数组的最后一项开始，逐步遍历到第一项，迭代数组的所有项（ES5方法）<br>参数：callback[, initialValue]<br>参数说明：</p>\n<p>callback迭代函数，有四个参数（prev, cur, index, array）</p>\n<p>prev 前一个值，（initialValue || 数组第一项 || 上一次迭代的结果）<br>cur 当前迭代项<br>index 当前迭代项索引<br>array 迭代的原数组</p>\n<p>initialValue 迭代的基础值，不传基础值是数组第一项</p>\n<p>返回值：数组迭代后，整体的迭代结果<br>原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。<br>// 拼接字符串,从后向前迭代数组进行拼接<br>let arr = [‘h’, ‘e’, ‘l’, ‘l’, ‘o’];<br>let str = arr.reduceRight((prev, cur, index, array) =&gt; {<br>    return prev + cur;<br>});<br>console.log(arr, str); // [ ‘h’, ‘e’, ‘l’, ‘l’, ‘o’ ] ‘olleh’<br>复制代码</p>\n<p><strong>20.find():</strong><br>作用：查找数组中第一个符合条件的元素，返回该元素 (ES6新增)<br>参数：callback[, thisArg]<br>参数说明：参数的使用同上述的forEach、every、map、some、filter方法一致<br>返回值：查找到则返回该元素，没找到返回undefined<br>原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。<br>let arr = [1, 2, 3, 4, 5];<br>let temp = arr.find((item, index, array) =&gt; {<br>    return item &gt; 2;<br>})<br>console.log(arr, temp); // [1, 2, 3, 4, 5] 3<br>复制代码</p>\n<p><strong>21.findIndex():</strong><br>作用：查找数组中第一个符合条件的元素所在位置的索引，并返回该索引值<br>参数：callback[, thisArg]<br>参数说明：参数的使用同上述的forEach、every、map、some、filter方法一致<br>返回值：查找到则返回该索引值，没找到返回-1<br>原数组是否改变：涉及callback，因此不确定，具体详情见下文中的原型方法的小结部分。<br>let arr = [1, 2, 3, 4, 5];<br>let temp = arr.findIndex((item, index, array) =&gt; {<br>    return item &gt; 2;<br>})<br>console.log(arr, temp); // [1, 2, 3, 4, 5] 2<br>复制代码</p>\n<p><strong>22.fill():</strong><br>作用：用指定元素，填充数组从start(包括)到end（不包括）之间的元素，如果该区间内已经有元素，直接替换掉（ES6新增）<br>参数：value[, start[, end]]<br>返回值：填充后的数组<br>原数组是否改变：是<br>let arr = [1, 2, 3, 4, 5];<br>let temp = arr.fill(‘a’, 2, 4);<br>console.log(arr, temp); // [1, 2, ‘a’, ‘a’, 5] [1, 2, ‘a’, ‘a’, 5]<br>复制代码</p>\n<p><strong>23.includes():</strong><br>作用：判断数组中是否包含指定的元素（ES7新增）<br>参数：searchElement[, fromIndex]<br>返回值：true或false<br>原数组是否改变：否<br>let arr = [1, 2, 3, 4, 5];<br>let temp = arr.includes(5);<br>console.log(arr, temp); // [1, 2, 3, 4, 5] true</p>\n<p>// 这个方法弥补了indexOf查看元素时的一个不足，即查找NaN的误差<br>let arr1 = [NaN, ‘a’];<br>let temp1 = arr1.includes(NaN);<br>let temp2 = arr1.indexOf(NaN);<br>console.log(temp1, temp2); // true -1<br>复制代码</p>\n<p><strong>24.toString()、toLocalString():</strong><br>作用：调用数组每一项的toString()方法，返回的是以逗号分隔的字符串<br>参数：无<br>返回值：转化后的字符串<br>原字数组是否改变：否<br>let arr = [1, [1, 2, [4]], {name: “zhangsan”}, 3];<br>let temp = arr.toString();<br>console.log(arr); [ 1, [ 1, 2, [ 4 ] ], { name: ‘zhangsan’ }, 3 ]<br>console.log(temp); // ‘1,1,2,4,[object Object],3’<br>复制代码</p>\n<p><strong>25.join():</strong><br>作用：将数组元素转化为字符串(调用每个元素的toString方法)，并使用指定的分隔符（默认为逗号）进行拼接，返回拼接后的字符串<br>参数：分隔符，默认为逗号（，）<br>返回值：拼接后的字符串<br>原数组是否改变：否<br>let arr = [1, [1, 2, [4]], {name: “zhangsan”}, 3];<br>let temp = arr.join();<br>console.log(arr); [ 1, [ 1, 2, [ 4 ] ], { name: ‘zhangsan’ }, 3 ]<br>console.log(temp); // ‘1,1,2,4,[object Object],3’</p>\n<p>// 数组求和<br>let arr1 = [1, 2, 3];<br>console.log(eval(arr1.join(‘+’))); // 6</p>\n<p><strong>数组扩展运算符（ES6新增）</strong></p>\n<p>数组的扩展运算符可以将数组转化为以逗号分割的参数序列。<br>几个简单使用的应用场景：</p>\n<p>1.将数组通过扩展运算符转化为参数序列直接传参，无需使用apply转化了let arr = [1, 2, 3];</p>\n<p>// apply写法<br>Math.min.apply(null, arr)</p>\n<p>// 扩展运算符写法<br>Math.min(…arr)<br>复制代码<br>2.可以用于复制和拼接数组let arr1 = [2, 3, 4];<br>let arr2 = [‘a’, ‘b’, ‘c’];</p>\n<p>// 拼接数组arr1和arr2<br>console.log([…arr1, …arr2]); // [2, 3, 4, ‘a’, ‘b’, ‘c’]<br>复制代码<br>3.可用于将字符串分解为真正的数组，[…’hello’]  // [ ‘h’, ‘e’, ‘l’, ‘l’, ‘o’ ]</p>\n"},{"title":"Node.js搭建本地服务模拟数据","date":"2019-10-18T06:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# Node.js搭建本地服务模拟数据\n---\n\n\n\n## 1. 首先下载安装好Nodejs\n\n`下载` : [Nodejs地址](http://nodejs.cn/download/)\n\n\n## 2. 安装好了，打开cmd窗口，输入命令：npm -v 检验nodejs是否安装成功，如果出现以下界面则说明安装成功了\n\n![](3.jpg)\n\n\n## 3. 输入命令 npm install http-server -g（在全局安装本地服务器）\n\n![](5.jpg)\n\n## 4. 切换到你项目所在的路径\n\n![](66.jpg)\n\n## 5. 命令行输入http-server 即可在此文件夹下打开服务器\n\n![](6.jpg)\n域名和端口号是 127.0.0.1:8080、192.168.155.1:8080、192.168.1.122:8080\n\n## 6. 在`项目`或者`桌面`下新建demo =>  data.json文件 \n![](8.jpg)\n![](10.jpg)\n## 7. 打开浏览器，输入域名端口号（上面三个域名端口号都可以用）和文件名称\n**http://127.0.0.1:8080/data.json**\n![](12.jpg)\n\n","source":"_posts/node.js搭建本地服务模拟数据.md","raw":"---\ntitle: Node.js搭建本地服务模拟数据\ndate: 2019-10-18 14:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n- 开发环境\ncategories:\n- 开发环境\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# Node.js搭建本地服务模拟数据\n---\n\n\n\n## 1. 首先下载安装好Nodejs\n\n`下载` : [Nodejs地址](http://nodejs.cn/download/)\n\n\n## 2. 安装好了，打开cmd窗口，输入命令：npm -v 检验nodejs是否安装成功，如果出现以下界面则说明安装成功了\n\n![](3.jpg)\n\n\n## 3. 输入命令 npm install http-server -g（在全局安装本地服务器）\n\n![](5.jpg)\n\n## 4. 切换到你项目所在的路径\n\n![](66.jpg)\n\n## 5. 命令行输入http-server 即可在此文件夹下打开服务器\n\n![](6.jpg)\n域名和端口号是 127.0.0.1:8080、192.168.155.1:8080、192.168.1.122:8080\n\n## 6. 在`项目`或者`桌面`下新建demo =>  data.json文件 \n![](8.jpg)\n![](10.jpg)\n## 7. 打开浏览器，输入域名端口号（上面三个域名端口号都可以用）和文件名称\n**http://127.0.0.1:8080/data.json**\n![](12.jpg)\n\n","slug":"node.js搭建本地服务模拟数据","published":1,"updated":"2020-05-28T07:51:13.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckari24yw001l5sjorte78n4s","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"Node-js搭建本地服务模拟数据\"><a href=\"#Node-js搭建本地服务模拟数据\" class=\"headerlink\" title=\"Node.js搭建本地服务模拟数据\"></a>Node.js搭建本地服务模拟数据</h1><hr>\n<h2 id=\"1-首先下载安装好Nodejs\"><a href=\"#1-首先下载安装好Nodejs\" class=\"headerlink\" title=\"1. 首先下载安装好Nodejs\"></a>1. 首先下载安装好Nodejs</h2><p><code>下载</code> : <a href=\"http://nodejs.cn/download/\" target=\"_blank\" rel=\"noopener\">Nodejs地址</a></p>\n<h2 id=\"2-安装好了，打开cmd窗口，输入命令：npm-v-检验nodejs是否安装成功，如果出现以下界面则说明安装成功了\"><a href=\"#2-安装好了，打开cmd窗口，输入命令：npm-v-检验nodejs是否安装成功，如果出现以下界面则说明安装成功了\" class=\"headerlink\" title=\"2. 安装好了，打开cmd窗口，输入命令：npm -v 检验nodejs是否安装成功，如果出现以下界面则说明安装成功了\"></a>2. 安装好了，打开cmd窗口，输入命令：npm -v 检验nodejs是否安装成功，如果出现以下界面则说明安装成功了</h2><p><img src=\"3.jpg\" alt></p>\n<h2 id=\"3-输入命令-npm-install-http-server-g（在全局安装本地服务器）\"><a href=\"#3-输入命令-npm-install-http-server-g（在全局安装本地服务器）\" class=\"headerlink\" title=\"3. 输入命令 npm install http-server -g（在全局安装本地服务器）\"></a>3. 输入命令 npm install http-server -g（在全局安装本地服务器）</h2><p><img src=\"5.jpg\" alt></p>\n<h2 id=\"4-切换到你项目所在的路径\"><a href=\"#4-切换到你项目所在的路径\" class=\"headerlink\" title=\"4. 切换到你项目所在的路径\"></a>4. 切换到你项目所在的路径</h2><p><img src=\"66.jpg\" alt></p>\n<h2 id=\"5-命令行输入http-server-即可在此文件夹下打开服务器\"><a href=\"#5-命令行输入http-server-即可在此文件夹下打开服务器\" class=\"headerlink\" title=\"5. 命令行输入http-server 即可在此文件夹下打开服务器\"></a>5. 命令行输入http-server 即可在此文件夹下打开服务器</h2><p><img src=\"6.jpg\" alt><br>域名和端口号是 127.0.0.1:8080、192.168.155.1:8080、192.168.1.122:8080</p>\n<h2 id=\"6-在项目或者桌面下新建demo-gt-data-json文件\"><a href=\"#6-在项目或者桌面下新建demo-gt-data-json文件\" class=\"headerlink\" title=\"6. 在项目或者桌面下新建demo =&gt;  data.json文件\"></a>6. 在<code>项目</code>或者<code>桌面</code>下新建demo =&gt;  data.json文件</h2><p><img src=\"8.jpg\" alt><br><img src=\"10.jpg\" alt></p>\n<h2 id=\"7-打开浏览器，输入域名端口号（上面三个域名端口号都可以用）和文件名称\"><a href=\"#7-打开浏览器，输入域名端口号（上面三个域名端口号都可以用）和文件名称\" class=\"headerlink\" title=\"7. 打开浏览器，输入域名端口号（上面三个域名端口号都可以用）和文件名称\"></a>7. 打开浏览器，输入域名端口号（上面三个域名端口号都可以用）和文件名称</h2><p><strong><a href=\"http://127.0.0.1:8080/data.json\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/data.json</a></strong><br><img src=\"12.jpg\" alt></p>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"Node-js搭建本地服务模拟数据\"><a href=\"#Node-js搭建本地服务模拟数据\" class=\"headerlink\" title=\"Node.js搭建本地服务模拟数据\"></a>Node.js搭建本地服务模拟数据</h1><hr>\n<h2 id=\"1-首先下载安装好Nodejs\"><a href=\"#1-首先下载安装好Nodejs\" class=\"headerlink\" title=\"1. 首先下载安装好Nodejs\"></a>1. 首先下载安装好Nodejs</h2><p><code>下载</code> : <a href=\"http://nodejs.cn/download/\" target=\"_blank\" rel=\"noopener\">Nodejs地址</a></p>\n<h2 id=\"2-安装好了，打开cmd窗口，输入命令：npm-v-检验nodejs是否安装成功，如果出现以下界面则说明安装成功了\"><a href=\"#2-安装好了，打开cmd窗口，输入命令：npm-v-检验nodejs是否安装成功，如果出现以下界面则说明安装成功了\" class=\"headerlink\" title=\"2. 安装好了，打开cmd窗口，输入命令：npm -v 检验nodejs是否安装成功，如果出现以下界面则说明安装成功了\"></a>2. 安装好了，打开cmd窗口，输入命令：npm -v 检验nodejs是否安装成功，如果出现以下界面则说明安装成功了</h2><p><img src=\"3.jpg\" alt></p>\n<h2 id=\"3-输入命令-npm-install-http-server-g（在全局安装本地服务器）\"><a href=\"#3-输入命令-npm-install-http-server-g（在全局安装本地服务器）\" class=\"headerlink\" title=\"3. 输入命令 npm install http-server -g（在全局安装本地服务器）\"></a>3. 输入命令 npm install http-server -g（在全局安装本地服务器）</h2><p><img src=\"5.jpg\" alt></p>\n<h2 id=\"4-切换到你项目所在的路径\"><a href=\"#4-切换到你项目所在的路径\" class=\"headerlink\" title=\"4. 切换到你项目所在的路径\"></a>4. 切换到你项目所在的路径</h2><p><img src=\"66.jpg\" alt></p>\n<h2 id=\"5-命令行输入http-server-即可在此文件夹下打开服务器\"><a href=\"#5-命令行输入http-server-即可在此文件夹下打开服务器\" class=\"headerlink\" title=\"5. 命令行输入http-server 即可在此文件夹下打开服务器\"></a>5. 命令行输入http-server 即可在此文件夹下打开服务器</h2><p><img src=\"6.jpg\" alt><br>域名和端口号是 127.0.0.1:8080、192.168.155.1:8080、192.168.1.122:8080</p>\n<h2 id=\"6-在项目或者桌面下新建demo-gt-data-json文件\"><a href=\"#6-在项目或者桌面下新建demo-gt-data-json文件\" class=\"headerlink\" title=\"6. 在项目或者桌面下新建demo =&gt;  data.json文件\"></a>6. 在<code>项目</code>或者<code>桌面</code>下新建demo =&gt;  data.json文件</h2><p><img src=\"8.jpg\" alt><br><img src=\"10.jpg\" alt></p>\n<h2 id=\"7-打开浏览器，输入域名端口号（上面三个域名端口号都可以用）和文件名称\"><a href=\"#7-打开浏览器，输入域名端口号（上面三个域名端口号都可以用）和文件名称\" class=\"headerlink\" title=\"7. 打开浏览器，输入域名端口号（上面三个域名端口号都可以用）和文件名称\"></a>7. 打开浏览器，输入域名端口号（上面三个域名端口号都可以用）和文件名称</h2><p><strong><a href=\"http://127.0.0.1:8080/data.json\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/data.json</a></strong><br><img src=\"12.jpg\" alt></p>\n"},{"title":"从0搭建自己的webpack开发环境","date":"2018-04-22T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 从0搭建自己的webpack开发环境\n---\n\n\n\n**1.什么是Webpack?**\n**webpack**是一个现代 **JavaScript** 应用程序的**静态模块打包器**(module bundler)，当 webpack 处理应用程序时，它会递归地构建一个**依赖关系图**(dependency graph)，其中包含应用程序需要的每个**模块**，然后将所有这些模块打包成一个或多个 **bundle**\n![](node.jpg)\n\n使用Webpack作为前端构建工具：\n\n· 代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等；\n· 文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等；\n· 代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载；\n· 模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件；\n· 自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器；\n· 代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过；\n· 自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。\n\n在**webpack**应用中有两个核心:\n\n模块转换器，用于把模块原内容按照需求转换成新内容，可以加载非 JS 模块；\n\n扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。\n\n**2.初始化项目**\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/node搭建.md","raw":"---\ntitle: 从0搭建自己的webpack开发环境\ndate: 2018-04-22 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n- 开发环境\ncategories:\n- 开发环境\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 从0搭建自己的webpack开发环境\n---\n\n\n\n**1.什么是Webpack?**\n**webpack**是一个现代 **JavaScript** 应用程序的**静态模块打包器**(module bundler)，当 webpack 处理应用程序时，它会递归地构建一个**依赖关系图**(dependency graph)，其中包含应用程序需要的每个**模块**，然后将所有这些模块打包成一个或多个 **bundle**\n![](node.jpg)\n\n使用Webpack作为前端构建工具：\n\n· 代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等；\n· 文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等；\n· 代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载；\n· 模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件；\n· 自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器；\n· 代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过；\n· 自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。\n\n在**webpack**应用中有两个核心:\n\n模块转换器，用于把模块原内容按照需求转换成新内容，可以加载非 JS 模块；\n\n扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。\n\n**2.初始化项目**\n\n\n\n\n\n\n\n\n\n\n\n","slug":"node搭建","published":1,"updated":"2020-05-28T07:51:13.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckari24z1001o5sjocjqponvk","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"从0搭建自己的webpack开发环境\"><a href=\"#从0搭建自己的webpack开发环境\" class=\"headerlink\" title=\"从0搭建自己的webpack开发环境\"></a>从0搭建自己的webpack开发环境</h1><hr>\n<p><strong>1.什么是Webpack?</strong><br><strong>webpack</strong>是一个现代 <strong>JavaScript</strong> 应用程序的<strong>静态模块打包器</strong>(module bundler)，当 webpack 处理应用程序时，它会递归地构建一个<strong>依赖关系图</strong>(dependency graph)，其中包含应用程序需要的每个<strong>模块</strong>，然后将所有这些模块打包成一个或多个 <strong>bundle</strong><br><img src=\"node.jpg\" alt></p>\n<p>使用Webpack作为前端构建工具：</p>\n<p>· 代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等；<br>· 文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等；<br>· 代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载；<br>· 模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件；<br>· 自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器；<br>· 代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过；<br>· 自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。</p>\n<p>在<strong>webpack</strong>应用中有两个核心:</p>\n<p>模块转换器，用于把模块原内容按照需求转换成新内容，可以加载非 JS 模块；</p>\n<p>扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。</p>\n<p><strong>2.初始化项目</strong></p>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"从0搭建自己的webpack开发环境\"><a href=\"#从0搭建自己的webpack开发环境\" class=\"headerlink\" title=\"从0搭建自己的webpack开发环境\"></a>从0搭建自己的webpack开发环境</h1><hr>\n<p><strong>1.什么是Webpack?</strong><br><strong>webpack</strong>是一个现代 <strong>JavaScript</strong> 应用程序的<strong>静态模块打包器</strong>(module bundler)，当 webpack 处理应用程序时，它会递归地构建一个<strong>依赖关系图</strong>(dependency graph)，其中包含应用程序需要的每个<strong>模块</strong>，然后将所有这些模块打包成一个或多个 <strong>bundle</strong><br><img src=\"node.jpg\" alt></p>\n<p>使用Webpack作为前端构建工具：</p>\n<p>· 代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等；<br>· 文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等；<br>· 代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载；<br>· 模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件；<br>· 自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器；<br>· 代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过；<br>· 自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。</p>\n<p>在<strong>webpack</strong>应用中有两个核心:</p>\n<p>模块转换器，用于把模块原内容按照需求转换成新内容，可以加载非 JS 模块；</p>\n<p>扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。</p>\n<p><strong>2.初始化项目</strong></p>\n"},{"title":"从0搭建自己的webpack开发环境(转)","date":"2019-09-22T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# [从0搭建自己的webpack开发环境](https://juejin.im/post/5d7f4f14518825491b7240b7)\n---\n# webpack问题 \n+ [webpack官网](https://www.webpackjs.com/)\n+ [webpack多页面内存溢出](https://juejin.im/post/5db01b366fb9a0202f0c89bb)\n+ [webpack详解](https://juejin.im/post/5aa3d2056fb9a028c36868aa)\n+ [webpack：从入门到真实项目配置](https://juejin.im/post/59bb37fa6fb9a00a554f89d2)\n+ [Vue+Webpack 使用规范](https://juejin.im/entry/5794d711128fe10056b947fe/detail)\n+ [脑阔疼的webpack按需加载](https://juejin.im/post/5bf61082f265da616a474b5c)\n+ [webpack4 多页面，多环境配置](https://juejin.im/post/5b9116086fb9a05d05307e96)\n+ [webpack 性能优化](https://juejin.im/entry/57cd199467f3560057c99607)\n+ [如何让webpack打包的速度提升50%？](https://juejin.im/post/5af3be6d6fb9a07ab458a393)\n\n+ [vue-cli脚手架中webpack配置基础文件详解](https://www.cnblogs.com/sichaoyun/p/9241829.html)\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/从0搭建自己的webpack开发环境.md","raw":"---\ntitle: 从0搭建自己的webpack开发环境(转)\ndate: 2019-09-22 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n- 开发环境\ncategories:\n- 开发环境\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# [从0搭建自己的webpack开发环境](https://juejin.im/post/5d7f4f14518825491b7240b7)\n---\n# webpack问题 \n+ [webpack官网](https://www.webpackjs.com/)\n+ [webpack多页面内存溢出](https://juejin.im/post/5db01b366fb9a0202f0c89bb)\n+ [webpack详解](https://juejin.im/post/5aa3d2056fb9a028c36868aa)\n+ [webpack：从入门到真实项目配置](https://juejin.im/post/59bb37fa6fb9a00a554f89d2)\n+ [Vue+Webpack 使用规范](https://juejin.im/entry/5794d711128fe10056b947fe/detail)\n+ [脑阔疼的webpack按需加载](https://juejin.im/post/5bf61082f265da616a474b5c)\n+ [webpack4 多页面，多环境配置](https://juejin.im/post/5b9116086fb9a05d05307e96)\n+ [webpack 性能优化](https://juejin.im/entry/57cd199467f3560057c99607)\n+ [如何让webpack打包的速度提升50%？](https://juejin.im/post/5af3be6d6fb9a07ab458a393)\n\n+ [vue-cli脚手架中webpack配置基础文件详解](https://www.cnblogs.com/sichaoyun/p/9241829.html)\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"从0搭建自己的webpack开发环境","published":1,"updated":"2020-05-28T07:51:13.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckari24z5001r5sjonxi2fq8w","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"从0搭建自己的webpack开发环境\"><a href=\"#从0搭建自己的webpack开发环境\" class=\"headerlink\" title=\"从0搭建自己的webpack开发环境\"></a><a href=\"https://juejin.im/post/5d7f4f14518825491b7240b7\" target=\"_blank\" rel=\"noopener\">从0搭建自己的webpack开发环境</a></h1><hr>\n<h1 id=\"webpack问题\"><a href=\"#webpack问题\" class=\"headerlink\" title=\"webpack问题\"></a>webpack问题</h1><ul>\n<li><p><a href=\"https://www.webpackjs.com/\" target=\"_blank\" rel=\"noopener\">webpack官网</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/post/5db01b366fb9a0202f0c89bb\" target=\"_blank\" rel=\"noopener\">webpack多页面内存溢出</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/post/5aa3d2056fb9a028c36868aa\" target=\"_blank\" rel=\"noopener\">webpack详解</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/post/59bb37fa6fb9a00a554f89d2\" target=\"_blank\" rel=\"noopener\">webpack：从入门到真实项目配置</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/entry/5794d711128fe10056b947fe/detail\" target=\"_blank\" rel=\"noopener\">Vue+Webpack 使用规范</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/post/5bf61082f265da616a474b5c\" target=\"_blank\" rel=\"noopener\">脑阔疼的webpack按需加载</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/post/5b9116086fb9a05d05307e96\" target=\"_blank\" rel=\"noopener\">webpack4 多页面，多环境配置</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/entry/57cd199467f3560057c99607\" target=\"_blank\" rel=\"noopener\">webpack 性能优化</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/post/5af3be6d6fb9a07ab458a393\" target=\"_blank\" rel=\"noopener\">如何让webpack打包的速度提升50%？</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/sichaoyun/p/9241829.html\" target=\"_blank\" rel=\"noopener\">vue-cli脚手架中webpack配置基础文件详解</a></p>\n</li>\n</ul>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"从0搭建自己的webpack开发环境\"><a href=\"#从0搭建自己的webpack开发环境\" class=\"headerlink\" title=\"从0搭建自己的webpack开发环境\"></a><a href=\"https://juejin.im/post/5d7f4f14518825491b7240b7\" target=\"_blank\" rel=\"noopener\">从0搭建自己的webpack开发环境</a></h1><hr>\n<h1 id=\"webpack问题\"><a href=\"#webpack问题\" class=\"headerlink\" title=\"webpack问题\"></a>webpack问题</h1><ul>\n<li><p><a href=\"https://www.webpackjs.com/\" target=\"_blank\" rel=\"noopener\">webpack官网</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/post/5db01b366fb9a0202f0c89bb\" target=\"_blank\" rel=\"noopener\">webpack多页面内存溢出</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/post/5aa3d2056fb9a028c36868aa\" target=\"_blank\" rel=\"noopener\">webpack详解</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/post/59bb37fa6fb9a00a554f89d2\" target=\"_blank\" rel=\"noopener\">webpack：从入门到真实项目配置</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/entry/5794d711128fe10056b947fe/detail\" target=\"_blank\" rel=\"noopener\">Vue+Webpack 使用规范</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/post/5bf61082f265da616a474b5c\" target=\"_blank\" rel=\"noopener\">脑阔疼的webpack按需加载</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/post/5b9116086fb9a05d05307e96\" target=\"_blank\" rel=\"noopener\">webpack4 多页面，多环境配置</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/entry/57cd199467f3560057c99607\" target=\"_blank\" rel=\"noopener\">webpack 性能优化</a></p>\n</li>\n<li><p><a href=\"https://juejin.im/post/5af3be6d6fb9a07ab458a393\" target=\"_blank\" rel=\"noopener\">如何让webpack打包的速度提升50%？</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/sichaoyun/p/9241829.html\" target=\"_blank\" rel=\"noopener\">vue-cli脚手架中webpack配置基础文件详解</a></p>\n</li>\n</ul>\n"},{"title":"从零搭建前端组件库","date":"2020-03-28T07:32:09.000Z","top":true,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 前言 \n> 在前端开发中可能会遇到将相同的功能模板集合成一个组件，供他人调用，这样可以减少重复造轮子，也可以节约人力、财力，更能够提高代码的可维护度；下面将通过详细的步骤教你如何构建一个 Vue 前端组件。。\n\n\n## 1、在本机上安装好 NodeJs，并配置好环境变量\n+ `下载` : [Nodejs地址](http://nodejs.cn/download/)\n\n 我这里是下载 64 位 Windows 安装包(.msi)，大家可以根据自己电脑系统选择相应的版本即可。\n\n ![](1.png)\n\n+ 下载 NodeJs 后双击它，采用默认设置，一直点击下一步，直到 Finish 为止。需要说明的是，在安装 NodeJs 时，已经设置好了系统环境变量，此外 npm 工具也同时被安装好了，我们可以在 cmd 窗口中输入 node -v 命令和 npm -v 命令查看，若都安装成功了话，会看到如下的效果：\n\n![](2.png)\n\n## 2、vue 项目安装(如已安装，可略过此步骤)\n\n+ 创建一个 Vue 项目(使用默认配置安装就 OK)\n\n      vue create ui-demo\n\n+ 安装 babel-plugin-component\n\n      npm i babel-plugin-component -D\n\n`babel-plugin-component` 就是 `Element UI` 用来实现组件按需加载的一个 `babel` 插件。我们把它用到我们的组件库上，就不需要重新造一个轮子出来了.\n+ 在项目的根目录下创建一个 .babelrc 的文件，配置可以参照下面的代码进行更改。\n\n      { \"plugins\": [ [ \"component\", { // 组件库的名字，需要和 package.json 里的 name 相同 \"libraryName\": \"ui-demo\", // 存放组件的文件夹，如果不想配置此项，默认文件夹的名字为 lib \"libDir\": \"components\", } ] ] }\n\n+ 创建一个存放组件的文件夹 \n\n>既然我们刚刚已经配置了存放组件的文件夹，下一步肯定就是创建这么一个文件夹了。由于我配置了的文件夹名为 components，所以我们的文件夹名字就是 components。\n\n+ 上面的操作完成后，我们的项目目录就基本搭建好了，如下：\n+ 写组件终于到了写组件的时候了，在` components` 文件夹下新建一个 `Component1` 的文件夹来存放我们的第一个组件。\n+ `Component1` 文件夹里有一个` Component1.vue` 的文件和一个 `index.js` 文件。目录如下：\nComponent1 -> Component1.vue 代码:\n\n      <template> \n      <h1 class=\"component1\">component1</h1>\n      </template> \n      <script> \n      export default { name: 'Component1' } \n      </script>\n      <style>\n      .component1 { color: green; }\n      </style>\nComponent1 -> index.js代码：\n\n      import Component1 from './Component1.vue'; Component1.install = function (Vue) { Vue.component(Component1.name, Component1); } export default Component1;\n\nindex.js 中的主要功能就是以插件的形式注册一个全局组件，不懂的小伙伴可以照猫画虎，微调一下就好了。\n第二个组件代码就不发出来了，复制一份，给个 css 样式就好了。\n\n在 components 文件夹根目录下创建一个 index.js 用来整合所有组件。\ncomponents -> index.js 代码：\n\n        import Compontent1 from './Component1/index' import Compontent2 from './Component2/index' const components = [ Compontent1, Compontent2, ] function install (Vue) { components.map = (component => { Vue.component(component.name, component) }) } if (typeof window !== 'undefined' && window.Vue) { install(window.Vue); } export default { install, Compontent1, Compontent2, }\n\n\n> 稍微提醒，需要把 install 也一起导出，观察不细心的可能会不注意就写漏了。\n\n## 3、修改或添加 package.json 中的配置\n\n+ `script` 中添加一条命令：\n     \n     \"lib\": \"vue-cli-service build --target lib --name index --dest package components/index.js\"\n\n最后面的 `components/index.js` 是我们存放组件文件夹根目录的`index.js` 文件，记得根据你的情况修改。这个命令执行后，会打包生成一个 `package` 的文件夹。\n\n添加 `files` 白名单，打包上传哪些文件到 `npm` 上：\n\n      \"files\": [\n        \"components\",\n        \"package\"\n        ]\n\n添加 `style`，设置样式路径：\n\n      \"style\": \"package/index.css\"\n\n路径就是我们打包出来的 package 中的 index.css 文件。\n\n+ 添加 main，设置入口：\n\n      \"main\": \"components/index.js\"\n\n路径是存放组件的 components 文件夹下的 index.js 文件。\n将 private 设置为 false：\n      \n      \"private\": false\n\n设置此项目不是私有项目之后，才能发布好 npm 上。\n\n下面的是完整的 package.json 文件配置：\n      \n      { \"name\": \"ui-demo\", \"version\": \"0.1.0\", \"private\": false, \"main\": \"components/index.js\", \"style\": \"package/index.css\", \"files\": [ \"components\", \"package\" ], \"scripts\": { \"serve\": \"vue-cli-service serve\", \"build\": \"vue-cli-service build\", \"lint\": \"vue-cli-service lint\", \"lib\": \"vue-cli-service build --target lib --name index --dest package components/index.js\" }, \"dependencies\": { \"core-js\": \"^2.6.5\", \"vue\": \"^2.6.10\" }, \"devDependencies\": { \"@vue/cli-plugin-babel\": \"^3.7.0\", \"@vue/cli-plugin-eslint\": \"^3.7.0\", \"@vue/cli-service\": \"^3.7.0\", \"babel-eslint\": \"^10.0.1\", \"babel-plugin-component\": \"^1.1.1\", \"eslint\": \"^5.16.0\", \"eslint-plugin-vue\": \"^5.0.0\", \"vue-template-compiler\": \"^2.5.21\" }, \"eslintConfig\": { \"root\": true, \"env\": { \"node\": true }, \"extends\": [ \"plugin:vue/essential\", \"eslint:recommended\" ], \"rules\": {}, \"parserOptions\": { \"parser\": \"babel-eslint\" } }, \"postcss\": { \"plugins\": { \"autoprefixer\": {} } }, \"browserslist\": [ \"> 1%\", \"last 2 versions\" ] }\n\n## 4、打包我们的代码\n\n在控制台执行 `npm run lib` 进行文件打包，打包完成后会多一个 `package` 文件夹。文件目录就变成如下的了：\n![](7.webp)\n\n\n## 5、发布 npm(公库)\n\n      # 这是登录，前提是你已经在 npm 注册了账号\n      npm login\n      # 发布到 npm\n      npm publish\n\n安装库\n\n      npm i ui-demo\n\n## 6、发布 npm(私库)\n首先需要在服务器上搭建一个私库,这里推荐一个:[npm私服搭建—verdaccio方案及其最佳实践](https://www.jianshu.com/p/d32ce7e9d4d8)\n\n建立好私库后,登录、打包跟上面步骤一样,发布时需要使用`nrm`命令 `nrm use xxx`(切换到私库地址),如图所示:\n![](7.png)\n\n+ 发布\n  npm publish\n+ npm 安装\n  npm i  ui-demo  --registry 私库地址\n\n# 结尾 \n这样我们就可以使用我们自己的 UI 库了。","source":"_posts/从零搭建前端组件库.md","raw":"---\ntitle: 从零搭建前端组件库\ndate: 2020-03-28 15:32:09\ntop: true\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n- 技术\ncategories:\n- 技术\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 前言 \n> 在前端开发中可能会遇到将相同的功能模板集合成一个组件，供他人调用，这样可以减少重复造轮子，也可以节约人力、财力，更能够提高代码的可维护度；下面将通过详细的步骤教你如何构建一个 Vue 前端组件。。\n\n\n## 1、在本机上安装好 NodeJs，并配置好环境变量\n+ `下载` : [Nodejs地址](http://nodejs.cn/download/)\n\n 我这里是下载 64 位 Windows 安装包(.msi)，大家可以根据自己电脑系统选择相应的版本即可。\n\n ![](1.png)\n\n+ 下载 NodeJs 后双击它，采用默认设置，一直点击下一步，直到 Finish 为止。需要说明的是，在安装 NodeJs 时，已经设置好了系统环境变量，此外 npm 工具也同时被安装好了，我们可以在 cmd 窗口中输入 node -v 命令和 npm -v 命令查看，若都安装成功了话，会看到如下的效果：\n\n![](2.png)\n\n## 2、vue 项目安装(如已安装，可略过此步骤)\n\n+ 创建一个 Vue 项目(使用默认配置安装就 OK)\n\n      vue create ui-demo\n\n+ 安装 babel-plugin-component\n\n      npm i babel-plugin-component -D\n\n`babel-plugin-component` 就是 `Element UI` 用来实现组件按需加载的一个 `babel` 插件。我们把它用到我们的组件库上，就不需要重新造一个轮子出来了.\n+ 在项目的根目录下创建一个 .babelrc 的文件，配置可以参照下面的代码进行更改。\n\n      { \"plugins\": [ [ \"component\", { // 组件库的名字，需要和 package.json 里的 name 相同 \"libraryName\": \"ui-demo\", // 存放组件的文件夹，如果不想配置此项，默认文件夹的名字为 lib \"libDir\": \"components\", } ] ] }\n\n+ 创建一个存放组件的文件夹 \n\n>既然我们刚刚已经配置了存放组件的文件夹，下一步肯定就是创建这么一个文件夹了。由于我配置了的文件夹名为 components，所以我们的文件夹名字就是 components。\n\n+ 上面的操作完成后，我们的项目目录就基本搭建好了，如下：\n+ 写组件终于到了写组件的时候了，在` components` 文件夹下新建一个 `Component1` 的文件夹来存放我们的第一个组件。\n+ `Component1` 文件夹里有一个` Component1.vue` 的文件和一个 `index.js` 文件。目录如下：\nComponent1 -> Component1.vue 代码:\n\n      <template> \n      <h1 class=\"component1\">component1</h1>\n      </template> \n      <script> \n      export default { name: 'Component1' } \n      </script>\n      <style>\n      .component1 { color: green; }\n      </style>\nComponent1 -> index.js代码：\n\n      import Component1 from './Component1.vue'; Component1.install = function (Vue) { Vue.component(Component1.name, Component1); } export default Component1;\n\nindex.js 中的主要功能就是以插件的形式注册一个全局组件，不懂的小伙伴可以照猫画虎，微调一下就好了。\n第二个组件代码就不发出来了，复制一份，给个 css 样式就好了。\n\n在 components 文件夹根目录下创建一个 index.js 用来整合所有组件。\ncomponents -> index.js 代码：\n\n        import Compontent1 from './Component1/index' import Compontent2 from './Component2/index' const components = [ Compontent1, Compontent2, ] function install (Vue) { components.map = (component => { Vue.component(component.name, component) }) } if (typeof window !== 'undefined' && window.Vue) { install(window.Vue); } export default { install, Compontent1, Compontent2, }\n\n\n> 稍微提醒，需要把 install 也一起导出，观察不细心的可能会不注意就写漏了。\n\n## 3、修改或添加 package.json 中的配置\n\n+ `script` 中添加一条命令：\n     \n     \"lib\": \"vue-cli-service build --target lib --name index --dest package components/index.js\"\n\n最后面的 `components/index.js` 是我们存放组件文件夹根目录的`index.js` 文件，记得根据你的情况修改。这个命令执行后，会打包生成一个 `package` 的文件夹。\n\n添加 `files` 白名单，打包上传哪些文件到 `npm` 上：\n\n      \"files\": [\n        \"components\",\n        \"package\"\n        ]\n\n添加 `style`，设置样式路径：\n\n      \"style\": \"package/index.css\"\n\n路径就是我们打包出来的 package 中的 index.css 文件。\n\n+ 添加 main，设置入口：\n\n      \"main\": \"components/index.js\"\n\n路径是存放组件的 components 文件夹下的 index.js 文件。\n将 private 设置为 false：\n      \n      \"private\": false\n\n设置此项目不是私有项目之后，才能发布好 npm 上。\n\n下面的是完整的 package.json 文件配置：\n      \n      { \"name\": \"ui-demo\", \"version\": \"0.1.0\", \"private\": false, \"main\": \"components/index.js\", \"style\": \"package/index.css\", \"files\": [ \"components\", \"package\" ], \"scripts\": { \"serve\": \"vue-cli-service serve\", \"build\": \"vue-cli-service build\", \"lint\": \"vue-cli-service lint\", \"lib\": \"vue-cli-service build --target lib --name index --dest package components/index.js\" }, \"dependencies\": { \"core-js\": \"^2.6.5\", \"vue\": \"^2.6.10\" }, \"devDependencies\": { \"@vue/cli-plugin-babel\": \"^3.7.0\", \"@vue/cli-plugin-eslint\": \"^3.7.0\", \"@vue/cli-service\": \"^3.7.0\", \"babel-eslint\": \"^10.0.1\", \"babel-plugin-component\": \"^1.1.1\", \"eslint\": \"^5.16.0\", \"eslint-plugin-vue\": \"^5.0.0\", \"vue-template-compiler\": \"^2.5.21\" }, \"eslintConfig\": { \"root\": true, \"env\": { \"node\": true }, \"extends\": [ \"plugin:vue/essential\", \"eslint:recommended\" ], \"rules\": {}, \"parserOptions\": { \"parser\": \"babel-eslint\" } }, \"postcss\": { \"plugins\": { \"autoprefixer\": {} } }, \"browserslist\": [ \"> 1%\", \"last 2 versions\" ] }\n\n## 4、打包我们的代码\n\n在控制台执行 `npm run lib` 进行文件打包，打包完成后会多一个 `package` 文件夹。文件目录就变成如下的了：\n![](7.webp)\n\n\n## 5、发布 npm(公库)\n\n      # 这是登录，前提是你已经在 npm 注册了账号\n      npm login\n      # 发布到 npm\n      npm publish\n\n安装库\n\n      npm i ui-demo\n\n## 6、发布 npm(私库)\n首先需要在服务器上搭建一个私库,这里推荐一个:[npm私服搭建—verdaccio方案及其最佳实践](https://www.jianshu.com/p/d32ce7e9d4d8)\n\n建立好私库后,登录、打包跟上面步骤一样,发布时需要使用`nrm`命令 `nrm use xxx`(切换到私库地址),如图所示:\n![](7.png)\n\n+ 发布\n  npm publish\n+ npm 安装\n  npm i  ui-demo  --registry 私库地址\n\n# 结尾 \n这样我们就可以使用我们自己的 UI 库了。","slug":"从零搭建前端组件库","published":1,"updated":"2020-05-28T08:47:53.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckari24za001w5sjo0dqmcyb5","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>在前端开发中可能会遇到将相同的功能模板集合成一个组件，供他人调用，这样可以减少重复造轮子，也可以节约人力、财力，更能够提高代码的可维护度；下面将通过详细的步骤教你如何构建一个 Vue 前端组件。。</p>\n</blockquote>\n<h2 id=\"1、在本机上安装好-NodeJs，并配置好环境变量\"><a href=\"#1、在本机上安装好-NodeJs，并配置好环境变量\" class=\"headerlink\" title=\"1、在本机上安装好 NodeJs，并配置好环境变量\"></a>1、在本机上安装好 NodeJs，并配置好环境变量</h2><ul>\n<li><p><code>下载</code> : <a href=\"http://nodejs.cn/download/\" target=\"_blank\" rel=\"noopener\">Nodejs地址</a></p>\n<p>我这里是下载 64 位 Windows 安装包(.msi)，大家可以根据自己电脑系统选择相应的版本即可。</p>\n<p><img src=\"1.png\" alt></p>\n</li>\n<li><p>下载 NodeJs 后双击它，采用默认设置，一直点击下一步，直到 Finish 为止。需要说明的是，在安装 NodeJs 时，已经设置好了系统环境变量，此外 npm 工具也同时被安装好了，我们可以在 cmd 窗口中输入 node -v 命令和 npm -v 命令查看，若都安装成功了话，会看到如下的效果：</p>\n</li>\n</ul>\n<p><img src=\"2.png\" alt></p>\n<h2 id=\"2、vue-项目安装-如已安装，可略过此步骤\"><a href=\"#2、vue-项目安装-如已安装，可略过此步骤\" class=\"headerlink\" title=\"2、vue 项目安装(如已安装，可略过此步骤)\"></a>2、vue 项目安装(如已安装，可略过此步骤)</h2><ul>\n<li><p>创建一个 Vue 项目(使用默认配置安装就 OK)</p>\n<pre><code>vue create ui-demo</code></pre></li>\n<li><p>安装 babel-plugin-component</p>\n<pre><code>npm i babel-plugin-component -D</code></pre></li>\n</ul>\n<p><code>babel-plugin-component</code> 就是 <code>Element UI</code> 用来实现组件按需加载的一个 <code>babel</code> 插件。我们把它用到我们的组件库上，就不需要重新造一个轮子出来了.</p>\n<ul>\n<li><p>在项目的根目录下创建一个 .babelrc 的文件，配置可以参照下面的代码进行更改。</p>\n<pre><code>{ &quot;plugins&quot;: [ [ &quot;component&quot;, { // 组件库的名字，需要和 package.json 里的 name 相同 &quot;libraryName&quot;: &quot;ui-demo&quot;, // 存放组件的文件夹，如果不想配置此项，默认文件夹的名字为 lib &quot;libDir&quot;: &quot;components&quot;, } ] ] }</code></pre></li>\n<li><p>创建一个存放组件的文件夹 </p>\n</li>\n</ul>\n<blockquote>\n<p>既然我们刚刚已经配置了存放组件的文件夹，下一步肯定就是创建这么一个文件夹了。由于我配置了的文件夹名为 components，所以我们的文件夹名字就是 components。</p>\n</blockquote>\n<ul>\n<li><p>上面的操作完成后，我们的项目目录就基本搭建好了，如下：</p>\n</li>\n<li><p>写组件终于到了写组件的时候了，在<code>components</code> 文件夹下新建一个 <code>Component1</code> 的文件夹来存放我们的第一个组件。</p>\n</li>\n<li><p><code>Component1</code> 文件夹里有一个<code>Component1.vue</code> 的文件和一个 <code>index.js</code> 文件。目录如下：<br>Component1 -&gt; Component1.vue 代码:</p>\n<pre><code>&lt;template&gt; \n&lt;h1 class=&quot;component1&quot;&gt;component1&lt;/h1&gt;\n&lt;/template&gt; \n&lt;script&gt; \nexport default { name: &#39;Component1&#39; } \n&lt;/script&gt;\n&lt;style&gt;\n.component1 { color: green; }\n&lt;/style&gt;</code></pre><p>Component1 -&gt; index.js代码：</p>\n<pre><code>import Component1 from &#39;./Component1.vue&#39;; Component1.install = function (Vue) { Vue.component(Component1.name, Component1); } export default Component1;</code></pre></li>\n</ul>\n<p>index.js 中的主要功能就是以插件的形式注册一个全局组件，不懂的小伙伴可以照猫画虎，微调一下就好了。<br>第二个组件代码就不发出来了，复制一份，给个 css 样式就好了。</p>\n<p>在 components 文件夹根目录下创建一个 index.js 用来整合所有组件。<br>components -&gt; index.js 代码：</p>\n<pre><code>    import Compontent1 from &#39;./Component1/index&#39; import Compontent2 from &#39;./Component2/index&#39; const components = [ Compontent1, Compontent2, ] function install (Vue) { components.map = (component =&gt; { Vue.component(component.name, component) }) } if (typeof window !== &#39;undefined&#39; &amp;&amp; window.Vue) { install(window.Vue); } export default { install, Compontent1, Compontent2, }</code></pre><blockquote>\n<p>稍微提醒，需要把 install 也一起导出，观察不细心的可能会不注意就写漏了。</p>\n</blockquote>\n<h2 id=\"3、修改或添加-package-json-中的配置\"><a href=\"#3、修改或添加-package-json-中的配置\" class=\"headerlink\" title=\"3、修改或添加 package.json 中的配置\"></a>3、修改或添加 package.json 中的配置</h2><ul>\n<li><p><code>script</code> 中添加一条命令：</p>\n<p>   “lib”: “vue-cli-service build –target lib –name index –dest package components/index.js”</p>\n</li>\n</ul>\n<p>最后面的 <code>components/index.js</code> 是我们存放组件文件夹根目录的<code>index.js</code> 文件，记得根据你的情况修改。这个命令执行后，会打包生成一个 <code>package</code> 的文件夹。</p>\n<p>添加 <code>files</code> 白名单，打包上传哪些文件到 <code>npm</code> 上：</p>\n<pre><code>  &quot;files&quot;: [\n    &quot;components&quot;,\n    &quot;package&quot;\n    ]</code></pre><p>添加 <code>style</code>，设置样式路径：</p>\n<pre><code>  &quot;style&quot;: &quot;package/index.css&quot;</code></pre><p>路径就是我们打包出来的 package 中的 index.css 文件。</p>\n<ul>\n<li><p>添加 main，设置入口：</p>\n<pre><code>&quot;main&quot;: &quot;components/index.js&quot;</code></pre></li>\n</ul>\n<p>路径是存放组件的 components 文件夹下的 index.js 文件。<br>将 private 设置为 false：</p>\n<pre><code>  &quot;private&quot;: false</code></pre><p>设置此项目不是私有项目之后，才能发布好 npm 上。</p>\n<p>下面的是完整的 package.json 文件配置：</p>\n<pre><code>  { &quot;name&quot;: &quot;ui-demo&quot;, &quot;version&quot;: &quot;0.1.0&quot;, &quot;private&quot;: false, &quot;main&quot;: &quot;components/index.js&quot;, &quot;style&quot;: &quot;package/index.css&quot;, &quot;files&quot;: [ &quot;components&quot;, &quot;package&quot; ], &quot;scripts&quot;: { &quot;serve&quot;: &quot;vue-cli-service serve&quot;, &quot;build&quot;: &quot;vue-cli-service build&quot;, &quot;lint&quot;: &quot;vue-cli-service lint&quot;, &quot;lib&quot;: &quot;vue-cli-service build --target lib --name index --dest package components/index.js&quot; }, &quot;dependencies&quot;: { &quot;core-js&quot;: &quot;^2.6.5&quot;, &quot;vue&quot;: &quot;^2.6.10&quot; }, &quot;devDependencies&quot;: { &quot;@vue/cli-plugin-babel&quot;: &quot;^3.7.0&quot;, &quot;@vue/cli-plugin-eslint&quot;: &quot;^3.7.0&quot;, &quot;@vue/cli-service&quot;: &quot;^3.7.0&quot;, &quot;babel-eslint&quot;: &quot;^10.0.1&quot;, &quot;babel-plugin-component&quot;: &quot;^1.1.1&quot;, &quot;eslint&quot;: &quot;^5.16.0&quot;, &quot;eslint-plugin-vue&quot;: &quot;^5.0.0&quot;, &quot;vue-template-compiler&quot;: &quot;^2.5.21&quot; }, &quot;eslintConfig&quot;: { &quot;root&quot;: true, &quot;env&quot;: { &quot;node&quot;: true }, &quot;extends&quot;: [ &quot;plugin:vue/essential&quot;, &quot;eslint:recommended&quot; ], &quot;rules&quot;: {}, &quot;parserOptions&quot;: { &quot;parser&quot;: &quot;babel-eslint&quot; } }, &quot;postcss&quot;: { &quot;plugins&quot;: { &quot;autoprefixer&quot;: {} } }, &quot;browserslist&quot;: [ &quot;&gt; 1%&quot;, &quot;last 2 versions&quot; ] }</code></pre><h2 id=\"4、打包我们的代码\"><a href=\"#4、打包我们的代码\" class=\"headerlink\" title=\"4、打包我们的代码\"></a>4、打包我们的代码</h2><p>在控制台执行 <code>npm run lib</code> 进行文件打包，打包完成后会多一个 <code>package</code> 文件夹。文件目录就变成如下的了：<br><img src=\"7.webp\" alt></p>\n<h2 id=\"5、发布-npm-公库\"><a href=\"#5、发布-npm-公库\" class=\"headerlink\" title=\"5、发布 npm(公库)\"></a>5、发布 npm(公库)</h2><pre><code>  # 这是登录，前提是你已经在 npm 注册了账号\n  npm login\n  # 发布到 npm\n  npm publish</code></pre><p>安装库</p>\n<pre><code>  npm i ui-demo</code></pre><h2 id=\"6、发布-npm-私库\"><a href=\"#6、发布-npm-私库\" class=\"headerlink\" title=\"6、发布 npm(私库)\"></a>6、发布 npm(私库)</h2><p>首先需要在服务器上搭建一个私库,这里推荐一个:<a href=\"https://www.jianshu.com/p/d32ce7e9d4d8\" target=\"_blank\" rel=\"noopener\">npm私服搭建—verdaccio方案及其最佳实践</a></p>\n<p>建立好私库后,登录、打包跟上面步骤一样,发布时需要使用<code>nrm</code>命令 <code>nrm use xxx</code>(切换到私库地址),如图所示:<br><img src=\"7.png\" alt></p>\n<ul>\n<li>发布<br>npm publish</li>\n<li>npm 安装<br>npm i  ui-demo  –registry 私库地址</li>\n</ul>\n<h1 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h1><p>这样我们就可以使用我们自己的 UI 库了。</p>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>在前端开发中可能会遇到将相同的功能模板集合成一个组件，供他人调用，这样可以减少重复造轮子，也可以节约人力、财力，更能够提高代码的可维护度；下面将通过详细的步骤教你如何构建一个 Vue 前端组件。。</p>\n</blockquote>\n<h2 id=\"1、在本机上安装好-NodeJs，并配置好环境变量\"><a href=\"#1、在本机上安装好-NodeJs，并配置好环境变量\" class=\"headerlink\" title=\"1、在本机上安装好 NodeJs，并配置好环境变量\"></a>1、在本机上安装好 NodeJs，并配置好环境变量</h2><ul>\n<li><p><code>下载</code> : <a href=\"http://nodejs.cn/download/\" target=\"_blank\" rel=\"noopener\">Nodejs地址</a></p>\n<p>我这里是下载 64 位 Windows 安装包(.msi)，大家可以根据自己电脑系统选择相应的版本即可。</p>\n<p><img src=\"1.png\" alt></p>\n</li>\n<li><p>下载 NodeJs 后双击它，采用默认设置，一直点击下一步，直到 Finish 为止。需要说明的是，在安装 NodeJs 时，已经设置好了系统环境变量，此外 npm 工具也同时被安装好了，我们可以在 cmd 窗口中输入 node -v 命令和 npm -v 命令查看，若都安装成功了话，会看到如下的效果：</p>\n</li>\n</ul>\n<p><img src=\"2.png\" alt></p>\n<h2 id=\"2、vue-项目安装-如已安装，可略过此步骤\"><a href=\"#2、vue-项目安装-如已安装，可略过此步骤\" class=\"headerlink\" title=\"2、vue 项目安装(如已安装，可略过此步骤)\"></a>2、vue 项目安装(如已安装，可略过此步骤)</h2><ul>\n<li><p>创建一个 Vue 项目(使用默认配置安装就 OK)</p>\n<pre><code>vue create ui-demo</code></pre></li>\n<li><p>安装 babel-plugin-component</p>\n<pre><code>npm i babel-plugin-component -D</code></pre></li>\n</ul>\n<p><code>babel-plugin-component</code> 就是 <code>Element UI</code> 用来实现组件按需加载的一个 <code>babel</code> 插件。我们把它用到我们的组件库上，就不需要重新造一个轮子出来了.</p>\n<ul>\n<li><p>在项目的根目录下创建一个 .babelrc 的文件，配置可以参照下面的代码进行更改。</p>\n<pre><code>{ &quot;plugins&quot;: [ [ &quot;component&quot;, { // 组件库的名字，需要和 package.json 里的 name 相同 &quot;libraryName&quot;: &quot;ui-demo&quot;, // 存放组件的文件夹，如果不想配置此项，默认文件夹的名字为 lib &quot;libDir&quot;: &quot;components&quot;, } ] ] }</code></pre></li>\n<li><p>创建一个存放组件的文件夹 </p>\n</li>\n</ul>\n<blockquote>\n<p>既然我们刚刚已经配置了存放组件的文件夹，下一步肯定就是创建这么一个文件夹了。由于我配置了的文件夹名为 components，所以我们的文件夹名字就是 components。</p>\n</blockquote>\n<ul>\n<li><p>上面的操作完成后，我们的项目目录就基本搭建好了，如下：</p>\n</li>\n<li><p>写组件终于到了写组件的时候了，在<code>components</code> 文件夹下新建一个 <code>Component1</code> 的文件夹来存放我们的第一个组件。</p>\n</li>\n<li><p><code>Component1</code> 文件夹里有一个<code>Component1.vue</code> 的文件和一个 <code>index.js</code> 文件。目录如下：<br>Component1 -&gt; Component1.vue 代码:</p>\n<pre><code>&lt;template&gt; \n&lt;h1 class=&quot;component1&quot;&gt;component1&lt;/h1&gt;\n&lt;/template&gt; \n&lt;script&gt; \nexport default { name: &#39;Component1&#39; } \n&lt;/script&gt;\n&lt;style&gt;\n.component1 { color: green; }\n&lt;/style&gt;</code></pre><p>Component1 -&gt; index.js代码：</p>\n<pre><code>import Component1 from &#39;./Component1.vue&#39;; Component1.install = function (Vue) { Vue.component(Component1.name, Component1); } export default Component1;</code></pre></li>\n</ul>\n<p>index.js 中的主要功能就是以插件的形式注册一个全局组件，不懂的小伙伴可以照猫画虎，微调一下就好了。<br>第二个组件代码就不发出来了，复制一份，给个 css 样式就好了。</p>\n<p>在 components 文件夹根目录下创建一个 index.js 用来整合所有组件。<br>components -&gt; index.js 代码：</p>\n<pre><code>    import Compontent1 from &#39;./Component1/index&#39; import Compontent2 from &#39;./Component2/index&#39; const components = [ Compontent1, Compontent2, ] function install (Vue) { components.map = (component =&gt; { Vue.component(component.name, component) }) } if (typeof window !== &#39;undefined&#39; &amp;&amp; window.Vue) { install(window.Vue); } export default { install, Compontent1, Compontent2, }</code></pre><blockquote>\n<p>稍微提醒，需要把 install 也一起导出，观察不细心的可能会不注意就写漏了。</p>\n</blockquote>\n<h2 id=\"3、修改或添加-package-json-中的配置\"><a href=\"#3、修改或添加-package-json-中的配置\" class=\"headerlink\" title=\"3、修改或添加 package.json 中的配置\"></a>3、修改或添加 package.json 中的配置</h2><ul>\n<li><p><code>script</code> 中添加一条命令：</p>\n<p>   “lib”: “vue-cli-service build –target lib –name index –dest package components/index.js”</p>\n</li>\n</ul>\n<p>最后面的 <code>components/index.js</code> 是我们存放组件文件夹根目录的<code>index.js</code> 文件，记得根据你的情况修改。这个命令执行后，会打包生成一个 <code>package</code> 的文件夹。</p>\n<p>添加 <code>files</code> 白名单，打包上传哪些文件到 <code>npm</code> 上：</p>\n<pre><code>  &quot;files&quot;: [\n    &quot;components&quot;,\n    &quot;package&quot;\n    ]</code></pre><p>添加 <code>style</code>，设置样式路径：</p>\n<pre><code>  &quot;style&quot;: &quot;package/index.css&quot;</code></pre><p>路径就是我们打包出来的 package 中的 index.css 文件。</p>\n<ul>\n<li><p>添加 main，设置入口：</p>\n<pre><code>&quot;main&quot;: &quot;components/index.js&quot;</code></pre></li>\n</ul>\n<p>路径是存放组件的 components 文件夹下的 index.js 文件。<br>将 private 设置为 false：</p>\n<pre><code>  &quot;private&quot;: false</code></pre><p>设置此项目不是私有项目之后，才能发布好 npm 上。</p>\n<p>下面的是完整的 package.json 文件配置：</p>\n<pre><code>  { &quot;name&quot;: &quot;ui-demo&quot;, &quot;version&quot;: &quot;0.1.0&quot;, &quot;private&quot;: false, &quot;main&quot;: &quot;components/index.js&quot;, &quot;style&quot;: &quot;package/index.css&quot;, &quot;files&quot;: [ &quot;components&quot;, &quot;package&quot; ], &quot;scripts&quot;: { &quot;serve&quot;: &quot;vue-cli-service serve&quot;, &quot;build&quot;: &quot;vue-cli-service build&quot;, &quot;lint&quot;: &quot;vue-cli-service lint&quot;, &quot;lib&quot;: &quot;vue-cli-service build --target lib --name index --dest package components/index.js&quot; }, &quot;dependencies&quot;: { &quot;core-js&quot;: &quot;^2.6.5&quot;, &quot;vue&quot;: &quot;^2.6.10&quot; }, &quot;devDependencies&quot;: { &quot;@vue/cli-plugin-babel&quot;: &quot;^3.7.0&quot;, &quot;@vue/cli-plugin-eslint&quot;: &quot;^3.7.0&quot;, &quot;@vue/cli-service&quot;: &quot;^3.7.0&quot;, &quot;babel-eslint&quot;: &quot;^10.0.1&quot;, &quot;babel-plugin-component&quot;: &quot;^1.1.1&quot;, &quot;eslint&quot;: &quot;^5.16.0&quot;, &quot;eslint-plugin-vue&quot;: &quot;^5.0.0&quot;, &quot;vue-template-compiler&quot;: &quot;^2.5.21&quot; }, &quot;eslintConfig&quot;: { &quot;root&quot;: true, &quot;env&quot;: { &quot;node&quot;: true }, &quot;extends&quot;: [ &quot;plugin:vue/essential&quot;, &quot;eslint:recommended&quot; ], &quot;rules&quot;: {}, &quot;parserOptions&quot;: { &quot;parser&quot;: &quot;babel-eslint&quot; } }, &quot;postcss&quot;: { &quot;plugins&quot;: { &quot;autoprefixer&quot;: {} } }, &quot;browserslist&quot;: [ &quot;&gt; 1%&quot;, &quot;last 2 versions&quot; ] }</code></pre><h2 id=\"4、打包我们的代码\"><a href=\"#4、打包我们的代码\" class=\"headerlink\" title=\"4、打包我们的代码\"></a>4、打包我们的代码</h2><p>在控制台执行 <code>npm run lib</code> 进行文件打包，打包完成后会多一个 <code>package</code> 文件夹。文件目录就变成如下的了：<br><img src=\"7.webp\" alt></p>\n<h2 id=\"5、发布-npm-公库\"><a href=\"#5、发布-npm-公库\" class=\"headerlink\" title=\"5、发布 npm(公库)\"></a>5、发布 npm(公库)</h2><pre><code>  # 这是登录，前提是你已经在 npm 注册了账号\n  npm login\n  # 发布到 npm\n  npm publish</code></pre><p>安装库</p>\n<pre><code>  npm i ui-demo</code></pre><h2 id=\"6、发布-npm-私库\"><a href=\"#6、发布-npm-私库\" class=\"headerlink\" title=\"6、发布 npm(私库)\"></a>6、发布 npm(私库)</h2><p>首先需要在服务器上搭建一个私库,这里推荐一个:<a href=\"https://www.jianshu.com/p/d32ce7e9d4d8\" target=\"_blank\" rel=\"noopener\">npm私服搭建—verdaccio方案及其最佳实践</a></p>\n<p>建立好私库后,登录、打包跟上面步骤一样,发布时需要使用<code>nrm</code>命令 <code>nrm use xxx</code>(切换到私库地址),如图所示:<br><img src=\"7.png\" alt></p>\n<ul>\n<li>发布<br>npm publish</li>\n<li>npm 安装<br>npm i  ui-demo  –registry 私库地址</li>\n</ul>\n<h1 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h1><p>这样我们就可以使用我们自己的 UI 库了。</p>\n"},{"title":"2019 年的思考总结","date":"2019-12-30T13:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 自我介绍\n\n首先依照国际惯例来个自我介绍，我叫 linfeng，参加工作两年。来掘金一年多了，刚开始的时候觉得这平台不错，文章质量过硬，而且人气很高；经常在搜索引擎搜素不到的知识点，在掘金能够找到对应的博客。\n再来讲讲我的工作，作为一个前端，我的技术栈是 vue、css3 、canvas、gis、react-native 以及会点 react。\n\n# 2019 年成长之路\n\n> 2019 年对于整个互联网行业来说是十分坎坷的一年，从年头开始整个行业就被各种的倒闭、欠薪以及裁员等负面消息所笼盖，被称之为互联网寒冬。\n\n作为一名小前端，为了不被寒冬冻僵，2019 年我在努力地为自己穿上防寒外套。做了下面几个方面进行了学习和研究：\n\n# React-Native()\n\n从 2019 年 9 月份开始到现在,断断续续做了几个月。我们做的是一款环保类型的内部使用 APP,主要检测业务空气、水环境等等业务,说到这里不得不说下 RN 的优劣:\n\n## RN 的优势\n\n- 调试方便\n  ipa 安装好之后，就不需要频繁编译了，只需要 reload 一下，把 js 代码从云服务器下载下来就可以呈现改变代码后的效果。而且 RN 支持 hotReload，在调试界面的时候非常方便，修改代码之后保存，界面就自动跟着变化，这一点在调试的时候实在很爽，不过有时候有点慢，需要 reload。chrome 在线调试也挺不错，可以打断点，看日志。虽然没有 xcode 或者 Android Studio 那么浑然一体，但是作为脚本语言的调试工具，也是很厉害了。\n\n- css-layout 布局\n  这对于前端程序员来说，降低了不少学习成本，也大大减少了代码量。但是对于 iOS 或者安卓开发者来说，刚开始接触的时候，得接受一些思想上的转变。\n\n- 跨平台\n  大多数代码，只需要写一套，安卓和 iOS 就都可以运行了，游戏逻辑和数据。界面上一部分有一些平台区分，毕竟是从 react 包装上来的。刚开始学 iOS 的时候，就想象着，要是有一种跨平台的开发形式就很 6 了，没想到过了几年就有了。跨平台理论上是可以减少开发成本的，减少开发人员数量，但是实际效果并不然，后面说。\n\n- 热更新\n  这可能也是大多数公司选择使用 RN 的主要原因。频繁的 app 升级会让用户很烦，而且苹果的审核真是很麻烦。现在很多大型 app 都使用了 RN，毕竟繁多的业务迭代，每次都通过 APP 审核，也算是噩梦啊。\n\n## RN 的不完善\n\n容我吐槽一下，不完善的地方实在太多了，和原生开发体验来比，堪称天壤之别。RN 现在的最新版本是 0.46，我们工程中用的是 0.42，毕竟还没上 1.0 呢。\n去掉主观情感，下面列举一下部分不完善的点：\n\n- 开发体验一般。\n  虽然 js 语法很灵活，但毕竟是脚本语言，调试起来还是不方便，不好查错。我们用的表现较好的 vscode 编辑器，就这都感觉各种跳转很不方便，动不动就得全局搜索，可能是 xcode 用习惯了吧。脚本语言的编写也会慢慢习惯吧。\n\n- 文档很粗略\n  官网上的文档，就只是简单介绍用法和各个控件的属性，对细节的描述很少。当你遇到难解决的问题或者踩到坑了，上面基本找不到答案。\n\n- 两个平台还没有完全统一\n  很多控件都是 iOS 专属，或者安卓专属。还有同一些控件，在不同平台上表现差异很大。\n\n- 控件不完善\n  这个其实挺多的，最基本的 ListView，功能缺失，坑很多。Text 不支持富文本，动画，手势，ScrollView 等等等等。不能一一列举。作为聊天软件，富文本功能必须实现啊，用于 emoji 表情和文字的混合显示。被迫自己搞了一套实现方案，现在还有点小 bug。具体实现方案参考http://blog.csdn.net/gang544043963/article/details/70245850\n\n- 升级 RN 版本需要大动干戈\n  近期我们做了一次 RN 版本升级，从原来的 0.42 升到最近的 0.50。真的挺麻烦。新版把 PropTyps 从 React 中移了出来，那么之前的引用方式就得变，所有的文件挨个查。之前使用的第三方库，有和 PropTyps 相关的，都得一一更新。之前很多界面布局的时候，在 image 上放置了一些其他控件，升级后会报错，然后一一调整。\n\n- 要做出优质 app 需要花费大量人力和时间去打磨\n  跨平台，其实并没有减少开发成本，原来我们安卓和 iOS 各三个人，每次迭代都是有序进行。然而换了 RN 之后，6 个人全上，做的累的啊，迭代慢，bug 多。\n\n\n# React ( ps:平时工作不用,闲暇研究... )\n\n前端三大主流框架:React、Vue、Angular。\n\n### 一、vue.js\n\n- 优点：更轻量，单页面，简单易学\n\n- 缺点：不支持 IE8\n\n### 二、Angular\n\n- 优点：模块化功能强大、自定义 directive 非常灵活、双向数据绑定，依赖注入\n\n- 缺点：比较笨重，学习成本高，不兼容 IE6/7\n\n### 三、react\n\n- 优点：速度快、跨浏览器兼容、单向数据流、兼容性好\n\n- 缺点：并不是一个完整的框架，需要加上 ReactRouter 和 Flux 才能完成。\n\n\n# 陆续更新中...\n\n# 2020 展望\n","source":"_posts/年末总结.md","raw":"---\ntitle: 2019 年的思考总结\ndate: 2019-12-30 21:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n  - 总结\ncategories:\n  - 总结\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 自我介绍\n\n首先依照国际惯例来个自我介绍，我叫 linfeng，参加工作两年。来掘金一年多了，刚开始的时候觉得这平台不错，文章质量过硬，而且人气很高；经常在搜索引擎搜素不到的知识点，在掘金能够找到对应的博客。\n再来讲讲我的工作，作为一个前端，我的技术栈是 vue、css3 、canvas、gis、react-native 以及会点 react。\n\n# 2019 年成长之路\n\n> 2019 年对于整个互联网行业来说是十分坎坷的一年，从年头开始整个行业就被各种的倒闭、欠薪以及裁员等负面消息所笼盖，被称之为互联网寒冬。\n\n作为一名小前端，为了不被寒冬冻僵，2019 年我在努力地为自己穿上防寒外套。做了下面几个方面进行了学习和研究：\n\n# React-Native()\n\n从 2019 年 9 月份开始到现在,断断续续做了几个月。我们做的是一款环保类型的内部使用 APP,主要检测业务空气、水环境等等业务,说到这里不得不说下 RN 的优劣:\n\n## RN 的优势\n\n- 调试方便\n  ipa 安装好之后，就不需要频繁编译了，只需要 reload 一下，把 js 代码从云服务器下载下来就可以呈现改变代码后的效果。而且 RN 支持 hotReload，在调试界面的时候非常方便，修改代码之后保存，界面就自动跟着变化，这一点在调试的时候实在很爽，不过有时候有点慢，需要 reload。chrome 在线调试也挺不错，可以打断点，看日志。虽然没有 xcode 或者 Android Studio 那么浑然一体，但是作为脚本语言的调试工具，也是很厉害了。\n\n- css-layout 布局\n  这对于前端程序员来说，降低了不少学习成本，也大大减少了代码量。但是对于 iOS 或者安卓开发者来说，刚开始接触的时候，得接受一些思想上的转变。\n\n- 跨平台\n  大多数代码，只需要写一套，安卓和 iOS 就都可以运行了，游戏逻辑和数据。界面上一部分有一些平台区分，毕竟是从 react 包装上来的。刚开始学 iOS 的时候，就想象着，要是有一种跨平台的开发形式就很 6 了，没想到过了几年就有了。跨平台理论上是可以减少开发成本的，减少开发人员数量，但是实际效果并不然，后面说。\n\n- 热更新\n  这可能也是大多数公司选择使用 RN 的主要原因。频繁的 app 升级会让用户很烦，而且苹果的审核真是很麻烦。现在很多大型 app 都使用了 RN，毕竟繁多的业务迭代，每次都通过 APP 审核，也算是噩梦啊。\n\n## RN 的不完善\n\n容我吐槽一下，不完善的地方实在太多了，和原生开发体验来比，堪称天壤之别。RN 现在的最新版本是 0.46，我们工程中用的是 0.42，毕竟还没上 1.0 呢。\n去掉主观情感，下面列举一下部分不完善的点：\n\n- 开发体验一般。\n  虽然 js 语法很灵活，但毕竟是脚本语言，调试起来还是不方便，不好查错。我们用的表现较好的 vscode 编辑器，就这都感觉各种跳转很不方便，动不动就得全局搜索，可能是 xcode 用习惯了吧。脚本语言的编写也会慢慢习惯吧。\n\n- 文档很粗略\n  官网上的文档，就只是简单介绍用法和各个控件的属性，对细节的描述很少。当你遇到难解决的问题或者踩到坑了，上面基本找不到答案。\n\n- 两个平台还没有完全统一\n  很多控件都是 iOS 专属，或者安卓专属。还有同一些控件，在不同平台上表现差异很大。\n\n- 控件不完善\n  这个其实挺多的，最基本的 ListView，功能缺失，坑很多。Text 不支持富文本，动画，手势，ScrollView 等等等等。不能一一列举。作为聊天软件，富文本功能必须实现啊，用于 emoji 表情和文字的混合显示。被迫自己搞了一套实现方案，现在还有点小 bug。具体实现方案参考http://blog.csdn.net/gang544043963/article/details/70245850\n\n- 升级 RN 版本需要大动干戈\n  近期我们做了一次 RN 版本升级，从原来的 0.42 升到最近的 0.50。真的挺麻烦。新版把 PropTyps 从 React 中移了出来，那么之前的引用方式就得变，所有的文件挨个查。之前使用的第三方库，有和 PropTyps 相关的，都得一一更新。之前很多界面布局的时候，在 image 上放置了一些其他控件，升级后会报错，然后一一调整。\n\n- 要做出优质 app 需要花费大量人力和时间去打磨\n  跨平台，其实并没有减少开发成本，原来我们安卓和 iOS 各三个人，每次迭代都是有序进行。然而换了 RN 之后，6 个人全上，做的累的啊，迭代慢，bug 多。\n\n\n# React ( ps:平时工作不用,闲暇研究... )\n\n前端三大主流框架:React、Vue、Angular。\n\n### 一、vue.js\n\n- 优点：更轻量，单页面，简单易学\n\n- 缺点：不支持 IE8\n\n### 二、Angular\n\n- 优点：模块化功能强大、自定义 directive 非常灵活、双向数据绑定，依赖注入\n\n- 缺点：比较笨重，学习成本高，不兼容 IE6/7\n\n### 三、react\n\n- 优点：速度快、跨浏览器兼容、单向数据流、兼容性好\n\n- 缺点：并不是一个完整的框架，需要加上 ReactRouter 和 Flux 才能完成。\n\n\n# 陆续更新中...\n\n# 2020 展望\n","slug":"年末总结","published":1,"updated":"2020-05-28T07:51:13.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckari24zd001z5sjor4jmd1wh","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h1><p>首先依照国际惯例来个自我介绍，我叫 linfeng，参加工作两年。来掘金一年多了，刚开始的时候觉得这平台不错，文章质量过硬，而且人气很高；经常在搜索引擎搜素不到的知识点，在掘金能够找到对应的博客。<br>再来讲讲我的工作，作为一个前端，我的技术栈是 vue、css3 、canvas、gis、react-native 以及会点 react。</p>\n<h1 id=\"2019-年成长之路\"><a href=\"#2019-年成长之路\" class=\"headerlink\" title=\"2019 年成长之路\"></a>2019 年成长之路</h1><blockquote>\n<p>2019 年对于整个互联网行业来说是十分坎坷的一年，从年头开始整个行业就被各种的倒闭、欠薪以及裁员等负面消息所笼盖，被称之为互联网寒冬。</p>\n</blockquote>\n<p>作为一名小前端，为了不被寒冬冻僵，2019 年我在努力地为自己穿上防寒外套。做了下面几个方面进行了学习和研究：</p>\n<h1 id=\"React-Native\"><a href=\"#React-Native\" class=\"headerlink\" title=\"React-Native()\"></a>React-Native()</h1><p>从 2019 年 9 月份开始到现在,断断续续做了几个月。我们做的是一款环保类型的内部使用 APP,主要检测业务空气、水环境等等业务,说到这里不得不说下 RN 的优劣:</p>\n<h2 id=\"RN-的优势\"><a href=\"#RN-的优势\" class=\"headerlink\" title=\"RN 的优势\"></a>RN 的优势</h2><ul>\n<li><p>调试方便<br>ipa 安装好之后，就不需要频繁编译了，只需要 reload 一下，把 js 代码从云服务器下载下来就可以呈现改变代码后的效果。而且 RN 支持 hotReload，在调试界面的时候非常方便，修改代码之后保存，界面就自动跟着变化，这一点在调试的时候实在很爽，不过有时候有点慢，需要 reload。chrome 在线调试也挺不错，可以打断点，看日志。虽然没有 xcode 或者 Android Studio 那么浑然一体，但是作为脚本语言的调试工具，也是很厉害了。</p>\n</li>\n<li><p>css-layout 布局<br>这对于前端程序员来说，降低了不少学习成本，也大大减少了代码量。但是对于 iOS 或者安卓开发者来说，刚开始接触的时候，得接受一些思想上的转变。</p>\n</li>\n<li><p>跨平台<br>大多数代码，只需要写一套，安卓和 iOS 就都可以运行了，游戏逻辑和数据。界面上一部分有一些平台区分，毕竟是从 react 包装上来的。刚开始学 iOS 的时候，就想象着，要是有一种跨平台的开发形式就很 6 了，没想到过了几年就有了。跨平台理论上是可以减少开发成本的，减少开发人员数量，但是实际效果并不然，后面说。</p>\n</li>\n<li><p>热更新<br>这可能也是大多数公司选择使用 RN 的主要原因。频繁的 app 升级会让用户很烦，而且苹果的审核真是很麻烦。现在很多大型 app 都使用了 RN，毕竟繁多的业务迭代，每次都通过 APP 审核，也算是噩梦啊。</p>\n</li>\n</ul>\n<h2 id=\"RN-的不完善\"><a href=\"#RN-的不完善\" class=\"headerlink\" title=\"RN 的不完善\"></a>RN 的不完善</h2><p>容我吐槽一下，不完善的地方实在太多了，和原生开发体验来比，堪称天壤之别。RN 现在的最新版本是 0.46，我们工程中用的是 0.42，毕竟还没上 1.0 呢。<br>去掉主观情感，下面列举一下部分不完善的点：</p>\n<ul>\n<li><p>开发体验一般。<br>虽然 js 语法很灵活，但毕竟是脚本语言，调试起来还是不方便，不好查错。我们用的表现较好的 vscode 编辑器，就这都感觉各种跳转很不方便，动不动就得全局搜索，可能是 xcode 用习惯了吧。脚本语言的编写也会慢慢习惯吧。</p>\n</li>\n<li><p>文档很粗略<br>官网上的文档，就只是简单介绍用法和各个控件的属性，对细节的描述很少。当你遇到难解决的问题或者踩到坑了，上面基本找不到答案。</p>\n</li>\n<li><p>两个平台还没有完全统一<br>很多控件都是 iOS 专属，或者安卓专属。还有同一些控件，在不同平台上表现差异很大。</p>\n</li>\n<li><p>控件不完善<br>这个其实挺多的，最基本的 ListView，功能缺失，坑很多。Text 不支持富文本，动画，手势，ScrollView 等等等等。不能一一列举。作为聊天软件，富文本功能必须实现啊，用于 emoji 表情和文字的混合显示。被迫自己搞了一套实现方案，现在还有点小 bug。具体实现方案参考<a href=\"http://blog.csdn.net/gang544043963/article/details/70245850\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/gang544043963/article/details/70245850</a></p>\n</li>\n<li><p>升级 RN 版本需要大动干戈<br>近期我们做了一次 RN 版本升级，从原来的 0.42 升到最近的 0.50。真的挺麻烦。新版把 PropTyps 从 React 中移了出来，那么之前的引用方式就得变，所有的文件挨个查。之前使用的第三方库，有和 PropTyps 相关的，都得一一更新。之前很多界面布局的时候，在 image 上放置了一些其他控件，升级后会报错，然后一一调整。</p>\n</li>\n<li><p>要做出优质 app 需要花费大量人力和时间去打磨<br>跨平台，其实并没有减少开发成本，原来我们安卓和 iOS 各三个人，每次迭代都是有序进行。然而换了 RN 之后，6 个人全上，做的累的啊，迭代慢，bug 多。</p>\n</li>\n</ul>\n<h1 id=\"React-ps-平时工作不用-闲暇研究…\"><a href=\"#React-ps-平时工作不用-闲暇研究…\" class=\"headerlink\" title=\"React ( ps:平时工作不用,闲暇研究… )\"></a>React ( ps:平时工作不用,闲暇研究… )</h1><p>前端三大主流框架:React、Vue、Angular。</p>\n<h3 id=\"一、vue-js\"><a href=\"#一、vue-js\" class=\"headerlink\" title=\"一、vue.js\"></a>一、vue.js</h3><ul>\n<li><p>优点：更轻量，单页面，简单易学</p>\n</li>\n<li><p>缺点：不支持 IE8</p>\n</li>\n</ul>\n<h3 id=\"二、Angular\"><a href=\"#二、Angular\" class=\"headerlink\" title=\"二、Angular\"></a>二、Angular</h3><ul>\n<li><p>优点：模块化功能强大、自定义 directive 非常灵活、双向数据绑定，依赖注入</p>\n</li>\n<li><p>缺点：比较笨重，学习成本高，不兼容 IE6/7</p>\n</li>\n</ul>\n<h3 id=\"三、react\"><a href=\"#三、react\" class=\"headerlink\" title=\"三、react\"></a>三、react</h3><ul>\n<li><p>优点：速度快、跨浏览器兼容、单向数据流、兼容性好</p>\n</li>\n<li><p>缺点：并不是一个完整的框架，需要加上 ReactRouter 和 Flux 才能完成。</p>\n</li>\n</ul>\n<h1 id=\"陆续更新中…\"><a href=\"#陆续更新中…\" class=\"headerlink\" title=\"陆续更新中…\"></a>陆续更新中…</h1><h1 id=\"2020-展望\"><a href=\"#2020-展望\" class=\"headerlink\" title=\"2020 展望\"></a>2020 展望</h1>","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h1><p>首先依照国际惯例来个自我介绍，我叫 linfeng，参加工作两年。来掘金一年多了，刚开始的时候觉得这平台不错，文章质量过硬，而且人气很高；经常在搜索引擎搜素不到的知识点，在掘金能够找到对应的博客。<br>再来讲讲我的工作，作为一个前端，我的技术栈是 vue、css3 、canvas、gis、react-native 以及会点 react。</p>\n<h1 id=\"2019-年成长之路\"><a href=\"#2019-年成长之路\" class=\"headerlink\" title=\"2019 年成长之路\"></a>2019 年成长之路</h1><blockquote>\n<p>2019 年对于整个互联网行业来说是十分坎坷的一年，从年头开始整个行业就被各种的倒闭、欠薪以及裁员等负面消息所笼盖，被称之为互联网寒冬。</p>\n</blockquote>\n<p>作为一名小前端，为了不被寒冬冻僵，2019 年我在努力地为自己穿上防寒外套。做了下面几个方面进行了学习和研究：</p>\n<h1 id=\"React-Native\"><a href=\"#React-Native\" class=\"headerlink\" title=\"React-Native()\"></a>React-Native()</h1><p>从 2019 年 9 月份开始到现在,断断续续做了几个月。我们做的是一款环保类型的内部使用 APP,主要检测业务空气、水环境等等业务,说到这里不得不说下 RN 的优劣:</p>\n<h2 id=\"RN-的优势\"><a href=\"#RN-的优势\" class=\"headerlink\" title=\"RN 的优势\"></a>RN 的优势</h2><ul>\n<li><p>调试方便<br>ipa 安装好之后，就不需要频繁编译了，只需要 reload 一下，把 js 代码从云服务器下载下来就可以呈现改变代码后的效果。而且 RN 支持 hotReload，在调试界面的时候非常方便，修改代码之后保存，界面就自动跟着变化，这一点在调试的时候实在很爽，不过有时候有点慢，需要 reload。chrome 在线调试也挺不错，可以打断点，看日志。虽然没有 xcode 或者 Android Studio 那么浑然一体，但是作为脚本语言的调试工具，也是很厉害了。</p>\n</li>\n<li><p>css-layout 布局<br>这对于前端程序员来说，降低了不少学习成本，也大大减少了代码量。但是对于 iOS 或者安卓开发者来说，刚开始接触的时候，得接受一些思想上的转变。</p>\n</li>\n<li><p>跨平台<br>大多数代码，只需要写一套，安卓和 iOS 就都可以运行了，游戏逻辑和数据。界面上一部分有一些平台区分，毕竟是从 react 包装上来的。刚开始学 iOS 的时候，就想象着，要是有一种跨平台的开发形式就很 6 了，没想到过了几年就有了。跨平台理论上是可以减少开发成本的，减少开发人员数量，但是实际效果并不然，后面说。</p>\n</li>\n<li><p>热更新<br>这可能也是大多数公司选择使用 RN 的主要原因。频繁的 app 升级会让用户很烦，而且苹果的审核真是很麻烦。现在很多大型 app 都使用了 RN，毕竟繁多的业务迭代，每次都通过 APP 审核，也算是噩梦啊。</p>\n</li>\n</ul>\n<h2 id=\"RN-的不完善\"><a href=\"#RN-的不完善\" class=\"headerlink\" title=\"RN 的不完善\"></a>RN 的不完善</h2><p>容我吐槽一下，不完善的地方实在太多了，和原生开发体验来比，堪称天壤之别。RN 现在的最新版本是 0.46，我们工程中用的是 0.42，毕竟还没上 1.0 呢。<br>去掉主观情感，下面列举一下部分不完善的点：</p>\n<ul>\n<li><p>开发体验一般。<br>虽然 js 语法很灵活，但毕竟是脚本语言，调试起来还是不方便，不好查错。我们用的表现较好的 vscode 编辑器，就这都感觉各种跳转很不方便，动不动就得全局搜索，可能是 xcode 用习惯了吧。脚本语言的编写也会慢慢习惯吧。</p>\n</li>\n<li><p>文档很粗略<br>官网上的文档，就只是简单介绍用法和各个控件的属性，对细节的描述很少。当你遇到难解决的问题或者踩到坑了，上面基本找不到答案。</p>\n</li>\n<li><p>两个平台还没有完全统一<br>很多控件都是 iOS 专属，或者安卓专属。还有同一些控件，在不同平台上表现差异很大。</p>\n</li>\n<li><p>控件不完善<br>这个其实挺多的，最基本的 ListView，功能缺失，坑很多。Text 不支持富文本，动画，手势，ScrollView 等等等等。不能一一列举。作为聊天软件，富文本功能必须实现啊，用于 emoji 表情和文字的混合显示。被迫自己搞了一套实现方案，现在还有点小 bug。具体实现方案参考<a href=\"http://blog.csdn.net/gang544043963/article/details/70245850\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/gang544043963/article/details/70245850</a></p>\n</li>\n<li><p>升级 RN 版本需要大动干戈<br>近期我们做了一次 RN 版本升级，从原来的 0.42 升到最近的 0.50。真的挺麻烦。新版把 PropTyps 从 React 中移了出来，那么之前的引用方式就得变，所有的文件挨个查。之前使用的第三方库，有和 PropTyps 相关的，都得一一更新。之前很多界面布局的时候，在 image 上放置了一些其他控件，升级后会报错，然后一一调整。</p>\n</li>\n<li><p>要做出优质 app 需要花费大量人力和时间去打磨<br>跨平台，其实并没有减少开发成本，原来我们安卓和 iOS 各三个人，每次迭代都是有序进行。然而换了 RN 之后，6 个人全上，做的累的啊，迭代慢，bug 多。</p>\n</li>\n</ul>\n<h1 id=\"React-ps-平时工作不用-闲暇研究…\"><a href=\"#React-ps-平时工作不用-闲暇研究…\" class=\"headerlink\" title=\"React ( ps:平时工作不用,闲暇研究… )\"></a>React ( ps:平时工作不用,闲暇研究… )</h1><p>前端三大主流框架:React、Vue、Angular。</p>\n<h3 id=\"一、vue-js\"><a href=\"#一、vue-js\" class=\"headerlink\" title=\"一、vue.js\"></a>一、vue.js</h3><ul>\n<li><p>优点：更轻量，单页面，简单易学</p>\n</li>\n<li><p>缺点：不支持 IE8</p>\n</li>\n</ul>\n<h3 id=\"二、Angular\"><a href=\"#二、Angular\" class=\"headerlink\" title=\"二、Angular\"></a>二、Angular</h3><ul>\n<li><p>优点：模块化功能强大、自定义 directive 非常灵活、双向数据绑定，依赖注入</p>\n</li>\n<li><p>缺点：比较笨重，学习成本高，不兼容 IE6/7</p>\n</li>\n</ul>\n<h3 id=\"三、react\"><a href=\"#三、react\" class=\"headerlink\" title=\"三、react\"></a>三、react</h3><ul>\n<li><p>优点：速度快、跨浏览器兼容、单向数据流、兼容性好</p>\n</li>\n<li><p>缺点：并不是一个完整的框架，需要加上 ReactRouter 和 Flux 才能完成。</p>\n</li>\n</ul>\n<h1 id=\"陆续更新中…\"><a href=\"#陆续更新中…\" class=\"headerlink\" title=\"陆续更新中…\"></a>陆续更新中…</h1><h1 id=\"2020-展望\"><a href=\"#2020-展望\" class=\"headerlink\" title=\"2020 展望\"></a>2020 展望</h1>"},{"title":"提高工作效率的常用js函数汇总","date":"2018-01-22T04:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 前言\n本文总结了项目开发过程中常用的js函数和正则，意在提高大家平时的开发效率，具体内容如下：\n\n1. 常用的正则校验\n2. 常用的设备检测方式\n3. 常用的日期时间函数\n4. 跨端事件处理\n5. js移动端适配方案\n6. xss预防方式\n7. 常用的js算法(防抖，截流，去重，排序，模板渲染，观察者...)\n8. ......\n\n\n## 代码 \n  ### 1. 正则\n      // 匹配邮箱\n      let reg = /^([a-zA-Z]|[0-9])(\\w|\\-)+@[a-zA-Z0-9]+\\.([a-zA-Z]{2,4})$\n\n      // (新)匹配手机号\n      let reg = /^1[0-9]{10}$/;\n\n      // (旧)匹配手机号\n      let reg = /^1(3|4|5|7|8)[0-9]{9}$/;\n\n      // 匹配8-16位数字和字母密码的正则表达式\n      let reg = /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{8,16}$/;\n\n      // 匹配国内电话号码 0510-4305211\n      let reg = /\\d{3}-\\d{8}|\\d{4}-\\d{7}/;\n\n      // 匹配身份证号码\n      let reg=/(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\n\n      // 匹配腾讯QQ号\n      let reg = /[1-9][0-9]{4,}/;\n\n      // 匹配ip地址\n      let reg = /\\d+\\.\\d+\\.\\d+\\.\\d+/;\n\n      // 匹配中文\n      let reg = /^[\\u4e00-\\u9fa5]*$/;\n\n### 2.检测平台（设备）类型\n\n      let isWechat = /micromessenger/i.test(navigator.userAgent),\n      isWeibo = /weibo/i.test(navigator.userAgent),\n      isQQ = /qq\\//i.test(navigator.userAgent),\n      isIOS = /(iphone|ipod|ipad|ios)/i.test(navigator.userAgent),\n      isAndroid = /android/i.test(navigator.userAgent);\n\n### 3. 常用的日期时间函数\n      // 时间格式化\n      function format_date(timeStamp) {\n          let date = new Date(timeStamp);\n          return date.getFullYear() + \"年\"\n              + prefix_zero(date.getMonth() + 1) + \"月\"\n              + prefix_zero(date.getDate()) + \"日 \"\n              + prefix_zero(date.getHours()) + \":\"\n              + prefix_zero(date.getMinutes());\n      }\n      // moment.js方法\n\n      //require 方式\n      var moment=require('moment');\n      //import 方式\n      import moment from 'moment';\n\n      格式化时间类型\n      1.取当天时间，以YYYY年MM月DD日形式显示\n\n      var now=moment().format(\"YYYY年MM月DD日\");\n      2.任意时间戳格式化，以YYYY-MM-DD HH:mm:ss形式显示\n\n      var t1=moment(1411641720000).format('YYYY-MM-DD HH:mm:ss');\n      获取前一天日期，格式以YYYY-MM-DD形式显示\n      var t11=moment().day(0).format('YYYY-MM-DD');\n      获取本周五日期，格式以YYYY-MM-DD形式显示\n      var t12=moment().weekday(5).format('YYYY-MM-DD');\n      获取上周五日期，格式以YYYY-MM-DD形式显示\n      var t13=moment().weekday(-3).format('YYYY-MM-DD');\n      可以简单理解为上周倒数第几天，上周倒数第三天就是上周五了，和当天日期无关\n\n      获取当前年份、月份、日期\n      var t14=moment().year()\n      var t15=moment().month()//此处月份从0开始，当前月要+1\n      var t16=moment().date();\n\n      \n      // 数字格式化\n      function prefix_zero(num) {\n          return num >= 10 ? num : \"0\" + num;\n      }\n\n      // 倒计时时间格式化\n      function format_time(timeStamp) {\n          let day = Math.floor(timeStamp / (24 * 3600 * 1000));\n          let leave1 = timeStamp % (24 * 3600 * 1000);\n          let hours = Math.floor(leave1 / (3600 * 1000));\n          let leave2 = leave1 % (3600 * 1000);\n          let minutes = Math.floor(leave2 / (60 * 1000));\n          let leave3 = leave2 % (60 * 1000);\n          let seconds = Math.floor(leave3 / 1000);\n          if (day) return day + \"天\" + hours + \"小时\" + minutes + \"分\";\n          if (hours) return hours + \"小时\" + minutes + \"分\" + seconds + \"秒\";\n          if (minutes) return minutes + \"分\" + seconds + \"秒\";\n          if (seconds) return seconds + \"秒\";\n          return \"时间到！\";\n      }\n\n### 4.跨端事件处理\n\n      // 是否支持触摸事件\n      let isSupportTouch = (\"ontouchstart\" in document.documentElement) ? true : false;\n\n      //禁用Enter键表单自动提交\n      document.onkeydown = function(event) {\n          let target, code, tag;\n          if (!event) {\n              event = window.event; //针对ie浏览器\n              target = event.srcElement;\n              code = event.keyCode;\n              if (code == 13) {\n                  tag = target.tagName;\n                  if (tag == \"TEXTAREA\") { return true; }\n                  else { return false; }\n              }\n          }\n          else {\n              target = event.target; //针对遵循w3c标准的浏览器，如Firefox\n              code = event.keyCode;\n              if (code == 13) {\n                  tag = target.tagName;\n                  if (tag == \"INPUT\") { return false; }\n                  else { return true; }\n              }\n          }\n      };\n\n### 5. 移动端适配方案\n\n      (function (doc, win) {\n          var docEl = doc.documentElement,\n              resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',\n              recalc = function () {\n                  var clientWidth = docEl.clientWidth;\n                  var fontSize = 20;\n                  docEl.style.fontSize = fontSize + 'px';\n                  var docStyles = getComputedStyle(docEl);\n                  var realFontSize = parseFloat(docStyles.fontSize);\n                  var scale = realFontSize / fontSize;\n                  console.log(\"realFontSize: \" + realFontSize + \", scale: \" + scale);\n                  fontSize = clientWidth / 667 * 20;\n                  if(isIphoneX()) fontSize = 19;\n                  fontSize = fontSize / scale;\n                  docEl.style.fontSize = fontSize + 'px';\n              };\n          // Abort if browser does not support addEventListener\n          if (!doc.addEventListener) return;\n          win.addEventListener(resizeEvt, recalc, false);\n          doc.addEventListener('DOMContentLoaded', recalc, false);\n\n          // iphoneX判断\n          function isIphoneX(){\n              return /iphone/gi.test(navigator.userAgent) && (screen.height == 812 && screen.width == 375)\n          }\n\n      })(document, window);\n\n### 6.xss预防方式\n      // 敏感符号转义\n      function entities(s) {\n          let e = {\n              '\"': '&quot;',\n              '&': '&amp;',\n              '<': '&lt;',\n              '>': '&gt;'\n          }\n          return s.replace(/[\"<>&]/g, m => {\n              return e[m]\n          })\n      }\n\n### 7. JS方法 \n      // 数组去重方法 \n      1. 过滤+indexof\n      function distinct(arr = testArr) {\n          return arr.filter((v, i, array) => array.indexOf(v) === i)\n      }\n\n      2. 双重for循环\n      var array = [1, 1, '1', '1'];\n      function unique(array) {\n          // res用来存储结果\n          var res = [];\n          for (var i = 0, arrayLen = array.length; i < arrayLen; i++) {\n              for (var j = 0, resLen = res.length; j < resLen; j++ ) {\n                  if (array[i] === res[j]) {\n                      break;\n                  }\n              }\n              // 如果array[i]是唯一的，那么执行完循环，j等于resLen\n              if (j === resLen) {\n                  res.push(array[i])\n              }\n          }\n          return res;\n      }\n      console.log(unique(array)); // [1, \"1\"]\n\n      3.排序后相邻去除法 \n      var array = [1, 1, '1'];\n      function unique(array) {\n          var res = [];\n          var sortedArray = array.concat().sort();\n          var seen;\n          for (var i = 0, len = sortedArray.length; i < len; i++) {\n              // 如果是第一个元素或者相邻的元素不相同\n              if (!i || seen !== sortedArray[i]) {\n                  res.push(sortedArray[i])\n              }\n              seen = sortedArray[i];\n          }\n          return res;\n      }\n      console.log(unique(array));\n\n      4.Object 键值对\n      var array = [1, 2, 1, 1, '1'];\n      function unique(array) {\n          var obj = {};\n          return array.filter(function(item, index, array){\n              return obj.hasOwnProperty(item) ? false : (obj[item] = true)\n          })\n      }\n      console.log(unique(array)); // [1, 2]\n\n      //-----------------------------------------\n      var array = [{value: 1}, {value: 1}, {value: 2}];\n      function unique(array) {\n          var obj = {};\n          return array.filter(function(item, index, array){\n              console.log(typeof item + JSON.stringify(item))\n              return obj.hasOwnProperty(typeof item + JSON.stringify(item)) ? false : (obj[typeof item + JSON.stringify(item)] = true)\n          })\n      }\n      console.log(unique(array)); // [{value: 1}, {value: 2}]\n      \n      5.ES6\n      var array = [1, 2, 1, 1, '1'];\n      function unique(array) {\n        return Array.from(new Set(array));\n      }\n      console.log(unique(array)); // [1, 2, \"1\"]\n\n\n      // 置换函数\n      function swap(arr, indexA, indexB) {\n          [arr[indexA], arr[indexB]] = [arr[indexB], arr[indexA]];\n      }\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/提高工作效率的常用js函数汇总.md","raw":"---\ntitle: 提高工作效率的常用js函数汇总\ndate: 2018-01-22 12:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n- 随笔\ncategories:\n- 随笔\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# 前言\n本文总结了项目开发过程中常用的js函数和正则，意在提高大家平时的开发效率，具体内容如下：\n\n1. 常用的正则校验\n2. 常用的设备检测方式\n3. 常用的日期时间函数\n4. 跨端事件处理\n5. js移动端适配方案\n6. xss预防方式\n7. 常用的js算法(防抖，截流，去重，排序，模板渲染，观察者...)\n8. ......\n\n\n## 代码 \n  ### 1. 正则\n      // 匹配邮箱\n      let reg = /^([a-zA-Z]|[0-9])(\\w|\\-)+@[a-zA-Z0-9]+\\.([a-zA-Z]{2,4})$\n\n      // (新)匹配手机号\n      let reg = /^1[0-9]{10}$/;\n\n      // (旧)匹配手机号\n      let reg = /^1(3|4|5|7|8)[0-9]{9}$/;\n\n      // 匹配8-16位数字和字母密码的正则表达式\n      let reg = /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{8,16}$/;\n\n      // 匹配国内电话号码 0510-4305211\n      let reg = /\\d{3}-\\d{8}|\\d{4}-\\d{7}/;\n\n      // 匹配身份证号码\n      let reg=/(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\n\n      // 匹配腾讯QQ号\n      let reg = /[1-9][0-9]{4,}/;\n\n      // 匹配ip地址\n      let reg = /\\d+\\.\\d+\\.\\d+\\.\\d+/;\n\n      // 匹配中文\n      let reg = /^[\\u4e00-\\u9fa5]*$/;\n\n### 2.检测平台（设备）类型\n\n      let isWechat = /micromessenger/i.test(navigator.userAgent),\n      isWeibo = /weibo/i.test(navigator.userAgent),\n      isQQ = /qq\\//i.test(navigator.userAgent),\n      isIOS = /(iphone|ipod|ipad|ios)/i.test(navigator.userAgent),\n      isAndroid = /android/i.test(navigator.userAgent);\n\n### 3. 常用的日期时间函数\n      // 时间格式化\n      function format_date(timeStamp) {\n          let date = new Date(timeStamp);\n          return date.getFullYear() + \"年\"\n              + prefix_zero(date.getMonth() + 1) + \"月\"\n              + prefix_zero(date.getDate()) + \"日 \"\n              + prefix_zero(date.getHours()) + \":\"\n              + prefix_zero(date.getMinutes());\n      }\n      // moment.js方法\n\n      //require 方式\n      var moment=require('moment');\n      //import 方式\n      import moment from 'moment';\n\n      格式化时间类型\n      1.取当天时间，以YYYY年MM月DD日形式显示\n\n      var now=moment().format(\"YYYY年MM月DD日\");\n      2.任意时间戳格式化，以YYYY-MM-DD HH:mm:ss形式显示\n\n      var t1=moment(1411641720000).format('YYYY-MM-DD HH:mm:ss');\n      获取前一天日期，格式以YYYY-MM-DD形式显示\n      var t11=moment().day(0).format('YYYY-MM-DD');\n      获取本周五日期，格式以YYYY-MM-DD形式显示\n      var t12=moment().weekday(5).format('YYYY-MM-DD');\n      获取上周五日期，格式以YYYY-MM-DD形式显示\n      var t13=moment().weekday(-3).format('YYYY-MM-DD');\n      可以简单理解为上周倒数第几天，上周倒数第三天就是上周五了，和当天日期无关\n\n      获取当前年份、月份、日期\n      var t14=moment().year()\n      var t15=moment().month()//此处月份从0开始，当前月要+1\n      var t16=moment().date();\n\n      \n      // 数字格式化\n      function prefix_zero(num) {\n          return num >= 10 ? num : \"0\" + num;\n      }\n\n      // 倒计时时间格式化\n      function format_time(timeStamp) {\n          let day = Math.floor(timeStamp / (24 * 3600 * 1000));\n          let leave1 = timeStamp % (24 * 3600 * 1000);\n          let hours = Math.floor(leave1 / (3600 * 1000));\n          let leave2 = leave1 % (3600 * 1000);\n          let minutes = Math.floor(leave2 / (60 * 1000));\n          let leave3 = leave2 % (60 * 1000);\n          let seconds = Math.floor(leave3 / 1000);\n          if (day) return day + \"天\" + hours + \"小时\" + minutes + \"分\";\n          if (hours) return hours + \"小时\" + minutes + \"分\" + seconds + \"秒\";\n          if (minutes) return minutes + \"分\" + seconds + \"秒\";\n          if (seconds) return seconds + \"秒\";\n          return \"时间到！\";\n      }\n\n### 4.跨端事件处理\n\n      // 是否支持触摸事件\n      let isSupportTouch = (\"ontouchstart\" in document.documentElement) ? true : false;\n\n      //禁用Enter键表单自动提交\n      document.onkeydown = function(event) {\n          let target, code, tag;\n          if (!event) {\n              event = window.event; //针对ie浏览器\n              target = event.srcElement;\n              code = event.keyCode;\n              if (code == 13) {\n                  tag = target.tagName;\n                  if (tag == \"TEXTAREA\") { return true; }\n                  else { return false; }\n              }\n          }\n          else {\n              target = event.target; //针对遵循w3c标准的浏览器，如Firefox\n              code = event.keyCode;\n              if (code == 13) {\n                  tag = target.tagName;\n                  if (tag == \"INPUT\") { return false; }\n                  else { return true; }\n              }\n          }\n      };\n\n### 5. 移动端适配方案\n\n      (function (doc, win) {\n          var docEl = doc.documentElement,\n              resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',\n              recalc = function () {\n                  var clientWidth = docEl.clientWidth;\n                  var fontSize = 20;\n                  docEl.style.fontSize = fontSize + 'px';\n                  var docStyles = getComputedStyle(docEl);\n                  var realFontSize = parseFloat(docStyles.fontSize);\n                  var scale = realFontSize / fontSize;\n                  console.log(\"realFontSize: \" + realFontSize + \", scale: \" + scale);\n                  fontSize = clientWidth / 667 * 20;\n                  if(isIphoneX()) fontSize = 19;\n                  fontSize = fontSize / scale;\n                  docEl.style.fontSize = fontSize + 'px';\n              };\n          // Abort if browser does not support addEventListener\n          if (!doc.addEventListener) return;\n          win.addEventListener(resizeEvt, recalc, false);\n          doc.addEventListener('DOMContentLoaded', recalc, false);\n\n          // iphoneX判断\n          function isIphoneX(){\n              return /iphone/gi.test(navigator.userAgent) && (screen.height == 812 && screen.width == 375)\n          }\n\n      })(document, window);\n\n### 6.xss预防方式\n      // 敏感符号转义\n      function entities(s) {\n          let e = {\n              '\"': '&quot;',\n              '&': '&amp;',\n              '<': '&lt;',\n              '>': '&gt;'\n          }\n          return s.replace(/[\"<>&]/g, m => {\n              return e[m]\n          })\n      }\n\n### 7. JS方法 \n      // 数组去重方法 \n      1. 过滤+indexof\n      function distinct(arr = testArr) {\n          return arr.filter((v, i, array) => array.indexOf(v) === i)\n      }\n\n      2. 双重for循环\n      var array = [1, 1, '1', '1'];\n      function unique(array) {\n          // res用来存储结果\n          var res = [];\n          for (var i = 0, arrayLen = array.length; i < arrayLen; i++) {\n              for (var j = 0, resLen = res.length; j < resLen; j++ ) {\n                  if (array[i] === res[j]) {\n                      break;\n                  }\n              }\n              // 如果array[i]是唯一的，那么执行完循环，j等于resLen\n              if (j === resLen) {\n                  res.push(array[i])\n              }\n          }\n          return res;\n      }\n      console.log(unique(array)); // [1, \"1\"]\n\n      3.排序后相邻去除法 \n      var array = [1, 1, '1'];\n      function unique(array) {\n          var res = [];\n          var sortedArray = array.concat().sort();\n          var seen;\n          for (var i = 0, len = sortedArray.length; i < len; i++) {\n              // 如果是第一个元素或者相邻的元素不相同\n              if (!i || seen !== sortedArray[i]) {\n                  res.push(sortedArray[i])\n              }\n              seen = sortedArray[i];\n          }\n          return res;\n      }\n      console.log(unique(array));\n\n      4.Object 键值对\n      var array = [1, 2, 1, 1, '1'];\n      function unique(array) {\n          var obj = {};\n          return array.filter(function(item, index, array){\n              return obj.hasOwnProperty(item) ? false : (obj[item] = true)\n          })\n      }\n      console.log(unique(array)); // [1, 2]\n\n      //-----------------------------------------\n      var array = [{value: 1}, {value: 1}, {value: 2}];\n      function unique(array) {\n          var obj = {};\n          return array.filter(function(item, index, array){\n              console.log(typeof item + JSON.stringify(item))\n              return obj.hasOwnProperty(typeof item + JSON.stringify(item)) ? false : (obj[typeof item + JSON.stringify(item)] = true)\n          })\n      }\n      console.log(unique(array)); // [{value: 1}, {value: 2}]\n      \n      5.ES6\n      var array = [1, 2, 1, 1, '1'];\n      function unique(array) {\n        return Array.from(new Set(array));\n      }\n      console.log(unique(array)); // [1, 2, \"1\"]\n\n\n      // 置换函数\n      function swap(arr, indexA, indexB) {\n          [arr[indexA], arr[indexB]] = [arr[indexB], arr[indexA]];\n      }\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"提高工作效率的常用js函数汇总","published":1,"updated":"2020-05-28T07:51:13.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckari24zh00245sjo1kg73238","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本文总结了项目开发过程中常用的js函数和正则，意在提高大家平时的开发效率，具体内容如下：</p>\n<ol>\n<li>常用的正则校验</li>\n<li>常用的设备检测方式</li>\n<li>常用的日期时间函数</li>\n<li>跨端事件处理</li>\n<li>js移动端适配方案</li>\n<li>xss预防方式</li>\n<li>常用的js算法(防抖，截流，去重，排序，模板渲染，观察者…)</li>\n<li>……</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"1-正则\"><a href=\"#1-正则\" class=\"headerlink\" title=\"1. 正则\"></a>1. 正则</h3><pre><code>  // 匹配邮箱\n  let reg = /^([a-zA-Z]|[0-9])(\\w|\\-)+@[a-zA-Z0-9]+\\.([a-zA-Z]{2,4})$\n\n  // (新)匹配手机号\n  let reg = /^1[0-9]{10}$/;\n\n  // (旧)匹配手机号\n  let reg = /^1(3|4|5|7|8)[0-9]{9}$/;\n\n  // 匹配8-16位数字和字母密码的正则表达式\n  let reg = /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{8,16}$/;\n\n  // 匹配国内电话号码 0510-4305211\n  let reg = /\\d{3}-\\d{8}|\\d{4}-\\d{7}/;\n\n  // 匹配身份证号码\n  let reg=/(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\n\n  // 匹配腾讯QQ号\n  let reg = /[1-9][0-9]{4,}/;\n\n  // 匹配ip地址\n  let reg = /\\d+\\.\\d+\\.\\d+\\.\\d+/;\n\n  // 匹配中文\n  let reg = /^[\\u4e00-\\u9fa5]*$/;</code></pre><h3 id=\"2-检测平台（设备）类型\"><a href=\"#2-检测平台（设备）类型\" class=\"headerlink\" title=\"2.检测平台（设备）类型\"></a>2.检测平台（设备）类型</h3><pre><code>  let isWechat = /micromessenger/i.test(navigator.userAgent),\n  isWeibo = /weibo/i.test(navigator.userAgent),\n  isQQ = /qq\\//i.test(navigator.userAgent),\n  isIOS = /(iphone|ipod|ipad|ios)/i.test(navigator.userAgent),\n  isAndroid = /android/i.test(navigator.userAgent);</code></pre><h3 id=\"3-常用的日期时间函数\"><a href=\"#3-常用的日期时间函数\" class=\"headerlink\" title=\"3. 常用的日期时间函数\"></a>3. 常用的日期时间函数</h3><pre><code>  // 时间格式化\n  function format_date(timeStamp) {\n      let date = new Date(timeStamp);\n      return date.getFullYear() + &quot;年&quot;\n          + prefix_zero(date.getMonth() + 1) + &quot;月&quot;\n          + prefix_zero(date.getDate()) + &quot;日 &quot;\n          + prefix_zero(date.getHours()) + &quot;:&quot;\n          + prefix_zero(date.getMinutes());\n  }\n  // moment.js方法\n\n  //require 方式\n  var moment=require(&#39;moment&#39;);\n  //import 方式\n  import moment from &#39;moment&#39;;\n\n  格式化时间类型\n  1.取当天时间，以YYYY年MM月DD日形式显示\n\n  var now=moment().format(&quot;YYYY年MM月DD日&quot;);\n  2.任意时间戳格式化，以YYYY-MM-DD HH:mm:ss形式显示\n\n  var t1=moment(1411641720000).format(&#39;YYYY-MM-DD HH:mm:ss&#39;);\n  获取前一天日期，格式以YYYY-MM-DD形式显示\n  var t11=moment().day(0).format(&#39;YYYY-MM-DD&#39;);\n  获取本周五日期，格式以YYYY-MM-DD形式显示\n  var t12=moment().weekday(5).format(&#39;YYYY-MM-DD&#39;);\n  获取上周五日期，格式以YYYY-MM-DD形式显示\n  var t13=moment().weekday(-3).format(&#39;YYYY-MM-DD&#39;);\n  可以简单理解为上周倒数第几天，上周倒数第三天就是上周五了，和当天日期无关\n\n  获取当前年份、月份、日期\n  var t14=moment().year()\n  var t15=moment().month()//此处月份从0开始，当前月要+1\n  var t16=moment().date();\n\n\n  // 数字格式化\n  function prefix_zero(num) {\n      return num &gt;= 10 ? num : &quot;0&quot; + num;\n  }\n\n  // 倒计时时间格式化\n  function format_time(timeStamp) {\n      let day = Math.floor(timeStamp / (24 * 3600 * 1000));\n      let leave1 = timeStamp % (24 * 3600 * 1000);\n      let hours = Math.floor(leave1 / (3600 * 1000));\n      let leave2 = leave1 % (3600 * 1000);\n      let minutes = Math.floor(leave2 / (60 * 1000));\n      let leave3 = leave2 % (60 * 1000);\n      let seconds = Math.floor(leave3 / 1000);\n      if (day) return day + &quot;天&quot; + hours + &quot;小时&quot; + minutes + &quot;分&quot;;\n      if (hours) return hours + &quot;小时&quot; + minutes + &quot;分&quot; + seconds + &quot;秒&quot;;\n      if (minutes) return minutes + &quot;分&quot; + seconds + &quot;秒&quot;;\n      if (seconds) return seconds + &quot;秒&quot;;\n      return &quot;时间到！&quot;;\n  }</code></pre><h3 id=\"4-跨端事件处理\"><a href=\"#4-跨端事件处理\" class=\"headerlink\" title=\"4.跨端事件处理\"></a>4.跨端事件处理</h3><pre><code>  // 是否支持触摸事件\n  let isSupportTouch = (&quot;ontouchstart&quot; in document.documentElement) ? true : false;\n\n  //禁用Enter键表单自动提交\n  document.onkeydown = function(event) {\n      let target, code, tag;\n      if (!event) {\n          event = window.event; //针对ie浏览器\n          target = event.srcElement;\n          code = event.keyCode;\n          if (code == 13) {\n              tag = target.tagName;\n              if (tag == &quot;TEXTAREA&quot;) { return true; }\n              else { return false; }\n          }\n      }\n      else {\n          target = event.target; //针对遵循w3c标准的浏览器，如Firefox\n          code = event.keyCode;\n          if (code == 13) {\n              tag = target.tagName;\n              if (tag == &quot;INPUT&quot;) { return false; }\n              else { return true; }\n          }\n      }\n  };</code></pre><h3 id=\"5-移动端适配方案\"><a href=\"#5-移动端适配方案\" class=\"headerlink\" title=\"5. 移动端适配方案\"></a>5. 移动端适配方案</h3><pre><code>  (function (doc, win) {\n      var docEl = doc.documentElement,\n          resizeEvt = &#39;orientationchange&#39; in window ? &#39;orientationchange&#39; : &#39;resize&#39;,\n          recalc = function () {\n              var clientWidth = docEl.clientWidth;\n              var fontSize = 20;\n              docEl.style.fontSize = fontSize + &#39;px&#39;;\n              var docStyles = getComputedStyle(docEl);\n              var realFontSize = parseFloat(docStyles.fontSize);\n              var scale = realFontSize / fontSize;\n              console.log(&quot;realFontSize: &quot; + realFontSize + &quot;, scale: &quot; + scale);\n              fontSize = clientWidth / 667 * 20;\n              if(isIphoneX()) fontSize = 19;\n              fontSize = fontSize / scale;\n              docEl.style.fontSize = fontSize + &#39;px&#39;;\n          };\n      // Abort if browser does not support addEventListener\n      if (!doc.addEventListener) return;\n      win.addEventListener(resizeEvt, recalc, false);\n      doc.addEventListener(&#39;DOMContentLoaded&#39;, recalc, false);\n\n      // iphoneX判断\n      function isIphoneX(){\n          return /iphone/gi.test(navigator.userAgent) &amp;&amp; (screen.height == 812 &amp;&amp; screen.width == 375)\n      }\n\n  })(document, window);</code></pre><h3 id=\"6-xss预防方式\"><a href=\"#6-xss预防方式\" class=\"headerlink\" title=\"6.xss预防方式\"></a>6.xss预防方式</h3><pre><code>  // 敏感符号转义\n  function entities(s) {\n      let e = {\n          &#39;&quot;&#39;: &#39;&amp;quot;&#39;,\n          &#39;&amp;&#39;: &#39;&amp;amp;&#39;,\n          &#39;&lt;&#39;: &#39;&amp;lt;&#39;,\n          &#39;&gt;&#39;: &#39;&amp;gt;&#39;\n      }\n      return s.replace(/[&quot;&lt;&gt;&amp;]/g, m =&gt; {\n          return e[m]\n      })\n  }</code></pre><h3 id=\"7-JS方法\"><a href=\"#7-JS方法\" class=\"headerlink\" title=\"7. JS方法\"></a>7. JS方法</h3><pre><code>  // 数组去重方法 \n  1. 过滤+indexof\n  function distinct(arr = testArr) {\n      return arr.filter((v, i, array) =&gt; array.indexOf(v) === i)\n  }\n\n  2. 双重for循环\n  var array = [1, 1, &#39;1&#39;, &#39;1&#39;];\n  function unique(array) {\n      // res用来存储结果\n      var res = [];\n      for (var i = 0, arrayLen = array.length; i &lt; arrayLen; i++) {\n          for (var j = 0, resLen = res.length; j &lt; resLen; j++ ) {\n              if (array[i] === res[j]) {\n                  break;\n              }\n          }\n          // 如果array[i]是唯一的，那么执行完循环，j等于resLen\n          if (j === resLen) {\n              res.push(array[i])\n          }\n      }\n      return res;\n  }\n  console.log(unique(array)); // [1, &quot;1&quot;]\n\n  3.排序后相邻去除法 \n  var array = [1, 1, &#39;1&#39;];\n  function unique(array) {\n      var res = [];\n      var sortedArray = array.concat().sort();\n      var seen;\n      for (var i = 0, len = sortedArray.length; i &lt; len; i++) {\n          // 如果是第一个元素或者相邻的元素不相同\n          if (!i || seen !== sortedArray[i]) {\n              res.push(sortedArray[i])\n          }\n          seen = sortedArray[i];\n      }\n      return res;\n  }\n  console.log(unique(array));\n\n  4.Object 键值对\n  var array = [1, 2, 1, 1, &#39;1&#39;];\n  function unique(array) {\n      var obj = {};\n      return array.filter(function(item, index, array){\n          return obj.hasOwnProperty(item) ? false : (obj[item] = true)\n      })\n  }\n  console.log(unique(array)); // [1, 2]\n\n  //-----------------------------------------\n  var array = [{value: 1}, {value: 1}, {value: 2}];\n  function unique(array) {\n      var obj = {};\n      return array.filter(function(item, index, array){\n          console.log(typeof item + JSON.stringify(item))\n          return obj.hasOwnProperty(typeof item + JSON.stringify(item)) ? false : (obj[typeof item + JSON.stringify(item)] = true)\n      })\n  }\n  console.log(unique(array)); // [{value: 1}, {value: 2}]\n\n  5.ES6\n  var array = [1, 2, 1, 1, &#39;1&#39;];\n  function unique(array) {\n    return Array.from(new Set(array));\n  }\n  console.log(unique(array)); // [1, 2, &quot;1&quot;]\n\n\n  // 置换函数\n  function swap(arr, indexA, indexB) {\n      [arr[indexA], arr[indexB]] = [arr[indexB], arr[indexA]];\n  }</code></pre>","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本文总结了项目开发过程中常用的js函数和正则，意在提高大家平时的开发效率，具体内容如下：</p>\n<ol>\n<li>常用的正则校验</li>\n<li>常用的设备检测方式</li>\n<li>常用的日期时间函数</li>\n<li>跨端事件处理</li>\n<li>js移动端适配方案</li>\n<li>xss预防方式</li>\n<li>常用的js算法(防抖，截流，去重，排序，模板渲染，观察者…)</li>\n<li>……</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"1-正则\"><a href=\"#1-正则\" class=\"headerlink\" title=\"1. 正则\"></a>1. 正则</h3><pre><code>  // 匹配邮箱\n  let reg = /^([a-zA-Z]|[0-9])(\\w|\\-)+@[a-zA-Z0-9]+\\.([a-zA-Z]{2,4})$\n\n  // (新)匹配手机号\n  let reg = /^1[0-9]{10}$/;\n\n  // (旧)匹配手机号\n  let reg = /^1(3|4|5|7|8)[0-9]{9}$/;\n\n  // 匹配8-16位数字和字母密码的正则表达式\n  let reg = /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{8,16}$/;\n\n  // 匹配国内电话号码 0510-4305211\n  let reg = /\\d{3}-\\d{8}|\\d{4}-\\d{7}/;\n\n  // 匹配身份证号码\n  let reg=/(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\n\n  // 匹配腾讯QQ号\n  let reg = /[1-9][0-9]{4,}/;\n\n  // 匹配ip地址\n  let reg = /\\d+\\.\\d+\\.\\d+\\.\\d+/;\n\n  // 匹配中文\n  let reg = /^[\\u4e00-\\u9fa5]*$/;</code></pre><h3 id=\"2-检测平台（设备）类型\"><a href=\"#2-检测平台（设备）类型\" class=\"headerlink\" title=\"2.检测平台（设备）类型\"></a>2.检测平台（设备）类型</h3><pre><code>  let isWechat = /micromessenger/i.test(navigator.userAgent),\n  isWeibo = /weibo/i.test(navigator.userAgent),\n  isQQ = /qq\\//i.test(navigator.userAgent),\n  isIOS = /(iphone|ipod|ipad|ios)/i.test(navigator.userAgent),\n  isAndroid = /android/i.test(navigator.userAgent);</code></pre><h3 id=\"3-常用的日期时间函数\"><a href=\"#3-常用的日期时间函数\" class=\"headerlink\" title=\"3. 常用的日期时间函数\"></a>3. 常用的日期时间函数</h3><pre><code>  // 时间格式化\n  function format_date(timeStamp) {\n      let date = new Date(timeStamp);\n      return date.getFullYear() + &quot;年&quot;\n          + prefix_zero(date.getMonth() + 1) + &quot;月&quot;\n          + prefix_zero(date.getDate()) + &quot;日 &quot;\n          + prefix_zero(date.getHours()) + &quot;:&quot;\n          + prefix_zero(date.getMinutes());\n  }\n  // moment.js方法\n\n  //require 方式\n  var moment=require(&#39;moment&#39;);\n  //import 方式\n  import moment from &#39;moment&#39;;\n\n  格式化时间类型\n  1.取当天时间，以YYYY年MM月DD日形式显示\n\n  var now=moment().format(&quot;YYYY年MM月DD日&quot;);\n  2.任意时间戳格式化，以YYYY-MM-DD HH:mm:ss形式显示\n\n  var t1=moment(1411641720000).format(&#39;YYYY-MM-DD HH:mm:ss&#39;);\n  获取前一天日期，格式以YYYY-MM-DD形式显示\n  var t11=moment().day(0).format(&#39;YYYY-MM-DD&#39;);\n  获取本周五日期，格式以YYYY-MM-DD形式显示\n  var t12=moment().weekday(5).format(&#39;YYYY-MM-DD&#39;);\n  获取上周五日期，格式以YYYY-MM-DD形式显示\n  var t13=moment().weekday(-3).format(&#39;YYYY-MM-DD&#39;);\n  可以简单理解为上周倒数第几天，上周倒数第三天就是上周五了，和当天日期无关\n\n  获取当前年份、月份、日期\n  var t14=moment().year()\n  var t15=moment().month()//此处月份从0开始，当前月要+1\n  var t16=moment().date();\n\n\n  // 数字格式化\n  function prefix_zero(num) {\n      return num &gt;= 10 ? num : &quot;0&quot; + num;\n  }\n\n  // 倒计时时间格式化\n  function format_time(timeStamp) {\n      let day = Math.floor(timeStamp / (24 * 3600 * 1000));\n      let leave1 = timeStamp % (24 * 3600 * 1000);\n      let hours = Math.floor(leave1 / (3600 * 1000));\n      let leave2 = leave1 % (3600 * 1000);\n      let minutes = Math.floor(leave2 / (60 * 1000));\n      let leave3 = leave2 % (60 * 1000);\n      let seconds = Math.floor(leave3 / 1000);\n      if (day) return day + &quot;天&quot; + hours + &quot;小时&quot; + minutes + &quot;分&quot;;\n      if (hours) return hours + &quot;小时&quot; + minutes + &quot;分&quot; + seconds + &quot;秒&quot;;\n      if (minutes) return minutes + &quot;分&quot; + seconds + &quot;秒&quot;;\n      if (seconds) return seconds + &quot;秒&quot;;\n      return &quot;时间到！&quot;;\n  }</code></pre><h3 id=\"4-跨端事件处理\"><a href=\"#4-跨端事件处理\" class=\"headerlink\" title=\"4.跨端事件处理\"></a>4.跨端事件处理</h3><pre><code>  // 是否支持触摸事件\n  let isSupportTouch = (&quot;ontouchstart&quot; in document.documentElement) ? true : false;\n\n  //禁用Enter键表单自动提交\n  document.onkeydown = function(event) {\n      let target, code, tag;\n      if (!event) {\n          event = window.event; //针对ie浏览器\n          target = event.srcElement;\n          code = event.keyCode;\n          if (code == 13) {\n              tag = target.tagName;\n              if (tag == &quot;TEXTAREA&quot;) { return true; }\n              else { return false; }\n          }\n      }\n      else {\n          target = event.target; //针对遵循w3c标准的浏览器，如Firefox\n          code = event.keyCode;\n          if (code == 13) {\n              tag = target.tagName;\n              if (tag == &quot;INPUT&quot;) { return false; }\n              else { return true; }\n          }\n      }\n  };</code></pre><h3 id=\"5-移动端适配方案\"><a href=\"#5-移动端适配方案\" class=\"headerlink\" title=\"5. 移动端适配方案\"></a>5. 移动端适配方案</h3><pre><code>  (function (doc, win) {\n      var docEl = doc.documentElement,\n          resizeEvt = &#39;orientationchange&#39; in window ? &#39;orientationchange&#39; : &#39;resize&#39;,\n          recalc = function () {\n              var clientWidth = docEl.clientWidth;\n              var fontSize = 20;\n              docEl.style.fontSize = fontSize + &#39;px&#39;;\n              var docStyles = getComputedStyle(docEl);\n              var realFontSize = parseFloat(docStyles.fontSize);\n              var scale = realFontSize / fontSize;\n              console.log(&quot;realFontSize: &quot; + realFontSize + &quot;, scale: &quot; + scale);\n              fontSize = clientWidth / 667 * 20;\n              if(isIphoneX()) fontSize = 19;\n              fontSize = fontSize / scale;\n              docEl.style.fontSize = fontSize + &#39;px&#39;;\n          };\n      // Abort if browser does not support addEventListener\n      if (!doc.addEventListener) return;\n      win.addEventListener(resizeEvt, recalc, false);\n      doc.addEventListener(&#39;DOMContentLoaded&#39;, recalc, false);\n\n      // iphoneX判断\n      function isIphoneX(){\n          return /iphone/gi.test(navigator.userAgent) &amp;&amp; (screen.height == 812 &amp;&amp; screen.width == 375)\n      }\n\n  })(document, window);</code></pre><h3 id=\"6-xss预防方式\"><a href=\"#6-xss预防方式\" class=\"headerlink\" title=\"6.xss预防方式\"></a>6.xss预防方式</h3><pre><code>  // 敏感符号转义\n  function entities(s) {\n      let e = {\n          &#39;&quot;&#39;: &#39;&amp;quot;&#39;,\n          &#39;&amp;&#39;: &#39;&amp;amp;&#39;,\n          &#39;&lt;&#39;: &#39;&amp;lt;&#39;,\n          &#39;&gt;&#39;: &#39;&amp;gt;&#39;\n      }\n      return s.replace(/[&quot;&lt;&gt;&amp;]/g, m =&gt; {\n          return e[m]\n      })\n  }</code></pre><h3 id=\"7-JS方法\"><a href=\"#7-JS方法\" class=\"headerlink\" title=\"7. JS方法\"></a>7. JS方法</h3><pre><code>  // 数组去重方法 \n  1. 过滤+indexof\n  function distinct(arr = testArr) {\n      return arr.filter((v, i, array) =&gt; array.indexOf(v) === i)\n  }\n\n  2. 双重for循环\n  var array = [1, 1, &#39;1&#39;, &#39;1&#39;];\n  function unique(array) {\n      // res用来存储结果\n      var res = [];\n      for (var i = 0, arrayLen = array.length; i &lt; arrayLen; i++) {\n          for (var j = 0, resLen = res.length; j &lt; resLen; j++ ) {\n              if (array[i] === res[j]) {\n                  break;\n              }\n          }\n          // 如果array[i]是唯一的，那么执行完循环，j等于resLen\n          if (j === resLen) {\n              res.push(array[i])\n          }\n      }\n      return res;\n  }\n  console.log(unique(array)); // [1, &quot;1&quot;]\n\n  3.排序后相邻去除法 \n  var array = [1, 1, &#39;1&#39;];\n  function unique(array) {\n      var res = [];\n      var sortedArray = array.concat().sort();\n      var seen;\n      for (var i = 0, len = sortedArray.length; i &lt; len; i++) {\n          // 如果是第一个元素或者相邻的元素不相同\n          if (!i || seen !== sortedArray[i]) {\n              res.push(sortedArray[i])\n          }\n          seen = sortedArray[i];\n      }\n      return res;\n  }\n  console.log(unique(array));\n\n  4.Object 键值对\n  var array = [1, 2, 1, 1, &#39;1&#39;];\n  function unique(array) {\n      var obj = {};\n      return array.filter(function(item, index, array){\n          return obj.hasOwnProperty(item) ? false : (obj[item] = true)\n      })\n  }\n  console.log(unique(array)); // [1, 2]\n\n  //-----------------------------------------\n  var array = [{value: 1}, {value: 1}, {value: 2}];\n  function unique(array) {\n      var obj = {};\n      return array.filter(function(item, index, array){\n          console.log(typeof item + JSON.stringify(item))\n          return obj.hasOwnProperty(typeof item + JSON.stringify(item)) ? false : (obj[typeof item + JSON.stringify(item)] = true)\n      })\n  }\n  console.log(unique(array)); // [{value: 1}, {value: 2}]\n\n  5.ES6\n  var array = [1, 2, 1, 1, &#39;1&#39;];\n  function unique(array) {\n    return Array.from(new Set(array));\n  }\n  console.log(unique(array)); // [1, 2, &quot;1&quot;]\n\n\n  // 置换函数\n  function swap(arr, indexA, indexB) {\n      [arr[indexA], arr[indexB]] = [arr[indexB], arr[indexA]];\n  }</code></pre>"},{"title":"面试","date":"2020-05-30T07:32:09.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"闲来无事，随便写写。","_content":"\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# VUE项目常用方法总结\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/面试之旅.md","raw":"---\ntitle: 面试\ndate: 2020-5-30 15:32:09\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: 闲来无事，随便写写。\ntags:\n- 面试\ncategories:\n- 面试\n---\n\n<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n闲来无事，随便写写......\n\n# VUE项目常用方法总结\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"面试之旅","published":1,"updated":"2020-05-29T01:18:55.535Z","_id":"ckari24zk00275sjojwmpkji6","comments":1,"layout":"post","photos":[],"link":"","content":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"VUE项目常用方法总结\"><a href=\"#VUE项目常用方法总结\" class=\"headerlink\" title=\"VUE项目常用方法总结\"></a>VUE项目常用方法总结</h1><hr>\n","site":{"data":{"musics":[{"name":"参商","artist":"不才","url":"http://music.163.com/song/media/outer/url?id=28288202.mp3","cover":"/medias/music/avatars/bc.jpg"},{"name":"雅俗共赏","artist":"许嵩","url":"http://music.163.com/song/media/outer/url?id=411214279.mp3","cover":"/medias/music/avatars/xs.jpg"},{"name":"飞云之下","artist":"林俊杰","url":"http://music.163.com/song/media/outer/url?id=554242032.mp3","cover":"/medias/music/avatars/ljj.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66\"></iframe>\n</div>\n\n<p>闲来无事，随便写写……</p>\n<h1 id=\"VUE项目常用方法总结\"><a href=\"#VUE项目常用方法总结\" class=\"headerlink\" title=\"VUE项目常用方法总结\"></a>VUE项目常用方法总结</h1><hr>\n"}],"PostAsset":[{"_id":"source/_posts/Echars中常用方法/1.jpg","slug":"1.jpg","post":"ckari24wv00085sjo9zd2cxt2","modified":0,"renderable":0},{"_id":"source/_posts/Self checking/01.jpg","slug":"01.jpg","post":"ckari24xr000o5sjomkks5288","modified":0,"renderable":0},{"_id":"source/_posts/Echars中常用方法/2.jpg","slug":"2.jpg","post":"ckari24wv00085sjo9zd2cxt2","modified":0,"renderable":0},{"_id":"source/_posts/React-Native入坑之路/1.jpg","slug":"1.jpg","post":"ckari24xj000i5sjor52wm7wa","modified":0,"renderable":0},{"_id":"source/_posts/React-Native入坑之路/2.jpg","slug":"2.jpg","post":"ckari24xj000i5sjor52wm7wa","modified":0,"renderable":0},{"_id":"source/_posts/Self checking/4.jpg","slug":"4.jpg","post":"ckari24xr000o5sjomkks5288","modified":0,"renderable":0},{"_id":"source/_posts/javascript 数组去重/01.jpg","slug":"01.jpg","post":"ckari24yl00185sjoifce2u0u","modified":0,"renderable":0},{"_id":"source/_posts/javascript 数组去重/4.jpg","slug":"4.jpg","post":"ckari24yl00185sjoifce2u0u","modified":0,"renderable":0},{"_id":"source/_posts/js常用数组操作方法/01.jpg","slug":"01.jpg","post":"ckari24ys001g5sjoomasvs6q","modified":0,"renderable":0},{"_id":"source/_posts/js常用数组操作方法/4.jpg","slug":"4.jpg","post":"ckari24ys001g5sjoomasvs6q","modified":0,"renderable":0},{"_id":"source/_posts/从0搭建自己的webpack开发环境/01.jpg","slug":"01.jpg","post":"ckari24z5001r5sjonxi2fq8w","modified":0,"renderable":0},{"_id":"source/_posts/从0搭建自己的webpack开发环境/2.jpg","slug":"2.jpg","post":"ckari24z5001r5sjonxi2fq8w","modified":0,"renderable":0},{"_id":"source/_posts/TS学习总结/1.jpg","slug":"1.jpg","post":"ckari24yb00105sjox8b4f4kw","modified":0,"renderable":0},{"_id":"source/_posts/TS学习总结/2.jpg","slug":"2.jpg","post":"ckari24yb00105sjox8b4f4kw","modified":0,"renderable":0},{"_id":"source/_posts/TS学习总结/3.jpg","slug":"3.jpg","post":"ckari24yb00105sjox8b4f4kw","modified":0,"renderable":0},{"_id":"source/_posts/Echars在Vue中如何使用/1679c3f7aa381aa7","slug":"1679c3f7aa381aa7","post":"ckari24wo00045sjoulcn57t8","modified":0,"renderable":0},{"_id":"source/_posts/Echars在Vue中如何使用/4.jpg","slug":"4.jpg","post":"ckari24wo00045sjoulcn57t8","modified":0,"renderable":0},{"_id":"source/_posts/Echars在Vue中如何使用/5.jpg","slug":"5.jpg","post":"ckari24wo00045sjoulcn57t8","modified":0,"renderable":0},{"_id":"source/_posts/从零搭建前端组件库/1.png","slug":"1.png","post":"ckari24za001w5sjo0dqmcyb5","modified":0,"renderable":0},{"_id":"source/_posts/从零搭建前端组件库/2.png","slug":"2.png","post":"ckari24za001w5sjo0dqmcyb5","modified":0,"renderable":0},{"_id":"source/_posts/从零搭建前端组件库/7.png","slug":"7.png","post":"ckari24za001w5sjo0dqmcyb5","modified":0,"renderable":0},{"_id":"source/_posts/从零搭建前端组件库/7.webp","slug":"7.webp","post":"ckari24za001w5sjo0dqmcyb5","modified":0,"renderable":0},{"_id":"source/_posts/React总结/1.jpg","slug":"1.jpg","post":"ckari24xo000m5sjozcgcftam","modified":0,"renderable":0},{"_id":"source/_posts/React总结/2.jpg","slug":"2.jpg","post":"ckari24xo000m5sjozcgcftam","modified":0,"renderable":0},{"_id":"source/_posts/React总结/3.jpg","slug":"3.jpg","post":"ckari24xo000m5sjozcgcftam","modified":0,"renderable":0},{"_id":"source/_posts/React总结/4.jpg","slug":"4.jpg","post":"ckari24xo000m5sjozcgcftam","modified":0,"renderable":0},{"_id":"source/_posts/React总结/5.jpg","slug":"5.jpg","post":"ckari24xo000m5sjozcgcftam","modified":0,"renderable":0},{"_id":"source/_posts/TS+VUE项目搭建/1.jpg","slug":"1.jpg","post":"ckari24xv000s5sjoc715rfug","modified":0,"renderable":0},{"_id":"source/_posts/TS+VUE项目搭建/2.jpg","slug":"2.jpg","post":"ckari24xv000s5sjoc715rfug","modified":0,"renderable":0},{"_id":"source/_posts/TS+VUE项目搭建/3.jpg","slug":"3.jpg","post":"ckari24xv000s5sjoc715rfug","modified":0,"renderable":0},{"_id":"source/_posts/TS+VUE项目搭建/4.jpg","slug":"4.jpg","post":"ckari24xv000s5sjoc715rfug","modified":0,"renderable":0},{"_id":"source/_posts/TS+VUE项目搭建/5.jpg","slug":"5.jpg","post":"ckari24xv000s5sjoc715rfug","modified":0,"renderable":0},{"_id":"source/_posts/node.js搭建本地服务模拟数据/10.jpg","slug":"10.jpg","post":"ckari24yw001l5sjorte78n4s","modified":0,"renderable":0},{"_id":"source/_posts/node.js搭建本地服务模拟数据/12.jpg","slug":"12.jpg","post":"ckari24yw001l5sjorte78n4s","modified":0,"renderable":0},{"_id":"source/_posts/node.js搭建本地服务模拟数据/3.jpg","slug":"3.jpg","post":"ckari24yw001l5sjorte78n4s","modified":0,"renderable":0},{"_id":"source/_posts/node.js搭建本地服务模拟数据/5.jpg","slug":"5.jpg","post":"ckari24yw001l5sjorte78n4s","modified":0,"renderable":0},{"_id":"source/_posts/node.js搭建本地服务模拟数据/6.jpg","slug":"6.jpg","post":"ckari24yw001l5sjorte78n4s","modified":0,"renderable":0},{"_id":"source/_posts/node.js搭建本地服务模拟数据/66.jpg","slug":"66.jpg","post":"ckari24yw001l5sjorte78n4s","modified":0,"renderable":0},{"_id":"source/_posts/node.js搭建本地服务模拟数据/8.jpg","slug":"8.jpg","post":"ckari24yw001l5sjorte78n4s","modified":0,"renderable":0},{"_id":"source/_posts/node搭建/javascript 数组去重/01.jpg","slug":"javascript 数组去重\\01.jpg","post":"ckari24z1001o5sjocjqponvk","modified":0,"renderable":0},{"_id":"source/_posts/node搭建/01.jpg","slug":"01.jpg","post":"ckari24z1001o5sjocjqponvk","modified":0,"renderable":0},{"_id":"source/_posts/node搭建/4.jpg","slug":"4.jpg","post":"ckari24z1001o5sjocjqponvk","modified":0,"renderable":0},{"_id":"source/_posts/node搭建/javascript 数组去重/4.jpg","slug":"javascript 数组去重\\4.jpg","post":"ckari24z1001o5sjocjqponvk","modified":0,"renderable":0},{"_id":"source/_posts/node搭建/node.jpg","slug":"node.jpg","post":"ckari24z1001o5sjocjqponvk","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckari24wg00025sjo2xqhzli5","category_id":"ckari24wr00055sjod6iueq07","_id":"ckari24xk000j5sjoglrh7itr"},{"post_id":"ckari24wo00045sjoulcn57t8","category_id":"ckari24xb000d5sjorlsxz8zz","_id":"ckari24xs000p5sjovd4r6y95"},{"post_id":"ckari24wv00085sjo9zd2cxt2","category_id":"ckari24xl000k5sjowdbi3ws1","_id":"ckari24y0000w5sjoja5acjpe"},{"post_id":"ckari24x5000a5sjoe9grxa4t","category_id":"ckari24xl000k5sjowdbi3ws1","_id":"ckari24yf00135sjo2v46x44k"},{"post_id":"ckari24xy000u5sjo1qn58wu1","category_id":"ckari24wr00055sjod6iueq07","_id":"ckari24yk00175sjo703786vx"},{"post_id":"ckari24y2000y5sjohjyelizz","category_id":"ckari24wr00055sjod6iueq07","_id":"ckari24yo001b5sjof6v7n3ko"},{"post_id":"ckari24x9000c5sjo0if8leux","category_id":"ckari24xl000k5sjowdbi3ws1","_id":"ckari24yr001f5sjokbp264oc"},{"post_id":"ckari24yh00155sjo3t121pxg","category_id":"ckari24xl000k5sjowdbi3ws1","_id":"ckari24yv001i5sjovjilpxvm"},{"post_id":"ckari24xf000h5sjohwy776tq","category_id":"ckari24xl000k5sjowdbi3ws1","_id":"ckari24yy001n5sjokp77ozd4"},{"post_id":"ckari24yl00185sjoifce2u0u","category_id":"ckari24wr00055sjod6iueq07","_id":"ckari24z4001q5sjorpd9hvuz"},{"post_id":"ckari24yp001d5sjoebxutwzr","category_id":"ckari24wr00055sjod6iueq07","_id":"ckari24z9001v5sjo9dtrblho"},{"post_id":"ckari24xj000i5sjor52wm7wa","category_id":"ckari24yo001a5sjo4ie1su86","_id":"ckari24zc001y5sjobtekw20s"},{"post_id":"ckari24ys001g5sjoomasvs6q","category_id":"ckari24wr00055sjod6iueq07","_id":"ckari24zg00235sjoeampubcc"},{"post_id":"ckari24yw001l5sjorte78n4s","category_id":"ckari24xl000k5sjowdbi3ws1","_id":"ckari24zj00265sjosbduqkri"},{"post_id":"ckari24z1001o5sjocjqponvk","category_id":"ckari24xl000k5sjowdbi3ws1","_id":"ckari24zn002a5sjo51e1oan0"},{"post_id":"ckari24xo000m5sjozcgcftam","category_id":"ckari24yv001j5sjouky6adr6","_id":"ckari24zr002d5sjop881mx5b"},{"post_id":"ckari24z5001r5sjonxi2fq8w","category_id":"ckari24xl000k5sjowdbi3ws1","_id":"ckari24zt002g5sjobj1ofioh"},{"post_id":"ckari24xr000o5sjomkks5288","category_id":"ckari24z7001s5sjohks13b7k","_id":"ckari24zv002j5sjotpiuen8h"},{"post_id":"ckari24zh00245sjo1kg73238","category_id":"ckari24z7001s5sjohks13b7k","_id":"ckari24zw002l5sjohv7cyhkk"},{"post_id":"ckari24xv000s5sjoc715rfug","category_id":"ckari24ze00205sjof4i411cr","_id":"ckari24zy002p5sjoisxo0iti"},{"post_id":"ckari24yb00105sjox8b4f4kw","category_id":"ckari24ze00205sjof4i411cr","_id":"ckari24zz002r5sjo1eag2uz3"},{"post_id":"ckari24za001w5sjo0dqmcyb5","category_id":"ckari24zt002f5sjo2hhhiv9u","_id":"ckari2501002u5sjolmnpvgl3"},{"post_id":"ckari24zd001z5sjor4jmd1wh","category_id":"ckari24zw002m5sjokqoy5to5","_id":"ckari2502002w5sjofz0xnuq4"},{"post_id":"ckari24zk00275sjojwmpkji6","category_id":"ckari2500002s5sjol618s2ix","_id":"ckari2504002y5sjo5ssd8rsi"}],"PostTag":[{"post_id":"ckari24wg00025sjo2xqhzli5","tag_id":"ckari24wt00065sjo1rmckoz0","_id":"ckari24xe000f5sjo4wcsg64k"},{"post_id":"ckari24wo00045sjoulcn57t8","tag_id":"ckari24xb000e5sjo11fcqtx2","_id":"ckari24xp000n5sjobjiqele7"},{"post_id":"ckari24wv00085sjo9zd2cxt2","tag_id":"ckari24xm000l5sjoz6rto8ml","_id":"ckari24xx000t5sjopm1qcdbo"},{"post_id":"ckari24x5000a5sjoe9grxa4t","tag_id":"ckari24xm000l5sjoz6rto8ml","_id":"ckari24ya000z5sjoj3hrk4el"},{"post_id":"ckari24xy000u5sjo1qn58wu1","tag_id":"ckari24wt00065sjo1rmckoz0","_id":"ckari24yd00115sjobb1hyrw2"},{"post_id":"ckari24y2000y5sjohjyelizz","tag_id":"ckari24wt00065sjo1rmckoz0","_id":"ckari24yj00165sjo7igshbpi"},{"post_id":"ckari24x9000c5sjo0if8leux","tag_id":"ckari24xm000l5sjoz6rto8ml","_id":"ckari24yn00195sjos8ngxecg"},{"post_id":"ckari24yh00155sjo3t121pxg","tag_id":"ckari24xm000l5sjoz6rto8ml","_id":"ckari24yr001e5sjo4w7duu23"},{"post_id":"ckari24xf000h5sjohwy776tq","tag_id":"ckari24xm000l5sjoz6rto8ml","_id":"ckari24yu001h5sjogh5oic2f"},{"post_id":"ckari24yl00185sjoifce2u0u","tag_id":"ckari24wt00065sjo1rmckoz0","_id":"ckari24yy001m5sjo1h0nylxq"},{"post_id":"ckari24yp001d5sjoebxutwzr","tag_id":"ckari24wt00065sjo1rmckoz0","_id":"ckari24z3001p5sjol3q03kv6"},{"post_id":"ckari24xj000i5sjor52wm7wa","tag_id":"ckari24yo001c5sjoz5hi1h8q","_id":"ckari24z8001u5sjojfwu147g"},{"post_id":"ckari24ys001g5sjoomasvs6q","tag_id":"ckari24wt00065sjo1rmckoz0","_id":"ckari24zb001x5sjown8g3y4l"},{"post_id":"ckari24yw001l5sjorte78n4s","tag_id":"ckari24xm000l5sjoz6rto8ml","_id":"ckari24zf00225sjo570y69lg"},{"post_id":"ckari24z1001o5sjocjqponvk","tag_id":"ckari24xm000l5sjoz6rto8ml","_id":"ckari24zi00255sjozq8s6y9m"},{"post_id":"ckari24xo000m5sjozcgcftam","tag_id":"ckari24yw001k5sjonle0gy3e","_id":"ckari24zm00285sjo5x6lh89v"},{"post_id":"ckari24z5001r5sjonxi2fq8w","tag_id":"ckari24xm000l5sjoz6rto8ml","_id":"ckari24zq002c5sjoz7o7xp8q"},{"post_id":"ckari24xr000o5sjomkks5288","tag_id":"ckari24z8001t5sjo89acccfm","_id":"ckari24zs002e5sjop2nopidb"},{"post_id":"ckari24zh00245sjo1kg73238","tag_id":"ckari24z8001t5sjo89acccfm","_id":"ckari24zu002i5sjothzgcj6o"},{"post_id":"ckari24xv000s5sjoc715rfug","tag_id":"ckari24zf00215sjozjdy12mz","_id":"ckari24zv002k5sjo9o5246aa"},{"post_id":"ckari24yb00105sjox8b4f4kw","tag_id":"ckari24zf00215sjozjdy12mz","_id":"ckari24zy002o5sjo23n8x3gc"},{"post_id":"ckari24za001w5sjo0dqmcyb5","tag_id":"ckari24zt002h5sjonplzvfmf","_id":"ckari24zz002q5sjomf599oi2"},{"post_id":"ckari24zd001z5sjor4jmd1wh","tag_id":"ckari24zx002n5sjo5tltfmgu","_id":"ckari2501002v5sjoxvcfntjb"},{"post_id":"ckari24zk00275sjojwmpkji6","tag_id":"ckari2500002t5sjo7a6yzeyw","_id":"ckari2503002x5sjojzmyc6g2"}],"Tag":[{"name":"方法","_id":"ckari24wt00065sjo1rmckoz0"},{"name":"Vue","_id":"ckari24xb000e5sjo11fcqtx2"},{"name":"开发环境","_id":"ckari24xm000l5sjoz6rto8ml"},{"name":"RN","_id":"ckari24yo001c5sjoz5hi1h8q"},{"name":"React","_id":"ckari24yw001k5sjonle0gy3e"},{"name":"随笔","_id":"ckari24z8001t5sjo89acccfm"},{"name":"TS","_id":"ckari24zf00215sjozjdy12mz"},{"name":"技术","_id":"ckari24zt002h5sjonplzvfmf"},{"name":"总结","_id":"ckari24zx002n5sjo5tltfmgu"},{"name":"面试","_id":"ckari2500002t5sjo7a6yzeyw"}]}}